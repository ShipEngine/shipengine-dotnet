{{#model}}
/// <summary>
/// {{description}}{{^description}}{{classname}}{{/description}}
/// </summary>
{{#vendorExtensions.x-cls-compliant}}
[CLSCompliant({{{.}}})]
{{/vendorExtensions.x-cls-compliant}}
{{#vendorExtensions.x-com-visible}}
[ComVisible({{{.}}})]
{{/vendorExtensions.x-com-visible}}
[JsonConverter(typeof({{classname}}JsonConverter))]
//[DataContract(Name = "{{{name}}}")]
{{>visibility}} partial class {{classname}} : {{#lambda.joinWithComma}}AbstractOpenAPISchema  {{#parent}}{{{.}}}  {{/parent}}{{#equatable}}IEquatable<{{classname}}>  {{/equatable}}{{#validatable}}IValidatableObject  {{/validatable}}{{/lambda.joinWithComma}}
{
{{#composedSchemas.allOf}}
    {{#allVars}}
    {{#items.isEnum}}
    {{#items}}
    {{^complexType}}
{{>modelInnerEnum}}
    {{/complexType}}
    {{/items}}
    {{/items.isEnum}}
    {{#isEnum}}
    {{^complexType}}
{{>modelInnerEnum}}
    {{/complexType}}
    {{/isEnum}}
    {{#isEnum}}

    /// <summary>
    /// {{description}}{{^description}}Gets or Sets {{{name}}}{{/description}}
    /// </summary>
    {{#description}}
    /// <value>{{.}}</value>
    {{/description}}
    {{#example}}
    /// <example>
    /// {{.}}
    /// </example>
    {{/example}}
    [JsonPropertyName("{{baseName}}")]{{#required}}
    [JsonRequired]{{/required}}
    {{#deprecated}}
    [Obsolete]
    {{/deprecated}}
    public {{{complexType}}}{{^complexType}}{{{datatypeWithEnum}}}{{/complexType}}{{^isContainer}}{{^required}}?{{/required}}{{/isContainer}} {{name}} { get; set; }{{#required}} = new();
    
    {{/required}}
    {{/isEnum}}
    {{/allVars}}

    {{#allVars}}
    {{^isInherited}}
    {{^isEnum}}
    /// <summary>
    /// {{description}}{{^description}}Gets or Sets {{{name}}}{{/description}}
    /// </summary>{{#description}}
    /// <value>{{.}}</value>{{/description}}
    {{#example}}
    /// <example>
    /// {{.}}
    /// </example>
    {{/example}}
    [JsonPropertyName("{{baseName}}")]{{#required}}
    [JsonRequired]{{/required}}
    {{#isDate}}
    [JsonConverter(typeof(DateJsonConverter))]
    {{/isDate}}
    {{#deprecated}}
    [Obsolete]
    {{/deprecated}}
    public {{{dataType}}} {{name}} { get; set; }

    {{/isEnum}}
    {{/isInherited}}
    {{/allVars}}
{{/composedSchemas.allOf}}
    {{#isAdditionalPropertiesTrue}}
    /// <summary>
    /// Gets or Sets additional properties
    /// </summary>
    [JsonExtensionData]
    public IDictionary<string, object> AdditionalProperties { get; set; }

    {{/isAdditionalPropertiesTrue}}

    {{#isNullable}}
    /// <summary>
    /// Initializes a new instance of the <see cref="{{classname}}" /> class.
    /// </summary>
    public {{classname}}()
    {
        this.IsNullable = true;
        this.SchemaType = "oneOf";
    }

    {{/isNullable}}
    {{#composedSchemas.oneOf}}
    {{^vendorExtensions.x-duplicated-data-type}}
    {{^isNull}}
    /// <summary>
    /// Initializes a new instance of the <see cref="{{classname}}" /> class
    /// with the <see cref="{{#lambdaCref}}{{{dataType}}}{{/lambdaCref}}" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of {{dataType}}.</param>
    public {{classname}}({{{dataType}}} actualInstance)
    {
        this.IsNullable = {{#model.isNullable}}true{{/model.isNullable}}{{^model.isNullable}}false{{/model.isNullable}};
        this.SchemaType = "oneOf";
        this.ActualInstance = actualInstance{{^model.isNullable}}{{^isPrimitiveType}} ?? throw new ArgumentException("Invalid instance found. Must not be null."){{/isPrimitiveType}}{{#isPrimitiveType}}{{#isArray}} ?? throw new ArgumentException("Invalid instance found. Must not be null."){{/isArray}}{{/isPrimitiveType}}{{#isPrimitiveType}}{{#isFreeFormObject}} ?? throw new ArgumentException("Invalid instance found. Must not be null."){{/isFreeFormObject}}{{/isPrimitiveType}}{{#isPrimitiveType}}{{#isString}} ?? throw new ArgumentException("Invalid instance found. Must not be null."){{/isString}}{{/isPrimitiveType}}{{/model.isNullable}};
    }

    {{/isNull}}
    {{/vendorExtensions.x-duplicated-data-type}}
    {{/composedSchemas.oneOf}}

    private Object _actualInstance;

    /// <summary>
    /// Gets or Sets ActualInstance
    /// </summary>
    public override Object ActualInstance
    {
        get
        {
            return _actualInstance;
        }
        set
        {
            {{#composedSchemas.oneOf}}
            {{^-first}}else {{/-first}}if (value.GetType() == typeof({{{dataType}}}))
            {
                this._actualInstance = value;
            }
            {{/composedSchemas.oneOf}}
            else
            {
                throw new ArgumentException("Invalid instance found. Must be the following types:{{#composedSchemas.oneOf}} {{{dataType}}}{{^-last}},{{/-last}}{{/composedSchemas.oneOf}}");
            }
        }
    }
    {{#composedSchemas.oneOf}}
    {{^vendorExtensions.x-duplicated-data-type}}
    {{^isNull}}

    /// <summary>
    /// Get the actual instance of `{{dataType}}`. If the actual instance is not `{{dataType}}`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of {{dataType}}</returns>
    public {{{dataType}}} Get{{#lambda.titlecase}}{{baseType}}{{/lambda.titlecase}}{{#isArray}}{{#lambda.titlecase}}{{{dataFormat}}}{{/lambda.titlecase}}{{/isArray}}()
    {
        return ({{{dataType}}})this.ActualInstance;
    }
    {{/isNull}}
    {{/vendorExtensions.x-duplicated-data-type}}
    {{/composedSchemas.oneOf}}

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class {{classname}} {\n");
        sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");

{{#composedSchemas.allOf}}
        {{#allVars}}
        sb.Append("  {{name}}: ").Append(this.{{name}}).Append("\n");
        {{/allVars}}
{{/composedSchemas.allOf}}
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public override string ToJson()
    {
        return JsonSerializer.Serialize(this.ActualInstance, {{classname}}.SerializerSettings);
    }

    {{#equatable}}
    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
        {{#useCompareNetObjects}}
        return OpenAPIClientUtils.compareLogic.Compare(this, input as {{classname}}).AreEqual;
        {{/useCompareNetObjects}}
        {{^useCompareNetObjects}}
        return this.Equals(input as {{classname}});
        {{/useCompareNetObjects}}
    }

    /// <summary>
    /// Returns true if {{classname}} instances are equal
    /// </summary>
    /// <param name="input">Instance of {{classname}} to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals({{classname}} input)
    {
        {{#useCompareNetObjects}}
        return OpenAPIClientUtils.compareLogic.Compare(this, input).AreEqual;
        {{/useCompareNetObjects}}
        {{^useCompareNetObjects}}
        if (input == null)
            return false;

        return this.ActualInstance.Equals(input.ActualInstance);
        {{/useCompareNetObjects}}
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            int hashCode = 41;
            if (this.ActualInstance != null)
                hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
            return hashCode;
        }
    }
    {{/equatable}}
    {{#validatable}}

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
    {{/validatable}}
}

/// <summary>
/// Custom JSON converter for {{classname}}
/// </summary>
public class {{classname}}JsonConverter : JsonConverter<{{classname}}>
{
    private static HashSet<Type> OneOfTypes = [{{#composedSchemas.oneOf}}typeof({{{dataType}}}){{^-last}}, {{/-last}}{{/composedSchemas.oneOf}}];
    private static HashSet<string> MandatoryFields = [{{#allMandatory}}"{{.}}"{{^-last}}, {{/-last}}{{/allMandatory}}];
    private static JsonSerializerOptions DeserializingOptions = new(AbstractOpenAPISchema.SerializerSettings)
    {
        TypeInfoResolver = new DefaultJsonTypeInfoResolver
        {
            Modifiers =
            {
                static typeInfo =>
                {
                    if (typeInfo.Kind != JsonTypeInfoKind.Object)
                        return;

                    foreach (JsonPropertyInfo propertyInfo in typeInfo.Properties)
                    {
                        // Strip IsRequired constraint from every property except those which define the underlying type
                        if (OneOfTypes.Contains(typeInfo.Type))
                        {
                            var underlyingPropertyName = (propertyInfo.AttributeProvider as MemberInfo)?.Name;
                            propertyInfo.IsRequired = underlyingPropertyName != null && MandatoryFields.Contains(underlyingPropertyName);
                        }
                        else
                        {
                            propertyInfo.IsRequired = false;
                        }
                    }
                }
            }
        }
    };

    /// <summary>
    /// To write the JSON string
    /// </summary>
    /// <param name="writer">JSON writer</param>
    /// <param name="value">Object to be converted into a JSON string</param>
    /// <param name="options">Serializer options</param>
    public override void Write(Utf8JsonWriter writer, {{classname}} value, JsonSerializerOptions options)
    {
        writer.WriteStartObject();

{{#composedSchemas.allOf}}
        {{#allVars}}
        writer.WritePropertyName("{{baseName}}");
        JsonSerializer.Serialize(writer, value.{{name}}, options);
        {{/allVars}}
{{/composedSchemas.allOf}}

        var node = JsonSerializer.SerializeToNode(value.ActualInstance, options);
        foreach (var prop in node?.AsObject() ?? [])
        {
            if (prop.Value != null)
            {
                writer.WritePropertyName(prop.Key);
                prop.Value.WriteTo(writer, options);
            }
        }

        writer.WriteEndObject();
    }

    /// <summary>
    /// To convert a JSON string into an object
    /// </summary>
    /// <param name="reader">JSON reader</param>
    /// <param name="typeToConvert">Object type to convert</param>
    /// <param name="options">Serializer options</param>
    /// <returns>The object converted from the JSON string</returns>
    public override {{classname}} Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType == JsonTokenType.Null)
        {
            return null;
        }

        var jsonDoc = JsonDocument.ParseValue(ref reader);
        {{classname}} new{{classname}} = null;

        int match = 0;
        var matchedTypes = new List<string>();
        {{#composedSchemas.oneOf}}

        try
        {
            new{{classname}} = new {{classname}}(JsonSerializer.Deserialize<{{{dataType}}}>(jsonDoc, DeserializingOptions));

            matchedTypes.Add("{{{dataType}}}");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into {{{dataType}}}: {1}", jsonDoc, exception.ToString()));
        }
        {{/composedSchemas.oneOf}}

        if (match == 0)
        {
            throw new InvalidDataException("The JSON string `" + jsonDoc + "` cannot be deserialized into any schema defined.");
        }

        if (match > 1)
        {
            throw new InvalidDataException("The JSON string `" + jsonDoc + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
        }

{{#composedSchemas.allOf}}
        {{#allVars}}
        new{{classname}}.{{name}} = JsonSerializer.Deserialize<{{#isEnum}}{{{complexType}}}{{^complexType}}{{{datatypeWithEnum}}}{{/complexType}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}>(jsonDoc.RootElement.GetProperty("{{baseName}}"), DeserializingOptions);
        {{/allVars}}
{{/composedSchemas.allOf}}

        // deserialization is considered successful at this point if no exception has been thrown.
        return new{{classname}};
    }

    /// <summary>
    /// Check if the object can be converted
    /// </summary>
    /// <param name="objectType">Object type</param>
    /// <returns>True if the object can be converted</returns>
    public override bool CanConvert(Type objectType)
    {
        return typeof({{classname}}).IsAssignableFrom(objectType);
    }
}{{/model}}