{{>partial_header}}

{{#hasOAuthMethods}}using {{packageName}}.Client.Auth;
{{/hasOAuthMethods}}
{{#hasImport}}using {{packageName}}.{{modelPackage}};
{{/hasImport}}
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace {{packageName}};

{{#operations}}
/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
{{>visibility}} partial interface IShipEngine
{
    {{#operation}}
    /// <summary>
    /// {{summary}} {{notes}}
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="{{packageName}}.ShipEngineException">Thrown when fails to make API call</exception>
    {{#allParams}}
    /// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
    {{/allParams}}
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse{{#returnType}} ({{.}}){{/returnType}}</returns>
    {{#isDeprecated}}
    [Obsolete]
    {{/isDeprecated}}
    Task<{{{returnType}}}{{^returnType}}Object{{/returnType}}> {{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}}CancellationToken cancellationToken = default);

    /// <summary>
    /// {{summary}} {{notes}}
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="{{packageName}}.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    {{#allParams}}
    /// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
    {{/allParams}}
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse{{#returnType}} ({{.}}){{/returnType}}</returns>
    {{#isDeprecated}}
    [Obsolete]
    {{/isDeprecated}}
    Task<{{{returnType}}}{{^returnType}}Object{{/returnType}}> {{operationId}}(HttpClient methodClient, {{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}}CancellationToken cancellationToken = default);

    {{/operation}}
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
{{>visibility}} partial class ShipEngine
{
    {{#operation}}
    /// <summary>
    /// {{summary}} {{notes}}
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="{{packageName}}.ShipEngineException">Thrown when fails to make API call</exception>
    {{#allParams}}
    /// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
    {{/allParams}}
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse{{#returnType}} ({{.}}){{/returnType}}</returns>
    {{#isDeprecated}}
    [Obsolete]
    {{/isDeprecated}}
    public Task<{{{returnType}}}{{^returnType}}Object{{/returnType}}> {{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = default{{/optionalMethodArgument}}{{/required}}, {{/allParams}}CancellationToken cancellationToken = default)
    {
        return {{operationId}}(_client, {{#allParams}}{{paramName}}, {{/allParams}}cancellationToken);
    }

    /// <summary>
    /// {{summary}} {{notes}}
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="{{packageName}}.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    {{#allParams}}
    /// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
    {{/allParams}}
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse{{#returnType}} ({{.}}){{/returnType}}</returns>
    {{#isDeprecated}}
    [Obsolete]
    {{/isDeprecated}}
    public async Task<{{{returnType}}}{{^returnType}}Object{{/returnType}}> {{operationId}}(HttpClient methodClient, {{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = default{{/optionalMethodArgument}}{{/required}}, {{/allParams}}CancellationToken cancellationToken = default)
    {
        {{#allParams}}
        {{#required}}
        {{^vendorExtensions.x-csharp-value-type}}
        // verify the required parameter '{{paramName}}' is set
        if ({{paramName}} == null)
        {
            throw new ArgumentNullException(nameof({{paramName}}));
        }

        {{/vendorExtensions.x-csharp-value-type}}
        {{/required}}
        {{/allParams}}

        RequestOptions requestOptions = new("{{path}}");

        {{#constantParams}}
        {{#isPathParam}}
        // Set client side default value of Path Param "{{baseName}}".
        requestOptions.PathParameters.Add("{{baseName}}", {{packageName}}.ClientUtils.ParameterToString({{#_enum}}"{{{.}}}"{{/_enum}})); // Constant path parameter
        {{/isPathParam}}
        {{/constantParams}}
        {{#pathParams}}
        {{#required}}
        requestOptions.PathParameters.Add("{{baseName}}", {{packageName}}.ClientUtils.ParameterToString({{paramName}})); // path parameter
        {{/required}}
        {{^required}}
        if ({{paramName}} != null)
        {
            requestOptions.PathParameters.Add("{{baseName}}", {{packageName}}.ClientUtils.ParameterToString({{paramName}})); // path parameter
        }
        {{/required}}
        {{/pathParams}}
        {{#constantParams}}
        {{#isQueryParam}}
        // Set client side default value of Query Param "{{baseName}}".
        requestOptions.QueryParameters.Add("{{baseName}}", {{packageName}}.ClientUtils.ParameterToString({{#_enum}}"{{{.}}}"{{/_enum}})); // Constant query parameter
        {{/isQueryParam}}
        {{/constantParams}}
        {{#queryParams}}
        {{#required}}
        {{#isDeepObject}}
        {{#items.vars}}
        requestOptions.QueryParameters.Add({{packageName}}.ClientUtils.ParameterToMultiMap("{{collectionFormat}}", "{{baseName}}", {{paramName}}.{{name}}));
        {{/items.vars}}
        {{^items}}
        requestOptions.QueryParameters.Add({{packageName}}.ClientUtils.ParameterToMultiMap("deepObject", "{{baseName}}", {{paramName}}));
        {{/items}}
        {{/isDeepObject}}
        {{^isDeepObject}}
        requestOptions.QueryParameters.Add({{packageName}}.ClientUtils.ParameterToMultiMap("{{collectionFormat}}", "{{baseName}}", {{paramName}}));
        {{/isDeepObject}}
        {{/required}}
        {{^required}}
        if ({{paramName}} != null)
        {
            {{#isDeepObject}}
            {{#items.vars}}
            if ({{paramName}}.{{name}} != null)
            {
                requestOptions.QueryParameters.Add({{packageName}}.ClientUtils.ParameterToMultiMap("{{collectionFormat}}", "{{paramName}}[{{#lambda.camelcase_sanitize_param}}{{name}}{{/lambda.camelcase_sanitize_param}}]", {{paramName}}.{{name}}));
            }
            {{/items.vars}}
            {{^items}}
            requestOptions.QueryParameters.Add({{packageName}}.ClientUtils.ParameterToMultiMap("deepObject", "{{baseName}}", {{paramName}}));
            {{/items}}
            {{/isDeepObject}}
            {{^isDeepObject}}
            requestOptions.QueryParameters.Add({{packageName}}.ClientUtils.ParameterToMultiMap("{{collectionFormat}}", "{{baseName}}", {{paramName}}));
            {{/isDeepObject}}
        }
        {{/required}}
        {{/queryParams}}
        {{#constantParams}}
        {{#isHeaderParam}}
        // Set client side default value of Header Param "{{baseName}}".
        requestOptions.HeaderParameters.Add("{{baseName}}", {{packageName}}.ClientUtils.ParameterToString({{#_enum}}"{{{.}}}"{{/_enum}})); // Constant header parameter
        {{/isHeaderParam}}
        {{/constantParams}}
        {{#headerParams}}
        {{#required}}
        requestOptions.HeaderParameters.Add("{{baseName}}", {{packageName}}.ClientUtils.ParameterToString({{paramName}})); // header parameter
        {{/required}}
        {{^required}}
        if ({{paramName}} != null)
        {
            requestOptions.HeaderParameters.Add("{{baseName}}", {{packageName}}.ClientUtils.ParameterToString({{paramName}})); // header parameter
        }
        {{/required}}
        {{/headerParams}}
        {{#formParams}}
        {{#required}}
        {{#isFile}}
        {{#isArray}}
        {{#supportsFileParameters}}
        foreach (var file in {{paramName}})
        {
            requestOptions.FileParameters.Add("{{baseName}}", file);
        }
        {{/supportsFileParameters}}
        {{/isArray}}
        {{^isArray}}
        {{#supportsFileParameters}}
        requestOptions.FileParameters.Add("{{baseName}}", {{paramName}});
        {{/supportsFileParameters}}
        {{/isArray}}
        {{/isFile}}
        {{^isFile}}
        requestOptions.FormParameters.Add("{{baseName}}", {{packageName}}.ClientUtils.{{#isPrimitiveType}}ParameterToString{{/isPrimitiveType}}{{^isPrimitiveType}}Serialize{{/isPrimitiveType}}({{paramName}})); // form parameter
        {{/isFile}}
        {{/required}}
        {{^required}}
        if ({{paramName}} != null)
        {
            {{#isFile}}
            {{#isArray}}
            {{#supportsFileParameters}}
            foreach (var file in {{paramName}})
            {
                requestOptions.FileParameters.Add("{{baseName}}", file);
            }
            {{/supportsFileParameters}}
            {{/isArray}}
            {{^isArray}}
            {{#supportsFileParameters}}
            requestOptions.FileParameters.Add("{{baseName}}", {{paramName}});
            {{/supportsFileParameters}}
            {{/isArray}}
            {{/isFile}}
            {{^isFile}}
            requestOptions.FormParameters.Add("{{baseName}}", {{packageName}}.ClientUtils.{{#isPrimitiveType}}ParameterToString{{/isPrimitiveType}}{{^isPrimitiveType}}Serialize{{/isPrimitiveType}}({{paramName}})); // form parameter
            {{/isFile}}
        }
        {{/required}}
        {{/formParams}}
        {{#bodyParam}}
        requestOptions.Data = JsonSerializer.Serialize({{paramName}}, JsonSerializerOptions);
        {{/bodyParam}}

        requestOptions.Operation = "{{classname}}.{{operationId}}";

        var result = await SendHttpRequestAsync<{{{returnType}}}{{^returnType}}Object{{/returnType}}>(HttpMethods.{{#lambda.titlecase}}{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}{{/lambda.titlecase}}, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    {{/operation}}
}{{/operations}}