/*
 * ShipEngine API
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using ShipEngineSDK.Client;
using ShipEngineSDK.Model;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text.Json;
using Xunit;

namespace ShipEngineSDK.Test.Model
{
    /// <summary>
    ///  Class for testing OrderSourceName
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class OrderSourceNameTests
    {
        [Fact]
        public void ParameterlessConstructorSetsDefaultValue()
        {
            var testModel = new OrderSourceName();
            Assert.Equal("amazon_ca", testModel.ToString());
        }

        [Fact]
        public void AmazonCaTest()
        {
            var testModel = OrderSourceName.AmazonCa;
            Assert.Equal("amazon_ca", testModel.ToString());
        }

        [Fact]
        public void AmazonUsTest()
        {
            var testModel = OrderSourceName.AmazonUs;
            Assert.Equal("amazon_us", testModel.ToString());
        }

        [Fact]
        public void BrightpearlTest()
        {
            var testModel = OrderSourceName.Brightpearl;
            Assert.Equal("brightpearl", testModel.ToString());
        }

        [Fact]
        public void ChannelAdvisorTest()
        {
            var testModel = OrderSourceName.ChannelAdvisor;
            Assert.Equal("channel_advisor", testModel.ToString());
        }

        [Fact]
        public void CratejoyTest()
        {
            var testModel = OrderSourceName.Cratejoy;
            Assert.Equal("cratejoy", testModel.ToString());
        }

        [Fact]
        public void EbayTest()
        {
            var testModel = OrderSourceName.Ebay;
            Assert.Equal("ebay", testModel.ToString());
        }

        [Fact]
        public void EtsyTest()
        {
            var testModel = OrderSourceName.Etsy;
            Assert.Equal("etsy", testModel.ToString());
        }

        [Fact]
        public void JaneTest()
        {
            var testModel = OrderSourceName.Jane;
            Assert.Equal("jane", testModel.ToString());
        }

        [Fact]
        public void GrouponGoodsTest()
        {
            var testModel = OrderSourceName.GrouponGoods;
            Assert.Equal("groupon_goods", testModel.ToString());
        }

        [Fact]
        public void MagentoTest()
        {
            var testModel = OrderSourceName.Magento;
            Assert.Equal("magento", testModel.ToString());
        }

        [Fact]
        public void PaypalTest()
        {
            var testModel = OrderSourceName.Paypal;
            Assert.Equal("paypal", testModel.ToString());
        }

        [Fact]
        public void SellerActiveTest()
        {
            var testModel = OrderSourceName.SellerActive;
            Assert.Equal("seller_active", testModel.ToString());
        }

        [Fact]
        public void ShopifyTest()
        {
            var testModel = OrderSourceName.Shopify;
            Assert.Equal("shopify", testModel.ToString());
        }

        [Fact]
        public void StitchLabsTest()
        {
            var testModel = OrderSourceName.StitchLabs;
            Assert.Equal("stitch_labs", testModel.ToString());
        }

        [Fact]
        public void SquarespaceTest()
        {
            var testModel = OrderSourceName.Squarespace;
            Assert.Equal("squarespace", testModel.ToString());
        }

        [Fact]
        public void ThreeDcartTest()
        {
            var testModel = OrderSourceName.ThreeDcart;
            Assert.Equal("three_dcart", testModel.ToString());
        }

        [Fact]
        public void TophatterTest()
        {
            var testModel = OrderSourceName.Tophatter;
            Assert.Equal("tophatter", testModel.ToString());
        }

        [Fact]
        public void WalmartTest()
        {
            var testModel = OrderSourceName.Walmart;
            Assert.Equal("walmart", testModel.ToString());
        }

        [Fact]
        public void WooCommerceTest()
        {
            var testModel = OrderSourceName.WooCommerce;
            Assert.Equal("woo_commerce", testModel.ToString());
        }

        [Fact]
        public void VolusionTest()
        {
            var testModel = OrderSourceName.Volusion;
            Assert.Equal("volusion", testModel.ToString());
        }


        [Fact]
        public void CustomValueTest()
        {
            var testModel = new OrderSourceName("a custom value");
            Assert.Equal("a custom value", testModel.ToString());
        }

        /// <summary>
        /// Test deserialize a OrderSourceName from a string
        /// </summary>
        [Fact]
        public void CanDeserializeFromStringTest()
        {
            var testModel = JsonSerializer.Deserialize<OrderSourceName>("\"a custom value\"");
            Assert.IsType<OrderSourceName>(testModel);
            Assert.Equal("a custom value", testModel.ToString());
        }
    }

}