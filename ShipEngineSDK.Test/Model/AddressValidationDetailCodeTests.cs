/*
 * ShipEngine API
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using ShipEngineSDK.Client;
using ShipEngineSDK.Model;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text.Json;
using Xunit;

namespace ShipEngineSDK.Test.Model
{
    /// <summary>
    ///  Class for testing AddressValidationDetailCode
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class AddressValidationDetailCodeTests
    {
        [Fact]
        public void ParameterlessConstructorSetsDefaultValue()
        {
            var testModel = new AddressValidationDetailCode();
            Assert.Equal("unsupported_country", testModel.ToString());
        }

        [Fact]
        public void UnsupportedCountryTest()
        {
            var testModel = AddressValidationDetailCode.UnsupportedCountry;
            Assert.Equal("unsupported_country", testModel.ToString());
        }

        [Fact]
        public void NonSupportedCountryTest()
        {
            var testModel = AddressValidationDetailCode.NonSupportedCountry;
            Assert.Equal("non_supported_country", testModel.ToString());
        }

        [Fact]
        public void MinimumPostalCodeVerificationFailedTest()
        {
            var testModel = AddressValidationDetailCode.MinimumPostalCodeVerificationFailed;
            Assert.Equal("minimum_postal_code_verification_failed", testModel.ToString());
        }

        [Fact]
        public void StreetDoesNotMatchUniqueStreetNameTest()
        {
            var testModel = AddressValidationDetailCode.StreetDoesNotMatchUniqueStreetName;
            Assert.Equal("street_does_not_match_unique_street_name", testModel.ToString());
        }

        [Fact]
        public void MultipleDirectionalsTest()
        {
            var testModel = AddressValidationDetailCode.MultipleDirectionals;
            Assert.Equal("multiple_directionals", testModel.ToString());
        }

        [Fact]
        public void MultipleMatchesTest()
        {
            var testModel = AddressValidationDetailCode.MultipleMatches;
            Assert.Equal("multiple_matches", testModel.ToString());
        }

        [Fact]
        public void SuiteNotValidTest()
        {
            var testModel = AddressValidationDetailCode.SuiteNotValid;
            Assert.Equal("suite_not_valid", testModel.ToString());
        }

        [Fact]
        public void SuiteMissingTest()
        {
            var testModel = AddressValidationDetailCode.SuiteMissing;
            Assert.Equal("suite_missing", testModel.ToString());
        }

        [Fact]
        public void IncompatiblePairedLabelsTest()
        {
            var testModel = AddressValidationDetailCode.IncompatiblePairedLabels;
            Assert.Equal("incompatible_paired_labels", testModel.ToString());
        }

        [Fact]
        public void InvalidHouseNumberTest()
        {
            var testModel = AddressValidationDetailCode.InvalidHouseNumber;
            Assert.Equal("invalid_house_number", testModel.ToString());
        }

        [Fact]
        public void MissingHouseNumberTest()
        {
            var testModel = AddressValidationDetailCode.MissingHouseNumber;
            Assert.Equal("missing_house_number", testModel.ToString());
        }

        [Fact]
        public void InvalidBoxNumberTest()
        {
            var testModel = AddressValidationDetailCode.InvalidBoxNumber;
            Assert.Equal("invalid_box_number", testModel.ToString());
        }

        [Fact]
        public void InvalidChargeEventTest()
        {
            var testModel = AddressValidationDetailCode.InvalidChargeEvent;
            Assert.Equal("invalid_charge_event", testModel.ToString());
        }

        [Fact]
        public void MissingBoxNumberTest()
        {
            var testModel = AddressValidationDetailCode.MissingBoxNumber;
            Assert.Equal("missing_box_number", testModel.ToString());
        }

        [Fact]
        public void MissingCmraOrPrivateMailBoxNumberTest()
        {
            var testModel = AddressValidationDetailCode.MissingCmraOrPrivateMailBoxNumber;
            Assert.Equal("missing_cmra_or_private_mail_box_number", testModel.ToString());
        }

        [Fact]
        public void SuiteHasNoSecondariesTest()
        {
            var testModel = AddressValidationDetailCode.SuiteHasNoSecondaries;
            Assert.Equal("suite_has_no_secondaries", testModel.ToString());
        }

        [Fact]
        public void PostalCodeChangedOrAddedTest()
        {
            var testModel = AddressValidationDetailCode.PostalCodeChangedOrAdded;
            Assert.Equal("postal_code_changed_or_added", testModel.ToString());
        }

        [Fact]
        public void StateProvinceChangedOrAddedTest()
        {
            var testModel = AddressValidationDetailCode.StateProvinceChangedOrAdded;
            Assert.Equal("state_province_changed_or_added", testModel.ToString());
        }

        [Fact]
        public void CityLocalityChangedOrAddedTest()
        {
            var testModel = AddressValidationDetailCode.CityLocalityChangedOrAdded;
            Assert.Equal("city_locality_changed_or_added", testModel.ToString());
        }

        [Fact]
        public void UrbanizationChangedTest()
        {
            var testModel = AddressValidationDetailCode.UrbanizationChanged;
            Assert.Equal("urbanization_changed", testModel.ToString());
        }

        [Fact]
        public void StreetNameSpellingChangedOrAddedTest()
        {
            var testModel = AddressValidationDetailCode.StreetNameSpellingChangedOrAdded;
            Assert.Equal("street_name_spelling_changed_or_added", testModel.ToString());
        }

        [Fact]
        public void StreetNameTypeChangedOrAddedTest()
        {
            var testModel = AddressValidationDetailCode.StreetNameTypeChangedOrAdded;
            Assert.Equal("street_name_type_changed_or_added", testModel.ToString());
        }

        [Fact]
        public void StreetDirectionChangedOrAddedTest()
        {
            var testModel = AddressValidationDetailCode.StreetDirectionChangedOrAdded;
            Assert.Equal("street_direction_changed_or_added", testModel.ToString());
        }

        [Fact]
        public void SuiteTypeChangedOrAddedTest()
        {
            var testModel = AddressValidationDetailCode.SuiteTypeChangedOrAdded;
            Assert.Equal("suite_type_changed_or_added", testModel.ToString());
        }

        [Fact]
        public void SuiteUnitNumberChangedOrAddedTest()
        {
            var testModel = AddressValidationDetailCode.SuiteUnitNumberChangedOrAdded;
            Assert.Equal("suite_unit_number_changed_or_added", testModel.ToString());
        }

        [Fact]
        public void DoubleDependentLocalityChangedOrAddedTest()
        {
            var testModel = AddressValidationDetailCode.DoubleDependentLocalityChangedOrAdded;
            Assert.Equal("double_dependent_locality_changed_or_added", testModel.ToString());
        }

        [Fact]
        public void SubadministrativeAreaChangedOrAddedTest()
        {
            var testModel = AddressValidationDetailCode.SubadministrativeAreaChangedOrAdded;
            Assert.Equal("subadministrative_area_changed_or_added", testModel.ToString());
        }

        [Fact]
        public void SubnationalAreaChangedOrAddedTest()
        {
            var testModel = AddressValidationDetailCode.SubnationalAreaChangedOrAdded;
            Assert.Equal("subnational_area_changed_or_added", testModel.ToString());
        }

        [Fact]
        public void PoBoxChangedOrAddedTest()
        {
            var testModel = AddressValidationDetailCode.PoBoxChangedOrAdded;
            Assert.Equal("po_box_changed_or_added", testModel.ToString());
        }

        [Fact]
        public void PremiseTypeChangedOrAddedTest()
        {
            var testModel = AddressValidationDetailCode.PremiseTypeChangedOrAdded;
            Assert.Equal("premise_type_changed_or_added", testModel.ToString());
        }

        [Fact]
        public void HouseNumberChangedTest()
        {
            var testModel = AddressValidationDetailCode.HouseNumberChanged;
            Assert.Equal("house_number_changed", testModel.ToString());
        }

        [Fact]
        public void OrganizationChangedOrAddedTest()
        {
            var testModel = AddressValidationDetailCode.OrganizationChangedOrAdded;
            Assert.Equal("organization_changed_or_added", testModel.ToString());
        }

        [Fact]
        public void PartiallyVerifiedToStateLevelTest()
        {
            var testModel = AddressValidationDetailCode.PartiallyVerifiedToStateLevel;
            Assert.Equal("partially_verified_to_state_level", testModel.ToString());
        }

        [Fact]
        public void PartiallyVerifiedToCityLevelTest()
        {
            var testModel = AddressValidationDetailCode.PartiallyVerifiedToCityLevel;
            Assert.Equal("partially_verified_to_city_level", testModel.ToString());
        }

        [Fact]
        public void PartiallyVerifiedToStreetLevelTest()
        {
            var testModel = AddressValidationDetailCode.PartiallyVerifiedToStreetLevel;
            Assert.Equal("partially_verified_to_street_level", testModel.ToString());
        }

        [Fact]
        public void PartiallyVerifiedToPremiseLevelTest()
        {
            var testModel = AddressValidationDetailCode.PartiallyVerifiedToPremiseLevel;
            Assert.Equal("partially_verified_to_premise_level", testModel.ToString());
        }

        [Fact]
        public void VerifiedToStateLevelTest()
        {
            var testModel = AddressValidationDetailCode.VerifiedToStateLevel;
            Assert.Equal("verified_to_state_level", testModel.ToString());
        }

        [Fact]
        public void VerifiedToCityLevelTest()
        {
            var testModel = AddressValidationDetailCode.VerifiedToCityLevel;
            Assert.Equal("verified_to_city_level", testModel.ToString());
        }

        [Fact]
        public void VerifiedToStreetLevelTest()
        {
            var testModel = AddressValidationDetailCode.VerifiedToStreetLevel;
            Assert.Equal("verified_to_street_level", testModel.ToString());
        }

        [Fact]
        public void VerifiedToPremiseLevelTest()
        {
            var testModel = AddressValidationDetailCode.VerifiedToPremiseLevel;
            Assert.Equal("verified_to_premise_level", testModel.ToString());
        }

        [Fact]
        public void VerifiedToSuiteLevelTest()
        {
            var testModel = AddressValidationDetailCode.VerifiedToSuiteLevel;
            Assert.Equal("verified_to_suite_level", testModel.ToString());
        }

        [Fact]
        public void CodedToStreetLavelTest()
        {
            var testModel = AddressValidationDetailCode.CodedToStreetLavel;
            Assert.Equal("coded_to_street_lavel", testModel.ToString());
        }

        [Fact]
        public void CodedToNeighborhoodLevelTest()
        {
            var testModel = AddressValidationDetailCode.CodedToNeighborhoodLevel;
            Assert.Equal("coded_to_neighborhood_level", testModel.ToString());
        }

        [Fact]
        public void CodedToCommunityLevelTest()
        {
            var testModel = AddressValidationDetailCode.CodedToCommunityLevel;
            Assert.Equal("coded_to_community_level", testModel.ToString());
        }

        [Fact]
        public void CodedToStateLevelTest()
        {
            var testModel = AddressValidationDetailCode.CodedToStateLevel;
            Assert.Equal("coded_to_state_level", testModel.ToString());
        }

        [Fact]
        public void CodedToRooftopLevelTest()
        {
            var testModel = AddressValidationDetailCode.CodedToRooftopLevel;
            Assert.Equal("coded_to_rooftop_level", testModel.ToString());
        }

        [Fact]
        public void CodedToRooftopInterpolationLevelTest()
        {
            var testModel = AddressValidationDetailCode.CodedToRooftopInterpolationLevel;
            Assert.Equal("coded_to_rooftop_interpolation_level", testModel.ToString());
        }

        [Fact]
        public void NameMaxLengthExceededTest()
        {
            var testModel = AddressValidationDetailCode.NameMaxLengthExceeded;
            Assert.Equal("name_max_length_exceeded", testModel.ToString());
        }

        [Fact]
        public void PhoneMaxLengthExceededTest()
        {
            var testModel = AddressValidationDetailCode.PhoneMaxLengthExceeded;
            Assert.Equal("phone_max_length_exceeded", testModel.ToString());
        }

        [Fact]
        public void CompanyNameMaxLengthExceededTest()
        {
            var testModel = AddressValidationDetailCode.CompanyNameMaxLengthExceeded;
            Assert.Equal("company_name_max_length_exceeded", testModel.ToString());
        }

        [Fact]
        public void Line1MinMaxLengthTest()
        {
            var testModel = AddressValidationDetailCode.Line1MinMaxLength;
            Assert.Equal("line1_min_max_length", testModel.ToString());
        }

        [Fact]
        public void Line2MaxLengthExceededTest()
        {
            var testModel = AddressValidationDetailCode.Line2MaxLengthExceeded;
            Assert.Equal("line2_max_length_exceeded", testModel.ToString());
        }

        [Fact]
        public void Line3MaxLengthExceededTest()
        {
            var testModel = AddressValidationDetailCode.Line3MaxLengthExceeded;
            Assert.Equal("line3_max_length_exceeded", testModel.ToString());
        }

        [Fact]
        public void CityLocalityMaxLengthExceededTest()
        {
            var testModel = AddressValidationDetailCode.CityLocalityMaxLengthExceeded;
            Assert.Equal("city_locality_max_length_exceeded", testModel.ToString());
        }

        [Fact]
        public void StateProvinceMaxLengthExceededTest()
        {
            var testModel = AddressValidationDetailCode.StateProvinceMaxLengthExceeded;
            Assert.Equal("state_province_max_length_exceeded", testModel.ToString());
        }

        [Fact]
        public void InvalidPostalCodeTest()
        {
            var testModel = AddressValidationDetailCode.InvalidPostalCode;
            Assert.Equal("invalid_postal_code", testModel.ToString());
        }

        [Fact]
        public void CountryInvalidLengthTest()
        {
            var testModel = AddressValidationDetailCode.CountryInvalidLength;
            Assert.Equal("country_invalid_length", testModel.ToString());
        }

        [Fact]
        public void AddressNotFoundTest()
        {
            var testModel = AddressValidationDetailCode.AddressNotFound;
            Assert.Equal("address_not_found", testModel.ToString());
        }


        [Fact]
        public void CustomValueTest()
        {
            var testModel = new AddressValidationDetailCode("a custom value");
            Assert.Equal("a custom value", testModel.ToString());
        }

        /// <summary>
        /// Test deserialize a AddressValidationDetailCode from a string
        /// </summary>
        [Fact]
        public void CanDeserializeFromStringTest()
        {
            var testModel = JsonSerializer.Deserialize<AddressValidationDetailCode>("\"a custom value\"");
            Assert.IsType<AddressValidationDetailCode>(testModel);
            Assert.Equal("a custom value", testModel.ToString());
        }
    }

}