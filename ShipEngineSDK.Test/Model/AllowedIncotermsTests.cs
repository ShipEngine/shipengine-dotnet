/*
 * ShipEngine API
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using ShipEngineSDK.Client;
using ShipEngineSDK.Model;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text.Json;
using Xunit;

namespace ShipEngineSDK.Test.Model
{
    /// <summary>
    ///  Class for testing AllowedIncoterms
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class AllowedIncotermsTests
    {
        [Fact]
        public void ParameterlessConstructorSetsDefaultValue()
        {
            var testModel = new AllowedIncoterms();
            Assert.Equal("exw", testModel.ToString());
        }

        [Fact]
        public void ExwTest()
        {
            var testModel = AllowedIncoterms.Exw;
            Assert.Equal("exw", testModel.ToString());
        }

        [Fact]
        public void FcaTest()
        {
            var testModel = AllowedIncoterms.Fca;
            Assert.Equal("fca", testModel.ToString());
        }

        [Fact]
        public void CptTest()
        {
            var testModel = AllowedIncoterms.Cpt;
            Assert.Equal("cpt", testModel.ToString());
        }

        [Fact]
        public void CipTest()
        {
            var testModel = AllowedIncoterms.Cip;
            Assert.Equal("cip", testModel.ToString());
        }

        [Fact]
        public void DpuTest()
        {
            var testModel = AllowedIncoterms.Dpu;
            Assert.Equal("dpu", testModel.ToString());
        }

        [Fact]
        public void DapTest()
        {
            var testModel = AllowedIncoterms.Dap;
            Assert.Equal("dap", testModel.ToString());
        }

        [Fact]
        public void DdpTest()
        {
            var testModel = AllowedIncoterms.Ddp;
            Assert.Equal("ddp", testModel.ToString());
        }

        [Fact]
        public void FasTest()
        {
            var testModel = AllowedIncoterms.Fas;
            Assert.Equal("fas", testModel.ToString());
        }

        [Fact]
        public void FobTest()
        {
            var testModel = AllowedIncoterms.Fob;
            Assert.Equal("fob", testModel.ToString());
        }

        [Fact]
        public void CfrTest()
        {
            var testModel = AllowedIncoterms.Cfr;
            Assert.Equal("cfr", testModel.ToString());
        }

        [Fact]
        public void CifTest()
        {
            var testModel = AllowedIncoterms.Cif;
            Assert.Equal("cif", testModel.ToString());
        }

        [Fact]
        public void DduTest()
        {
            var testModel = AllowedIncoterms.Ddu;
            Assert.Equal("ddu", testModel.ToString());
        }

        [Fact]
        public void DafTest()
        {
            var testModel = AllowedIncoterms.Daf;
            Assert.Equal("daf", testModel.ToString());
        }

        [Fact]
        public void DeqTest()
        {
            var testModel = AllowedIncoterms.Deq;
            Assert.Equal("deq", testModel.ToString());
        }

        [Fact]
        public void DesTest()
        {
            var testModel = AllowedIncoterms.Des;
            Assert.Equal("des", testModel.ToString());
        }


        [Fact]
        public void CustomValueTest()
        {
            var testModel = new AllowedIncoterms("a custom value");
            Assert.Equal("a custom value", testModel.ToString());
        }

        /// <summary>
        /// Test deserialize a AllowedIncoterms from a string
        /// </summary>
        [Fact]
        public void CanDeserializeFromStringTest()
        {
            var testModel = JsonSerializer.Deserialize<AllowedIncoterms>("\"a custom value\"");
            Assert.IsType<AllowedIncoterms>(testModel);
            Assert.Equal("a custom value", testModel.ToString());
        }
    }

}