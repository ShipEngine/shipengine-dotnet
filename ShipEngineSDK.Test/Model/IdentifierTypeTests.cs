/*
 * ShipEngine API
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using ShipEngineSDK.Client;
using ShipEngineSDK.Model;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text.Json;
using Xunit;

namespace ShipEngineSDK.Test.Model
{
    /// <summary>
    ///  Class for testing IdentifierType
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class IdentifierTypeTests
    {
        [Fact]
        public void ParameterlessConstructorSetsDefaultValue()
        {
            var testModel = new IdentifierType();
            Assert.Equal("vat", testModel.ToString());
        }

        [Fact]
        public void VatTest()
        {
            var testModel = IdentifierType.Vat;
            Assert.Equal("vat", testModel.ToString());
        }

        [Fact]
        public void EoriTest()
        {
            var testModel = IdentifierType.Eori;
            Assert.Equal("eori", testModel.ToString());
        }

        [Fact]
        public void SsnTest()
        {
            var testModel = IdentifierType.Ssn;
            Assert.Equal("ssn", testModel.ToString());
        }

        [Fact]
        public void EinTest()
        {
            var testModel = IdentifierType.Ein;
            Assert.Equal("ein", testModel.ToString());
        }

        [Fact]
        public void TinTest()
        {
            var testModel = IdentifierType.Tin;
            Assert.Equal("tin", testModel.ToString());
        }

        [Fact]
        public void IossTest()
        {
            var testModel = IdentifierType.Ioss;
            Assert.Equal("ioss", testModel.ToString());
        }

        [Fact]
        public void PanTest()
        {
            var testModel = IdentifierType.Pan;
            Assert.Equal("pan", testModel.ToString());
        }

        [Fact]
        public void VoecTest()
        {
            var testModel = IdentifierType.Voec;
            Assert.Equal("voec", testModel.ToString());
        }

        [Fact]
        public void PcccTest()
        {
            var testModel = IdentifierType.Pccc;
            Assert.Equal("pccc", testModel.ToString());
        }

        [Fact]
        public void OssTest()
        {
            var testModel = IdentifierType.Oss;
            Assert.Equal("oss", testModel.ToString());
        }

        [Fact]
        public void PassportTest()
        {
            var testModel = IdentifierType.Passport;
            Assert.Equal("passport", testModel.ToString());
        }

        [Fact]
        public void AbnTest()
        {
            var testModel = IdentifierType.Abn;
            Assert.Equal("abn", testModel.ToString());
        }


        [Fact]
        public void CustomValueTest()
        {
            var testModel = new IdentifierType("a custom value");
            Assert.Equal("a custom value", testModel.ToString());
        }

        /// <summary>
        /// Test deserialize a IdentifierType from a string
        /// </summary>
        [Fact]
        public void CanDeserializeFromStringTest()
        {
            var testModel = JsonSerializer.Deserialize<IdentifierType>("\"a custom value\"");
            Assert.IsType<IdentifierType>(testModel);
            Assert.Equal("a custom value", testModel.ToString());
        }
    }

}