/*
 * ShipEngine API
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using ShipEngineSDK.Client;
using ShipEngineSDK.Model;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text.Json;
using Xunit;

namespace ShipEngineSDK.Test.Model
{
    /// <summary>
    ///  Class for testing ErrorCode
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ErrorCodeTests
    {
        [Fact]
        public void ParameterlessConstructorSetsDefaultValue()
        {
            var testModel = new ErrorCode();
            Assert.Equal("auto_fund_not_supported", testModel.ToString());
        }

        [Fact]
        public void AutoFundNotSupportedTest()
        {
            var testModel = ErrorCode.AutoFundNotSupported;
            Assert.Equal("auto_fund_not_supported", testModel.ToString());
        }

        [Fact]
        public void BatchCannotBeModifiedTest()
        {
            var testModel = ErrorCode.BatchCannotBeModified;
            Assert.Equal("batch_cannot_be_modified", testModel.ToString());
        }

        [Fact]
        public void CarrierConflictTest()
        {
            var testModel = ErrorCode.CarrierConflict;
            Assert.Equal("carrier_conflict", testModel.ToString());
        }

        [Fact]
        public void CarrierDisconnectedTest()
        {
            var testModel = ErrorCode.CarrierDisconnected;
            Assert.Equal("carrier_disconnected", testModel.ToString());
        }

        [Fact]
        public void CarrierNotConnectedTest()
        {
            var testModel = ErrorCode.CarrierNotConnected;
            Assert.Equal("carrier_not_connected", testModel.ToString());
        }

        [Fact]
        public void CarrierNotSupportedTest()
        {
            var testModel = ErrorCode.CarrierNotSupported;
            Assert.Equal("carrier_not_supported", testModel.ToString());
        }

        [Fact]
        public void ConfirmationNotSupportedTest()
        {
            var testModel = ErrorCode.ConfirmationNotSupported;
            Assert.Equal("confirmation_not_supported", testModel.ToString());
        }

        [Fact]
        public void DefaultWarehouseCannotBeDeletedTest()
        {
            var testModel = ErrorCode.DefaultWarehouseCannotBeDeleted;
            Assert.Equal("default_warehouse_cannot_be_deleted", testModel.ToString());
        }

        [Fact]
        public void FieldConflictTest()
        {
            var testModel = ErrorCode.FieldConflict;
            Assert.Equal("field_conflict", testModel.ToString());
        }

        [Fact]
        public void FieldValueRequiredTest()
        {
            var testModel = ErrorCode.FieldValueRequired;
            Assert.Equal("field_value_required", testModel.ToString());
        }

        [Fact]
        public void ForbiddenTest()
        {
            var testModel = ErrorCode.Forbidden;
            Assert.Equal("forbidden", testModel.ToString());
        }

        [Fact]
        public void IdentifierConflictTest()
        {
            var testModel = ErrorCode.IdentifierConflict;
            Assert.Equal("identifier_conflict", testModel.ToString());
        }

        [Fact]
        public void IdentifiersMustMatchTest()
        {
            var testModel = ErrorCode.IdentifiersMustMatch;
            Assert.Equal("identifiers_must_match", testModel.ToString());
        }

        [Fact]
        public void InsufficientFundsTest()
        {
            var testModel = ErrorCode.InsufficientFunds;
            Assert.Equal("insufficient_funds", testModel.ToString());
        }

        [Fact]
        public void InvalidAddressTest()
        {
            var testModel = ErrorCode.InvalidAddress;
            Assert.Equal("invalid_address", testModel.ToString());
        }

        [Fact]
        public void InvalidBillingPlanTest()
        {
            var testModel = ErrorCode.InvalidBillingPlan;
            Assert.Equal("invalid_billing_plan", testModel.ToString());
        }

        [Fact]
        public void InvalidFieldValueTest()
        {
            var testModel = ErrorCode.InvalidFieldValue;
            Assert.Equal("invalid_field_value", testModel.ToString());
        }

        [Fact]
        public void InvalidIdentifierTest()
        {
            var testModel = ErrorCode.InvalidIdentifier;
            Assert.Equal("invalid_identifier", testModel.ToString());
        }

        [Fact]
        public void InvalidStatusTest()
        {
            var testModel = ErrorCode.InvalidStatus;
            Assert.Equal("invalid_status", testModel.ToString());
        }

        [Fact]
        public void InvalidStringLengthTest()
        {
            var testModel = ErrorCode.InvalidStringLength;
            Assert.Equal("invalid_string_length", testModel.ToString());
        }

        [Fact]
        public void LabelImagesNotSupportedTest()
        {
            var testModel = ErrorCode.LabelImagesNotSupported;
            Assert.Equal("label_images_not_supported", testModel.ToString());
        }

        [Fact]
        public void MeterFailureTest()
        {
            var testModel = ErrorCode.MeterFailure;
            Assert.Equal("meter_failure", testModel.ToString());
        }

        [Fact]
        public void OrderSourceNotActiveTest()
        {
            var testModel = ErrorCode.OrderSourceNotActive;
            Assert.Equal("order_source_not_active", testModel.ToString());
        }

        [Fact]
        public void RateLimitExceededTest()
        {
            var testModel = ErrorCode.RateLimitExceeded;
            Assert.Equal("rate_limit_exceeded", testModel.ToString());
        }

        [Fact]
        public void RefreshNotSupportedTest()
        {
            var testModel = ErrorCode.RefreshNotSupported;
            Assert.Equal("refresh_not_supported", testModel.ToString());
        }

        [Fact]
        public void RequestBodyRequiredTest()
        {
            var testModel = ErrorCode.RequestBodyRequired;
            Assert.Equal("request_body_required", testModel.ToString());
        }

        [Fact]
        public void ReturnLabelNotSupportedTest()
        {
            var testModel = ErrorCode.ReturnLabelNotSupported;
            Assert.Equal("return_label_not_supported", testModel.ToString());
        }

        [Fact]
        public void SettingsNotSupportedTest()
        {
            var testModel = ErrorCode.SettingsNotSupported;
            Assert.Equal("settings_not_supported", testModel.ToString());
        }

        [Fact]
        public void SubscriptionInactiveTest()
        {
            var testModel = ErrorCode.SubscriptionInactive;
            Assert.Equal("subscription_inactive", testModel.ToString());
        }

        [Fact]
        public void TermsNotAcceptedTest()
        {
            var testModel = ErrorCode.TermsNotAccepted;
            Assert.Equal("terms_not_accepted", testModel.ToString());
        }

        [Fact]
        public void TrackingNotSupportedTest()
        {
            var testModel = ErrorCode.TrackingNotSupported;
            Assert.Equal("tracking_not_supported", testModel.ToString());
        }

        [Fact]
        public void TrialExpiredTest()
        {
            var testModel = ErrorCode.TrialExpired;
            Assert.Equal("trial_expired", testModel.ToString());
        }

        [Fact]
        public void UnauthorizedTest()
        {
            var testModel = ErrorCode.Unauthorized;
            Assert.Equal("unauthorized", testModel.ToString());
        }

        [Fact]
        public void UnknownTest()
        {
            var testModel = ErrorCode.Unknown;
            Assert.Equal("unknown", testModel.ToString());
        }

        [Fact]
        public void UnspecifiedTest()
        {
            var testModel = ErrorCode.Unspecified;
            Assert.Equal("unspecified", testModel.ToString());
        }

        [Fact]
        public void VerificationFailureTest()
        {
            var testModel = ErrorCode.VerificationFailure;
            Assert.Equal("verification_failure", testModel.ToString());
        }

        [Fact]
        public void WarehouseConflictTest()
        {
            var testModel = ErrorCode.WarehouseConflict;
            Assert.Equal("warehouse_conflict", testModel.ToString());
        }

        [Fact]
        public void WebhookEventTypeConflictTest()
        {
            var testModel = ErrorCode.WebhookEventTypeConflict;
            Assert.Equal("webhook_event_type_conflict", testModel.ToString());
        }

        [Fact]
        public void CustomsItemsRequiredTest()
        {
            var testModel = ErrorCode.CustomsItemsRequired;
            Assert.Equal("customs_items_required", testModel.ToString());
        }

        [Fact]
        public void IncompatiblePairedLabelsTest()
        {
            var testModel = ErrorCode.IncompatiblePairedLabels;
            Assert.Equal("incompatible_paired_labels", testModel.ToString());
        }

        [Fact]
        public void InvalidChargeEventTest()
        {
            var testModel = ErrorCode.InvalidChargeEvent;
            Assert.Equal("invalid_charge_event", testModel.ToString());
        }

        [Fact]
        public void InvalidObjectTest()
        {
            var testModel = ErrorCode.InvalidObject;
            Assert.Equal("invalid_object", testModel.ToString());
        }

        [Fact]
        public void NoRatesReturnedTest()
        {
            var testModel = ErrorCode.NoRatesReturned;
            Assert.Equal("no_rates_returned", testModel.ToString());
        }


        [Fact]
        public void CustomValueTest()
        {
            var testModel = new ErrorCode("a custom value");
            Assert.Equal("a custom value", testModel.ToString());
        }

        /// <summary>
        /// Test deserialize a ErrorCode from a string
        /// </summary>
        [Fact]
        public void CanDeserializeFromStringTest()
        {
            var testModel = JsonSerializer.Deserialize<ErrorCode>("\"a custom value\"");
            Assert.IsType<ErrorCode>(testModel);
            Assert.Equal("a custom value", testModel.ToString());
        }
    }

}