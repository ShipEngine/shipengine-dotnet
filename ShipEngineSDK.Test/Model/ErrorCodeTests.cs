/*
 * ShipEngine API
 *
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using ShipEngineSDK.Model;
using ShipEngineSDK.Client;
using System.Reflection;

/*
 * ShipEngine API
 *
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using ShipEngineSDK.Model;
using ShipEngineSDK.Client;
using System.Reflection;

namespace ShipEngineSDK.Test.Model 
{
    /// <summary>
    ///  Class for testing ErrorCode
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ErrorCodeTests : IDisposable
    {
        [Fact]
        public void DefaultValueReturnsauto_fund_not_supported
        {
            var testModel = new ErrorCode();
            Assert.Equal("auto_fund_not_supported", testModel.ToString());
        }

        [Fact]
        public void AutoFundNotSupportedTest()
        {
            var testModel = ErrorCode.AutoFundNotSupported;
            Assert.Equal("auto_fund_not_supported", testModel.ToString());
        }

        [Fact]
        public void BatchCannotBeModifiedTest()
        {
            var testModel = ErrorCode.BatchCannotBeModified;
            Assert.Equal("batch_cannot_be_modified", testModel.ToString());
        }

        [Fact]
        public void CarrierConflictTest()
        {
            var testModel = ErrorCode.CarrierConflict;
            Assert.Equal("carrier_conflict", testModel.ToString());
        }

        [Fact]
        public void CarrierDisconnectedTest()
        {
            var testModel = ErrorCode.CarrierDisconnected;
            Assert.Equal("carrier_disconnected", testModel.ToString());
        }

        [Fact]
        public void CarrierNotConnectedTest()
        {
            var testModel = ErrorCode.CarrierNotConnected;
            Assert.Equal("carrier_not_connected", testModel.ToString());
        }

        [Fact]
        public void CarrierNotSupportedTest()
        {
            var testModel = ErrorCode.CarrierNotSupported;
            Assert.Equal("carrier_not_supported", testModel.ToString());
        }

        [Fact]
        public void ConfirmationNotSupportedTest()
        {
            var testModel = ErrorCode.ConfirmationNotSupported;
            Assert.Equal("confirmation_not_supported", testModel.ToString());
        }

        [Fact]
        public void DefaultWarehouseCannotBeDeletedTest()
        {
            var testModel = ErrorCode.DefaultWarehouseCannotBeDeleted;
            Assert.Equal("default_warehouse_cannot_be_deleted", testModel.ToString());
        }

        [Fact]
        public void FieldConflictTest()
        {
            var testModel = ErrorCode.FieldConflict;
            Assert.Equal("field_conflict", testModel.ToString());
        }

        [Fact]
        public void FieldValueRequiredTest()
        {
            var testModel = ErrorCode.FieldValueRequired;
            Assert.Equal("field_value_required", testModel.ToString());
        }

        [Fact]
        public void ForbiddenTest()
        {
            var testModel = ErrorCode.Forbidden;
            Assert.Equal("forbidden", testModel.ToString());
        }

        [Fact]
        public void IdentifierConflictTest()
        {
            var testModel = ErrorCode.IdentifierConflict;
            Assert.Equal("identifier_conflict", testModel.ToString());
        }

        [Fact]
        public void IdentifiersMustMatchTest()
        {
            var testModel = ErrorCode.IdentifiersMustMatch;
            Assert.Equal("identifiers_must_match", testModel.ToString());
        }

        [Fact]
        public void InsufficientFundsTest()
        {
            var testModel = ErrorCode.InsufficientFunds;
            Assert.Equal("insufficient_funds", testModel.ToString());
        }

        [Fact]
        public void InvalidAddressTest()
        {
            var testModel = ErrorCode.InvalidAddress;
            Assert.Equal("invalid_address", testModel.ToString());
        }

        [Fact]
        public void InvalidBillingPlanTest()
        {
            var testModel = ErrorCode.InvalidBillingPlan;
            Assert.Equal("invalid_billing_plan", testModel.ToString());
        }

        [Fact]
        public void InvalidFieldValueTest()
        {
            var testModel = ErrorCode.InvalidFieldValue;
            Assert.Equal("invalid_field_value", testModel.ToString());
        }

        [Fact]
        public void InvalidIdentifierTest()
        {
            var testModel = ErrorCode.InvalidIdentifier;
            Assert.Equal("invalid_identifier", testModel.ToString());
        }

        [Fact]
        public void InvalidStatusTest()
        {
            var testModel = ErrorCode.InvalidStatus;
            Assert.Equal("invalid_status", testModel.ToString());
        }

        [Fact]
        public void InvalidStringLengthTest()
        {
            var testModel = ErrorCode.InvalidStringLength;
            Assert.Equal("invalid_string_length", testModel.ToString());
        }

        [Fact]
        public void LabelImagesNotSupportedTest()
        {
            var testModel = ErrorCode.LabelImagesNotSupported;
            Assert.Equal("label_images_not_supported", testModel.ToString());
        }

        [Fact]
        public void MeterFailureTest()
        {
            var testModel = ErrorCode.MeterFailure;
            Assert.Equal("meter_failure", testModel.ToString());
        }

        [Fact]
        public void OrderSourceNotActiveTest()
        {
            var testModel = ErrorCode.OrderSourceNotActive;
            Assert.Equal("order_source_not_active", testModel.ToString());
        }

        [Fact]
        public void RateLimitExceededTest()
        {
            var testModel = ErrorCode.RateLimitExceeded;
            Assert.Equal("rate_limit_exceeded", testModel.ToString());
        }

        [Fact]
        public void RefreshNotSupportedTest()
        {
            var testModel = ErrorCode.RefreshNotSupported;
            Assert.Equal("refresh_not_supported", testModel.ToString());
        }

        [Fact]
        public void RequestBodyRequiredTest()
        {
            var testModel = ErrorCode.RequestBodyRequired;
            Assert.Equal("request_body_required", testModel.ToString());
        }

        [Fact]
        public void ReturnLabelNotSupportedTest()
        {
            var testModel = ErrorCode.ReturnLabelNotSupported;
            Assert.Equal("return_label_not_supported", testModel.ToString());
        }

        [Fact]
        public void SettingsNotSupportedTest()
        {
            var testModel = ErrorCode.SettingsNotSupported;
            Assert.Equal("settings_not_supported", testModel.ToString());
        }

        [Fact]
        public void SubscriptionInactiveTest()
        {
            var testModel = ErrorCode.SubscriptionInactive;
            Assert.Equal("subscription_inactive", testModel.ToString());
        }

        [Fact]
        public void TermsNotAcceptedTest()
        {
            var testModel = ErrorCode.TermsNotAccepted;
            Assert.Equal("terms_not_accepted", testModel.ToString());
        }

        [Fact]
        public void TrackingNotSupportedTest()
        {
            var testModel = ErrorCode.TrackingNotSupported;
            Assert.Equal("tracking_not_supported", testModel.ToString());
        }

        [Fact]
        public void TrialExpiredTest()
        {
            var testModel = ErrorCode.TrialExpired;
            Assert.Equal("trial_expired", testModel.ToString());
        }

        [Fact]
        public void UnauthorizedTest()
        {
            var testModel = ErrorCode.Unauthorized;
            Assert.Equal("unauthorized", testModel.ToString());
        }

        [Fact]
        public void UnknownTest()
        {
            var testModel = ErrorCode.Unknown;
            Assert.Equal("unknown", testModel.ToString());
        }

        [Fact]
        public void UnspecifiedTest()
        {
            var testModel = ErrorCode.Unspecified;
            Assert.Equal("unspecified", testModel.ToString());
        }

        [Fact]
        public void VerificationFailureTest()
        {
            var testModel = ErrorCode.VerificationFailure;
            Assert.Equal("verification_failure", testModel.ToString());
        }

        [Fact]
        public void WarehouseConflictTest()
        {
            var testModel = ErrorCode.WarehouseConflict;
            Assert.Equal("warehouse_conflict", testModel.ToString());
        }

        [Fact]
        public void WebhookEventTypeConflictTest()
        {
            var testModel = ErrorCode.WebhookEventTypeConflict;
            Assert.Equal("webhook_event_type_conflict", testModel.ToString());
        }

        [Fact]
        public void CustomsItemsRequiredTest()
        {
            var testModel = ErrorCode.CustomsItemsRequired;
            Assert.Equal("customs_items_required", testModel.ToString());
        }

        [Fact]
        public void IncompatiblePairedLabelsTest()
        {
            var testModel = ErrorCode.IncompatiblePairedLabels;
            Assert.Equal("incompatible_paired_labels", testModel.ToString());
        }

        [Fact]
        public void InvalidChargeEventTest()
        {
            var testModel = ErrorCode.InvalidChargeEvent;
            Assert.Equal("invalid_charge_event", testModel.ToString());
        }

        [Fact]
        public void InvalidObjectTest()
        {
            var testModel = ErrorCode.InvalidObject;
            Assert.Equal("invalid_object", testModel.ToString());
        }

        [Fact]
        public void NoRatesReturnedTest()
        {
            var testModel = ErrorCode.NoRatesReturned;
            Assert.Equal("no_rates_returned", testModel.ToString());
        }
        

        [Fact]
        public void CustomValueTest()
        {
            var testModel = new ErrorCode("a custom value");
            Assert.Equal("a custom value", testModel.ToString());
        }

        /// <summary>
        /// Test deserialize a ErrorCode from a string
        /// </summary>
        [Fact]
        public void CanDeserializeFromStringTest()
        {
            var testModel = JsonSerializer.Deserialize<ErrorCode>("\"a custom value\"");
            Assert.IsType<ErrorCode>(testModel);
            Assert.Equal("a custom value", testModel.ToString());
        }
    }
}


