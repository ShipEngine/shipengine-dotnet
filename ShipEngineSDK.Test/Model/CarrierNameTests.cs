/*
 * ShipEngine API
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using ShipEngineSDK.Client;
using ShipEngineSDK.Model;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text.Json;
using Xunit;

namespace ShipEngineSDK.Test.Model
{
    /// <summary>
    ///  Class for testing CarrierName
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class CarrierNameTests
    {
        [Fact]
        public void ParameterlessConstructorSetsDefaultValue()
        {
            var testModel = new CarrierName();
            Assert.Equal("access_worldwide", testModel.ToString());
        }

        [Fact]
        public void AccessWorldwideTest()
        {
            var testModel = CarrierName.AccessWorldwide;
            Assert.Equal("access_worldwide", testModel.ToString());
        }

        [Fact]
        public void AmazonBuyShippingTest()
        {
            var testModel = CarrierName.AmazonBuyShipping;
            Assert.Equal("amazon_buy_shipping", testModel.ToString());
        }

        [Fact]
        public void AmazonShippingUkTest()
        {
            var testModel = CarrierName.AmazonShippingUk;
            Assert.Equal("amazon_shipping_uk", testModel.ToString());
        }

        [Fact]
        public void ApcTest()
        {
            var testModel = CarrierName.Apc;
            Assert.Equal("apc", testModel.ToString());
        }

        [Fact]
        public void AsendiaTest()
        {
            var testModel = CarrierName.Asendia;
            Assert.Equal("asendia", testModel.ToString());
        }

        [Fact]
        public void AustraliaPostTest()
        {
            var testModel = CarrierName.AustraliaPost;
            Assert.Equal("australia_post", testModel.ToString());
        }

        [Fact]
        public void CanadaPostTest()
        {
            var testModel = CarrierName.CanadaPost;
            Assert.Equal("canada_post", testModel.ToString());
        }

        [Fact]
        public void DhlEcommerceTest()
        {
            var testModel = CarrierName.DhlEcommerce;
            Assert.Equal("dhl_ecommerce", testModel.ToString());
        }

        [Fact]
        public void DhlExpressTest()
        {
            var testModel = CarrierName.DhlExpress;
            Assert.Equal("dhl_express", testModel.ToString());
        }

        [Fact]
        public void DhlExpressAuTest()
        {
            var testModel = CarrierName.DhlExpressAu;
            Assert.Equal("dhl_express_au", testModel.ToString());
        }

        [Fact]
        public void DhlExpressCaTest()
        {
            var testModel = CarrierName.DhlExpressCa;
            Assert.Equal("dhl_express_ca", testModel.ToString());
        }

        [Fact]
        public void DhlExpressUkTest()
        {
            var testModel = CarrierName.DhlExpressUk;
            Assert.Equal("dhl_express_uk", testModel.ToString());
        }

        [Fact]
        public void DpdTest()
        {
            var testModel = CarrierName.Dpd;
            Assert.Equal("dpd", testModel.ToString());
        }

        [Fact]
        public void EndiciaTest()
        {
            var testModel = CarrierName.Endicia;
            Assert.Equal("endicia", testModel.ToString());
        }

        [Fact]
        public void FedexTest()
        {
            var testModel = CarrierName.Fedex;
            Assert.Equal("fedex", testModel.ToString());
        }

        [Fact]
        public void FedexUkTest()
        {
            var testModel = CarrierName.FedexUk;
            Assert.Equal("fedex_uk", testModel.ToString());
        }

        [Fact]
        public void FirstmileTest()
        {
            var testModel = CarrierName.Firstmile;
            Assert.Equal("firstmile", testModel.ToString());
        }

        [Fact]
        public void ImexTest()
        {
            var testModel = CarrierName.Imex;
            Assert.Equal("imex", testModel.ToString());
        }

        [Fact]
        public void NewgisticsTest()
        {
            var testModel = CarrierName.Newgistics;
            Assert.Equal("newgistics", testModel.ToString());
        }

        [Fact]
        public void OntracTest()
        {
            var testModel = CarrierName.Ontrac;
            Assert.Equal("ontrac", testModel.ToString());
        }

        [Fact]
        public void PurolatorCanadaTest()
        {
            var testModel = CarrierName.PurolatorCanada;
            Assert.Equal("purolator_canada", testModel.ToString());
        }

        [Fact]
        public void RoyalMailTest()
        {
            var testModel = CarrierName.RoyalMail;
            Assert.Equal("royal_mail", testModel.ToString());
        }

        [Fact]
        public void RrDonnelleyTest()
        {
            var testModel = CarrierName.RrDonnelley;
            Assert.Equal("rr_donnelley", testModel.ToString());
        }

        [Fact]
        public void SekoTest()
        {
            var testModel = CarrierName.Seko;
            Assert.Equal("seko", testModel.ToString());
        }

        [Fact]
        public void SendleTest()
        {
            var testModel = CarrierName.Sendle;
            Assert.Equal("sendle", testModel.ToString());
        }

        [Fact]
        public void StampsComTest()
        {
            var testModel = CarrierName.StampsCom;
            Assert.Equal("stamps_com", testModel.ToString());
        }

        [Fact]
        public void UpsTest()
        {
            var testModel = CarrierName.Ups;
            Assert.Equal("ups", testModel.ToString());
        }

        [Fact]
        public void LasershipTest()
        {
            var testModel = CarrierName.Lasership;
            Assert.Equal("lasership", testModel.ToString());
        }


        [Fact]
        public void CustomValueTest()
        {
            var testModel = new CarrierName("a custom value");
            Assert.Equal("a custom value", testModel.ToString());
        }

        /// <summary>
        /// Test deserialize a CarrierName from a string
        /// </summary>
        [Fact]
        public void CanDeserializeFromStringTest()
        {
            var testModel = JsonSerializer.Deserialize<CarrierName>("\"a custom value\"");
            Assert.IsType<CarrierName>(testModel);
            Assert.Equal("a custom value", testModel.ToString());
        }
    }

}