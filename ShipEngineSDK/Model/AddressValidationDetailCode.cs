/*
 * ShipEngine API
 *
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;

namespace ShipEngineSDK.Model;

    /// <summary>
    /// The detailed error codes that can be returned by the address validation API
    /// </summary>
    /// <value>The detailed error codes that can be returned by the address validation API</value>
    public static class AddressValidationDetailCode
    {
        private static readonly HashSet<string> _values = new()
        {
            "unsupported_country",
            "non_supported_country",
            "minimum_postal_code_verification_failed",
            "street_does_not_match_unique_street_name",
            "multiple_directionals",
            "multiple_matches",
            "suite_not_valid",
            "suite_missing",
            "incompatible_paired_labels",
            "invalid_house_number",
            "missing_house_number",
            "invalid_box_number",
            "invalid_charge_event",
            "missing_box_number",
            "missing_cmra_or_private_mail_box_number",
            "suite_has_no_secondaries",
            "postal_code_changed_or_added",
            "state_province_changed_or_added",
            "city_locality_changed_or_added",
            "urbanization_changed",
            "street_name_spelling_changed_or_added",
            "street_name_type_changed_or_added",
            "street_direction_changed_or_added",
            "suite_type_changed_or_added",
            "suite_unit_number_changed_or_added",
            "double_dependent_locality_changed_or_added",
            "subadministrative_area_changed_or_added",
            "subnational_area_changed_or_added",
            "po_box_changed_or_added",
            "premise_type_changed_or_added",
            "house_number_changed",
            "organization_changed_or_added",
            "partially_verified_to_state_level",
            "partially_verified_to_city_level",
            "partially_verified_to_street_level",
            "partially_verified_to_premise_level",
            "verified_to_state_level",
            "verified_to_city_level",
            "verified_to_street_level",
            "verified_to_premise_level",
            "verified_to_suite_level",
            "coded_to_street_lavel",
            "coded_to_neighborhood_level",
            "coded_to_community_level",
            "coded_to_state_level",
            "coded_to_rooftop_level",
            "coded_to_rooftop_interpolation_level",
            "name_max_length_exceeded",
            "phone_max_length_exceeded",
            "company_name_max_length_exceeded",
            "line1_min_max_length",
            "line2_max_length_exceeded",
            "line3_max_length_exceeded",
            "city_locality_max_length_exceeded",
            "state_province_max_length_exceeded",
            "invalid_postal_code",
            "country_invalid_length",
            "address_not_found",
        };

        public static string DefaultValue => UnsupportedCountry;
        /// <summary>
        /// Enum UnsupportedCountry for value: unsupported_country
        /// </summary>
        public static string UnsupportedCountry { get; } = "unsupported_country";


        /// <summary>
        /// Enum NonSupportedCountry for value: non_supported_country
        /// </summary>
        public static string NonSupportedCountry { get; } = "non_supported_country";


        /// <summary>
        /// Enum MinimumPostalCodeVerificationFailed for value: minimum_postal_code_verification_failed
        /// </summary>
        public static string MinimumPostalCodeVerificationFailed { get; } = "minimum_postal_code_verification_failed";


        /// <summary>
        /// Enum StreetDoesNotMatchUniqueStreetName for value: street_does_not_match_unique_street_name
        /// </summary>
        public static string StreetDoesNotMatchUniqueStreetName { get; } = "street_does_not_match_unique_street_name";


        /// <summary>
        /// Enum MultipleDirectionals for value: multiple_directionals
        /// </summary>
        public static string MultipleDirectionals { get; } = "multiple_directionals";


        /// <summary>
        /// Enum MultipleMatches for value: multiple_matches
        /// </summary>
        public static string MultipleMatches { get; } = "multiple_matches";


        /// <summary>
        /// Enum SuiteNotValid for value: suite_not_valid
        /// </summary>
        public static string SuiteNotValid { get; } = "suite_not_valid";


        /// <summary>
        /// Enum SuiteMissing for value: suite_missing
        /// </summary>
        public static string SuiteMissing { get; } = "suite_missing";


        /// <summary>
        /// Enum IncompatiblePairedLabels for value: incompatible_paired_labels
        /// </summary>
        public static string IncompatiblePairedLabels { get; } = "incompatible_paired_labels";


        /// <summary>
        /// Enum InvalidHouseNumber for value: invalid_house_number
        /// </summary>
        public static string InvalidHouseNumber { get; } = "invalid_house_number";


        /// <summary>
        /// Enum MissingHouseNumber for value: missing_house_number
        /// </summary>
        public static string MissingHouseNumber { get; } = "missing_house_number";


        /// <summary>
        /// Enum InvalidBoxNumber for value: invalid_box_number
        /// </summary>
        public static string InvalidBoxNumber { get; } = "invalid_box_number";


        /// <summary>
        /// Enum InvalidChargeEvent for value: invalid_charge_event
        /// </summary>
        public static string InvalidChargeEvent { get; } = "invalid_charge_event";


        /// <summary>
        /// Enum MissingBoxNumber for value: missing_box_number
        /// </summary>
        public static string MissingBoxNumber { get; } = "missing_box_number";


        /// <summary>
        /// Enum MissingCmraOrPrivateMailBoxNumber for value: missing_cmra_or_private_mail_box_number
        /// </summary>
        public static string MissingCmraOrPrivateMailBoxNumber { get; } = "missing_cmra_or_private_mail_box_number";


        /// <summary>
        /// Enum SuiteHasNoSecondaries for value: suite_has_no_secondaries
        /// </summary>
        public static string SuiteHasNoSecondaries { get; } = "suite_has_no_secondaries";


        /// <summary>
        /// Enum PostalCodeChangedOrAdded for value: postal_code_changed_or_added
        /// </summary>
        public static string PostalCodeChangedOrAdded { get; } = "postal_code_changed_or_added";


        /// <summary>
        /// Enum StateProvinceChangedOrAdded for value: state_province_changed_or_added
        /// </summary>
        public static string StateProvinceChangedOrAdded { get; } = "state_province_changed_or_added";


        /// <summary>
        /// Enum CityLocalityChangedOrAdded for value: city_locality_changed_or_added
        /// </summary>
        public static string CityLocalityChangedOrAdded { get; } = "city_locality_changed_or_added";


        /// <summary>
        /// Enum UrbanizationChanged for value: urbanization_changed
        /// </summary>
        public static string UrbanizationChanged { get; } = "urbanization_changed";


        /// <summary>
        /// Enum StreetNameSpellingChangedOrAdded for value: street_name_spelling_changed_or_added
        /// </summary>
        public static string StreetNameSpellingChangedOrAdded { get; } = "street_name_spelling_changed_or_added";


        /// <summary>
        /// Enum StreetNameTypeChangedOrAdded for value: street_name_type_changed_or_added
        /// </summary>
        public static string StreetNameTypeChangedOrAdded { get; } = "street_name_type_changed_or_added";


        /// <summary>
        /// Enum StreetDirectionChangedOrAdded for value: street_direction_changed_or_added
        /// </summary>
        public static string StreetDirectionChangedOrAdded { get; } = "street_direction_changed_or_added";


        /// <summary>
        /// Enum SuiteTypeChangedOrAdded for value: suite_type_changed_or_added
        /// </summary>
        public static string SuiteTypeChangedOrAdded { get; } = "suite_type_changed_or_added";


        /// <summary>
        /// Enum SuiteUnitNumberChangedOrAdded for value: suite_unit_number_changed_or_added
        /// </summary>
        public static string SuiteUnitNumberChangedOrAdded { get; } = "suite_unit_number_changed_or_added";


        /// <summary>
        /// Enum DoubleDependentLocalityChangedOrAdded for value: double_dependent_locality_changed_or_added
        /// </summary>
        public static string DoubleDependentLocalityChangedOrAdded { get; } = "double_dependent_locality_changed_or_added";


        /// <summary>
        /// Enum SubadministrativeAreaChangedOrAdded for value: subadministrative_area_changed_or_added
        /// </summary>
        public static string SubadministrativeAreaChangedOrAdded { get; } = "subadministrative_area_changed_or_added";


        /// <summary>
        /// Enum SubnationalAreaChangedOrAdded for value: subnational_area_changed_or_added
        /// </summary>
        public static string SubnationalAreaChangedOrAdded { get; } = "subnational_area_changed_or_added";


        /// <summary>
        /// Enum PoBoxChangedOrAdded for value: po_box_changed_or_added
        /// </summary>
        public static string PoBoxChangedOrAdded { get; } = "po_box_changed_or_added";


        /// <summary>
        /// Enum PremiseTypeChangedOrAdded for value: premise_type_changed_or_added
        /// </summary>
        public static string PremiseTypeChangedOrAdded { get; } = "premise_type_changed_or_added";


        /// <summary>
        /// Enum HouseNumberChanged for value: house_number_changed
        /// </summary>
        public static string HouseNumberChanged { get; } = "house_number_changed";


        /// <summary>
        /// Enum OrganizationChangedOrAdded for value: organization_changed_or_added
        /// </summary>
        public static string OrganizationChangedOrAdded { get; } = "organization_changed_or_added";


        /// <summary>
        /// Enum PartiallyVerifiedToStateLevel for value: partially_verified_to_state_level
        /// </summary>
        public static string PartiallyVerifiedToStateLevel { get; } = "partially_verified_to_state_level";


        /// <summary>
        /// Enum PartiallyVerifiedToCityLevel for value: partially_verified_to_city_level
        /// </summary>
        public static string PartiallyVerifiedToCityLevel { get; } = "partially_verified_to_city_level";


        /// <summary>
        /// Enum PartiallyVerifiedToStreetLevel for value: partially_verified_to_street_level
        /// </summary>
        public static string PartiallyVerifiedToStreetLevel { get; } = "partially_verified_to_street_level";


        /// <summary>
        /// Enum PartiallyVerifiedToPremiseLevel for value: partially_verified_to_premise_level
        /// </summary>
        public static string PartiallyVerifiedToPremiseLevel { get; } = "partially_verified_to_premise_level";


        /// <summary>
        /// Enum VerifiedToStateLevel for value: verified_to_state_level
        /// </summary>
        public static string VerifiedToStateLevel { get; } = "verified_to_state_level";


        /// <summary>
        /// Enum VerifiedToCityLevel for value: verified_to_city_level
        /// </summary>
        public static string VerifiedToCityLevel { get; } = "verified_to_city_level";


        /// <summary>
        /// Enum VerifiedToStreetLevel for value: verified_to_street_level
        /// </summary>
        public static string VerifiedToStreetLevel { get; } = "verified_to_street_level";


        /// <summary>
        /// Enum VerifiedToPremiseLevel for value: verified_to_premise_level
        /// </summary>
        public static string VerifiedToPremiseLevel { get; } = "verified_to_premise_level";


        /// <summary>
        /// Enum VerifiedToSuiteLevel for value: verified_to_suite_level
        /// </summary>
        public static string VerifiedToSuiteLevel { get; } = "verified_to_suite_level";


        /// <summary>
        /// Enum CodedToStreetLavel for value: coded_to_street_lavel
        /// </summary>
        public static string CodedToStreetLavel { get; } = "coded_to_street_lavel";


        /// <summary>
        /// Enum CodedToNeighborhoodLevel for value: coded_to_neighborhood_level
        /// </summary>
        public static string CodedToNeighborhoodLevel { get; } = "coded_to_neighborhood_level";


        /// <summary>
        /// Enum CodedToCommunityLevel for value: coded_to_community_level
        /// </summary>
        public static string CodedToCommunityLevel { get; } = "coded_to_community_level";


        /// <summary>
        /// Enum CodedToStateLevel for value: coded_to_state_level
        /// </summary>
        public static string CodedToStateLevel { get; } = "coded_to_state_level";


        /// <summary>
        /// Enum CodedToRooftopLevel for value: coded_to_rooftop_level
        /// </summary>
        public static string CodedToRooftopLevel { get; } = "coded_to_rooftop_level";


        /// <summary>
        /// Enum CodedToRooftopInterpolationLevel for value: coded_to_rooftop_interpolation_level
        /// </summary>
        public static string CodedToRooftopInterpolationLevel { get; } = "coded_to_rooftop_interpolation_level";


        /// <summary>
        /// Enum NameMaxLengthExceeded for value: name_max_length_exceeded
        /// </summary>
        public static string NameMaxLengthExceeded { get; } = "name_max_length_exceeded";


        /// <summary>
        /// Enum PhoneMaxLengthExceeded for value: phone_max_length_exceeded
        /// </summary>
        public static string PhoneMaxLengthExceeded { get; } = "phone_max_length_exceeded";


        /// <summary>
        /// Enum CompanyNameMaxLengthExceeded for value: company_name_max_length_exceeded
        /// </summary>
        public static string CompanyNameMaxLengthExceeded { get; } = "company_name_max_length_exceeded";


        /// <summary>
        /// Enum Line1MinMaxLength for value: line1_min_max_length
        /// </summary>
        public static string Line1MinMaxLength { get; } = "line1_min_max_length";


        /// <summary>
        /// Enum Line2MaxLengthExceeded for value: line2_max_length_exceeded
        /// </summary>
        public static string Line2MaxLengthExceeded { get; } = "line2_max_length_exceeded";


        /// <summary>
        /// Enum Line3MaxLengthExceeded for value: line3_max_length_exceeded
        /// </summary>
        public static string Line3MaxLengthExceeded { get; } = "line3_max_length_exceeded";


        /// <summary>
        /// Enum CityLocalityMaxLengthExceeded for value: city_locality_max_length_exceeded
        /// </summary>
        public static string CityLocalityMaxLengthExceeded { get; } = "city_locality_max_length_exceeded";


        /// <summary>
        /// Enum StateProvinceMaxLengthExceeded for value: state_province_max_length_exceeded
        /// </summary>
        public static string StateProvinceMaxLengthExceeded { get; } = "state_province_max_length_exceeded";


        /// <summary>
        /// Enum InvalidPostalCode for value: invalid_postal_code
        /// </summary>
        public static string InvalidPostalCode { get; } = "invalid_postal_code";


        /// <summary>
        /// Enum CountryInvalidLength for value: country_invalid_length
        /// </summary>
        public static string CountryInvalidLength { get; } = "country_invalid_length";


        /// <summary>
        /// Enum AddressNotFound for value: address_not_found
        /// </summary>
        public static string AddressNotFound { get; } = "address_not_found";


        /// <summary>
        /// Is the given value a valid ?
        /// </summary>
        public static bool IsValid(string value)
        {
            return _values.Contains(value);
        }
    }
