/*
 * ShipEngine API
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;

namespace ShipEngineSDK.Model;

/// <summary>
/// Determines when the user&#39;s account will be charged for the label.
/// </summary>
/// <value>Determines when the user&#39;s account will be charged for the label.</value>
[JsonConverter(typeof(LabelChargeEventJsonConverter))]
public class LabelChargeEvent
{
    private string _value;

    internal LabelChargeEvent()
    {
        _value = "carrier_default";
    }

    /// <summary>
    /// Create a new instance of LabelChargeEvent with a custom value.
    /// </summary>
    /// <param name="value">The value of the LabelChargeEvent</param>
    /// <remarks>
    /// You can send a custom value to the API using this constructor, but the API most likely won't know what to do with it.
    /// You should use the predefined values returned by the static properties of this class unless you know that the value is value.
    /// </remarks>
    public LabelChargeEvent(string value)
    {
        _value = value;
    }

    /// <summary>
    /// Enum CarrierDefault for value: carrier_default
    /// </summary>
    public static LabelChargeEvent CarrierDefault { get; } = new("carrier_default");


    /// <summary>
    /// Enum OnCreation for value: on_creation
    /// </summary>
    public static LabelChargeEvent OnCreation { get; } = new("on_creation");


    /// <summary>
    /// Enum OnCarrierAcceptance for value: on_carrier_acceptance
    /// </summary>
    public static LabelChargeEvent OnCarrierAcceptance { get; } = new("on_carrier_acceptance");


    public override string ToString() => _value;
}

internal class LabelChargeEventJsonConverter : JsonConverter<LabelChargeEvent>
{
    public override LabelChargeEvent? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) =>
        reader.TokenType == JsonTokenType.String ? new LabelChargeEvent(reader.GetString()) : null;

    public override void Write(Utf8JsonWriter writer, LabelChargeEvent value, JsonSerializerOptions options) =>
        writer.WriteStringValue(value.ToString());

    public override bool CanConvert(Type typeToConvert) =>
        typeToConvert == typeof(LabelChargeEvent);
}