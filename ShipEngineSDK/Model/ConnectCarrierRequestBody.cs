/*
 * ShipEngine API
 *
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.RegularExpressions;
using System.Reflection;

namespace ShipEngineSDK.Model;

/// <summary>
/// ConnectCarrierRequestBody
/// </summary>
[JsonConverter(typeof(ConnectCarrierRequestBodyJsonConverter))]
[DataContract(Name = "connect_carrier_request_body")]
public partial class ConnectCarrierRequestBody : AbstractOpenAPISchema
{

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectAccessWorldwideRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectAccessWorldwideRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectAccessWorldwideRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectAmazonBuyShippingRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectAmazonBuyShippingRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectAmazonBuyShippingRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectAmazonShippingUk" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectAmazonShippingUk.</param>
    public ConnectCarrierRequestBody(ConnectAmazonShippingUk actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectApcRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectApcRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectApcRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectAsendiaRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectAsendiaRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectAsendiaRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectAustraliaPostRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectAustraliaPostRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectAustraliaPostRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectCanadaPostRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectCanadaPostRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectCanadaPostRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectDhlEcommerceRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectDhlEcommerceRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectDhlEcommerceRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectDhlExpressRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectDhlExpressRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectDhlExpressRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectDhlExpressAuRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectDhlExpressAuRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectDhlExpressAuRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectDhlExpressCaRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectDhlExpressCaRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectDhlExpressCaRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectDhlExpressUkRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectDhlExpressUkRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectDhlExpressUkRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectDpdRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectDpdRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectDpdRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectEndiciaRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectEndiciaRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectEndiciaRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectFedexRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectFedexRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectFedexRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectFedexUkRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectFedexUkRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectFedexUkRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectFirstmileRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectFirstmileRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectFirstmileRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectImexRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectImexRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectImexRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectLasershipRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectLasershipRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectLasershipRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectNewgisticsRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectNewgisticsRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectNewgisticsRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectOntracRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectOntracRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectOntracRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectPurolatorRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectPurolatorRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectPurolatorRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectRoyalMailRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectRoyalMailRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectRoyalMailRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectRrDonnelleyRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectRrDonnelleyRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectRrDonnelleyRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectSekoRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectSekoRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectSekoRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectSendleRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectSendleRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectSendleRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectStampsRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectStampsRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectStampsRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ConnectCarrierRequestBody" /> class
    /// with the <see cref="ConnectUpsRequestBody" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of ConnectUpsRequestBody.</param>
    public ConnectCarrierRequestBody(ConnectUpsRequestBody actualInstance)
    {
        this.IsNullable = false;
        this.SchemaType= "oneOf";
        this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }


    private Object _actualInstance;

    /// <summary>
    /// Gets or Sets ActualInstance
    /// </summary>
    public override Object ActualInstance
    {
        get
        {
            return _actualInstance;
        }
        set
        {
            if (value.GetType() == typeof(ConnectAccessWorldwideRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectAmazonBuyShippingRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectAmazonShippingUk))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectApcRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectAsendiaRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectAustraliaPostRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectCanadaPostRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectDhlEcommerceRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectDhlExpressRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectDhlExpressAuRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectDhlExpressCaRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectDhlExpressUkRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectDpdRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectEndiciaRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectFedexRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectFedexUkRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectFirstmileRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectImexRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectLasershipRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectNewgisticsRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectOntracRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectPurolatorRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectRoyalMailRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectRrDonnelleyRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectSekoRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectSendleRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectStampsRequestBody))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(ConnectUpsRequestBody))
            {
                this._actualInstance = value;
            }
            else
            {
                throw new ArgumentException("Invalid instance found. Must be the following types: ConnectAccessWorldwideRequestBody, ConnectAmazonBuyShippingRequestBody, ConnectAmazonShippingUk, ConnectApcRequestBody, ConnectAsendiaRequestBody, ConnectAustraliaPostRequestBody, ConnectCanadaPostRequestBody, ConnectDhlEcommerceRequestBody, ConnectDhlExpressRequestBody, ConnectDhlExpressAuRequestBody, ConnectDhlExpressCaRequestBody, ConnectDhlExpressUkRequestBody, ConnectDpdRequestBody, ConnectEndiciaRequestBody, ConnectFedexRequestBody, ConnectFedexUkRequestBody, ConnectFirstmileRequestBody, ConnectImexRequestBody, ConnectLasershipRequestBody, ConnectNewgisticsRequestBody, ConnectOntracRequestBody, ConnectPurolatorRequestBody, ConnectRoyalMailRequestBody, ConnectRrDonnelleyRequestBody, ConnectSekoRequestBody, ConnectSendleRequestBody, ConnectStampsRequestBody, ConnectUpsRequestBody");
            }
        }
    }

    /// <summary>
    /// Get the actual instance of `ConnectAccessWorldwideRequestBody`. If the actual instance is not `ConnectAccessWorldwideRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectAccessWorldwideRequestBody</returns>
    public ConnectAccessWorldwideRequestBody GetConnectAccessWorldwideRequestBody()
    {
        return (ConnectAccessWorldwideRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectAmazonBuyShippingRequestBody`. If the actual instance is not `ConnectAmazonBuyShippingRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectAmazonBuyShippingRequestBody</returns>
    public ConnectAmazonBuyShippingRequestBody GetConnectAmazonBuyShippingRequestBody()
    {
        return (ConnectAmazonBuyShippingRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectAmazonShippingUk`. If the actual instance is not `ConnectAmazonShippingUk`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectAmazonShippingUk</returns>
    public ConnectAmazonShippingUk GetConnectAmazonShippingUk()
    {
        return (ConnectAmazonShippingUk)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectApcRequestBody`. If the actual instance is not `ConnectApcRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectApcRequestBody</returns>
    public ConnectApcRequestBody GetConnectApcRequestBody()
    {
        return (ConnectApcRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectAsendiaRequestBody`. If the actual instance is not `ConnectAsendiaRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectAsendiaRequestBody</returns>
    public ConnectAsendiaRequestBody GetConnectAsendiaRequestBody()
    {
        return (ConnectAsendiaRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectAustraliaPostRequestBody`. If the actual instance is not `ConnectAustraliaPostRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectAustraliaPostRequestBody</returns>
    public ConnectAustraliaPostRequestBody GetConnectAustraliaPostRequestBody()
    {
        return (ConnectAustraliaPostRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectCanadaPostRequestBody`. If the actual instance is not `ConnectCanadaPostRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectCanadaPostRequestBody</returns>
    public ConnectCanadaPostRequestBody GetConnectCanadaPostRequestBody()
    {
        return (ConnectCanadaPostRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectDhlEcommerceRequestBody`. If the actual instance is not `ConnectDhlEcommerceRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectDhlEcommerceRequestBody</returns>
    public ConnectDhlEcommerceRequestBody GetConnectDhlEcommerceRequestBody()
    {
        return (ConnectDhlEcommerceRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectDhlExpressRequestBody`. If the actual instance is not `ConnectDhlExpressRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectDhlExpressRequestBody</returns>
    public ConnectDhlExpressRequestBody GetConnectDhlExpressRequestBody()
    {
        return (ConnectDhlExpressRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectDhlExpressAuRequestBody`. If the actual instance is not `ConnectDhlExpressAuRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectDhlExpressAuRequestBody</returns>
    public ConnectDhlExpressAuRequestBody GetConnectDhlExpressAuRequestBody()
    {
        return (ConnectDhlExpressAuRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectDhlExpressCaRequestBody`. If the actual instance is not `ConnectDhlExpressCaRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectDhlExpressCaRequestBody</returns>
    public ConnectDhlExpressCaRequestBody GetConnectDhlExpressCaRequestBody()
    {
        return (ConnectDhlExpressCaRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectDhlExpressUkRequestBody`. If the actual instance is not `ConnectDhlExpressUkRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectDhlExpressUkRequestBody</returns>
    public ConnectDhlExpressUkRequestBody GetConnectDhlExpressUkRequestBody()
    {
        return (ConnectDhlExpressUkRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectDpdRequestBody`. If the actual instance is not `ConnectDpdRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectDpdRequestBody</returns>
    public ConnectDpdRequestBody GetConnectDpdRequestBody()
    {
        return (ConnectDpdRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectEndiciaRequestBody`. If the actual instance is not `ConnectEndiciaRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectEndiciaRequestBody</returns>
    public ConnectEndiciaRequestBody GetConnectEndiciaRequestBody()
    {
        return (ConnectEndiciaRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectFedexRequestBody`. If the actual instance is not `ConnectFedexRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectFedexRequestBody</returns>
    public ConnectFedexRequestBody GetConnectFedexRequestBody()
    {
        return (ConnectFedexRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectFedexUkRequestBody`. If the actual instance is not `ConnectFedexUkRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectFedexUkRequestBody</returns>
    public ConnectFedexUkRequestBody GetConnectFedexUkRequestBody()
    {
        return (ConnectFedexUkRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectFirstmileRequestBody`. If the actual instance is not `ConnectFirstmileRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectFirstmileRequestBody</returns>
    public ConnectFirstmileRequestBody GetConnectFirstmileRequestBody()
    {
        return (ConnectFirstmileRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectImexRequestBody`. If the actual instance is not `ConnectImexRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectImexRequestBody</returns>
    public ConnectImexRequestBody GetConnectImexRequestBody()
    {
        return (ConnectImexRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectLasershipRequestBody`. If the actual instance is not `ConnectLasershipRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectLasershipRequestBody</returns>
    public ConnectLasershipRequestBody GetConnectLasershipRequestBody()
    {
        return (ConnectLasershipRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectNewgisticsRequestBody`. If the actual instance is not `ConnectNewgisticsRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectNewgisticsRequestBody</returns>
    public ConnectNewgisticsRequestBody GetConnectNewgisticsRequestBody()
    {
        return (ConnectNewgisticsRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectOntracRequestBody`. If the actual instance is not `ConnectOntracRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectOntracRequestBody</returns>
    public ConnectOntracRequestBody GetConnectOntracRequestBody()
    {
        return (ConnectOntracRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectPurolatorRequestBody`. If the actual instance is not `ConnectPurolatorRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectPurolatorRequestBody</returns>
    public ConnectPurolatorRequestBody GetConnectPurolatorRequestBody()
    {
        return (ConnectPurolatorRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectRoyalMailRequestBody`. If the actual instance is not `ConnectRoyalMailRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectRoyalMailRequestBody</returns>
    public ConnectRoyalMailRequestBody GetConnectRoyalMailRequestBody()
    {
        return (ConnectRoyalMailRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectRrDonnelleyRequestBody`. If the actual instance is not `ConnectRrDonnelleyRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectRrDonnelleyRequestBody</returns>
    public ConnectRrDonnelleyRequestBody GetConnectRrDonnelleyRequestBody()
    {
        return (ConnectRrDonnelleyRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectSekoRequestBody`. If the actual instance is not `ConnectSekoRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectSekoRequestBody</returns>
    public ConnectSekoRequestBody GetConnectSekoRequestBody()
    {
        return (ConnectSekoRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectSendleRequestBody`. If the actual instance is not `ConnectSendleRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectSendleRequestBody</returns>
    public ConnectSendleRequestBody GetConnectSendleRequestBody()
    {
        return (ConnectSendleRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectStampsRequestBody`. If the actual instance is not `ConnectStampsRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectStampsRequestBody</returns>
    public ConnectStampsRequestBody GetConnectStampsRequestBody()
    {
        return (ConnectStampsRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `ConnectUpsRequestBody`. If the actual instance is not `ConnectUpsRequestBody`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of ConnectUpsRequestBody</returns>
    public ConnectUpsRequestBody GetConnectUpsRequestBody()
    {
        return (ConnectUpsRequestBody)this.ActualInstance;
    }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ConnectCarrierRequestBody {\n");
        sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");

        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public override string ToJson()
    {
        return JsonSerializer.Serialize(this.ActualInstance, ConnectCarrierRequestBody.SerializerSettings);
    }

}

/// <summary>
/// Custom JSON converter for ConnectCarrierRequestBody
/// </summary>
public class ConnectCarrierRequestBodyJsonConverter : JsonConverter<ConnectCarrierRequestBody>
{
    /// <summary>
    /// To write the JSON string
    /// </summary>
    /// <param name="writer">JSON writer</param>
    /// <param name="value">Object to be converted into a JSON string</param>
    /// <param name="options">Serializer options</param>
    public override void Write(Utf8JsonWriter writer, ConnectCarrierRequestBody value, JsonSerializerOptions options)
    {
        writer.WriteStartObject();


        var node = JsonSerializer.SerializeToNode(value.ActualInstance, options);
        foreach (var prop in node?.AsObject() ?? [])
        {
            if (prop.Value != null) {
              writer.WritePropertyName(prop.Key);
              prop.Value.WriteTo(writer, options);
            }
        }
        
        writer.WriteEndObject();
    }

    /// <summary>
    /// To convert a JSON string into an object
    /// </summary>
    /// <param name="reader">JSON reader</param>
    /// <param name="typeToConvert">Object type to convert</param>
    /// <param name="options">Serializer options</param>
    /// <returns>The object converted from the JSON string</returns>
    public override ConnectCarrierRequestBody Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if(reader.TokenType == JsonTokenType.Null)
        {
            return null;
        }

        var jsonDoc = JsonDocument.ParseValue(ref reader);
        ConnectCarrierRequestBody newConnectCarrierRequestBody = null;

        int match = 0;
        List<string> matchedTypes = new List<string>();

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectAccessWorldwideRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectAccessWorldwideRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectAccessWorldwideRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectAccessWorldwideRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectAccessWorldwideRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectAmazonBuyShippingRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectAmazonBuyShippingRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectAmazonBuyShippingRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectAmazonBuyShippingRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectAmazonBuyShippingRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectAmazonShippingUk).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectAmazonShippingUk>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectAmazonShippingUk>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectAmazonShippingUk");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectAmazonShippingUk: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectApcRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectApcRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectApcRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectApcRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectApcRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectAsendiaRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectAsendiaRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectAsendiaRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectAsendiaRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectAsendiaRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectAustraliaPostRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectAustraliaPostRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectAustraliaPostRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectAustraliaPostRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectAustraliaPostRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectCanadaPostRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectCanadaPostRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectCanadaPostRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectCanadaPostRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectCanadaPostRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectDhlEcommerceRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectDhlEcommerceRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectDhlEcommerceRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectDhlEcommerceRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectDhlEcommerceRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectDhlExpressRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectDhlExpressRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectDhlExpressRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectDhlExpressRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectDhlExpressRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectDhlExpressAuRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectDhlExpressAuRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectDhlExpressAuRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectDhlExpressAuRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectDhlExpressAuRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectDhlExpressCaRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectDhlExpressCaRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectDhlExpressCaRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectDhlExpressCaRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectDhlExpressCaRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectDhlExpressUkRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectDhlExpressUkRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectDhlExpressUkRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectDhlExpressUkRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectDhlExpressUkRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectDpdRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectDpdRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectDpdRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectDpdRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectDpdRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectEndiciaRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectEndiciaRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectEndiciaRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectEndiciaRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectEndiciaRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectFedexRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectFedexRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectFedexRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectFedexRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectFedexRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectFedexUkRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectFedexUkRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectFedexUkRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectFedexUkRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectFedexUkRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectFirstmileRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectFirstmileRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectFirstmileRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectFirstmileRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectFirstmileRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectImexRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectImexRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectImexRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectImexRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectImexRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectLasershipRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectLasershipRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectLasershipRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectLasershipRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectLasershipRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectNewgisticsRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectNewgisticsRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectNewgisticsRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectNewgisticsRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectNewgisticsRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectOntracRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectOntracRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectOntracRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectOntracRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectOntracRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectPurolatorRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectPurolatorRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectPurolatorRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectPurolatorRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectPurolatorRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectRoyalMailRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectRoyalMailRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectRoyalMailRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectRoyalMailRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectRoyalMailRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectRrDonnelleyRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectRrDonnelleyRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectRrDonnelleyRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectRrDonnelleyRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectRrDonnelleyRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectSekoRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectSekoRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectSekoRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectSekoRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectSekoRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectSendleRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectSendleRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectSendleRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectSendleRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectSendleRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectStampsRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectStampsRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectStampsRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectStampsRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectStampsRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(ConnectUpsRequestBody).GetProperty("AdditionalProperties") == null)
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectUpsRequestBody>(jsonDoc, ConnectCarrierRequestBody.SerializerSettings));
            }
            else
            {
                newConnectCarrierRequestBody = new ConnectCarrierRequestBody(JsonSerializer.Deserialize<ConnectUpsRequestBody>(jsonDoc, ConnectCarrierRequestBody.AdditionalPropertiesSerializerSettings));
            }
            matchedTypes.Add("ConnectUpsRequestBody");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConnectUpsRequestBody: {1}", jsonDoc, exception.ToString()));
        }

        if (match == 0)
        {
            throw new InvalidDataException("The JSON string `" + jsonDoc + "` cannot be deserialized into any schema defined.");
        }
        else if (match > 1)
        {
            throw new InvalidDataException("The JSON string `" + jsonDoc + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
        }


        // deserialization is considered successful at this point if no exception has been thrown.
        return newConnectCarrierRequestBody;
    }

    /// <summary>
    /// Check if the object can be converted
    /// </summary>
    /// <param name="objectType">Object type</param>
    /// <returns>True if the object can be converted</returns>
    public override bool CanConvert(Type objectType)
    {
        return false;
    }
}

