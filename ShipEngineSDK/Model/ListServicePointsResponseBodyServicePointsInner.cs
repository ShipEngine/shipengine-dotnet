/*
 * ShipEngine API
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;

namespace ShipEngineSDK.Model;

/// <summary>
/// ListServicePointsResponseBodyServicePointsInner
/// </summary>
public partial class ListServicePointsResponseBodyServicePointsInner
{
    /// <summary>
    /// Defines Features
    /// </summary>
    [JsonConverter(typeof(FeaturesEnumJsonConverter))]
    public class FeaturesEnum
    {
        private readonly string _value;

        /// <summary>
        /// Create a new instance of FeaturesEnum with a predefined value.
        /// </summary>
        internal FeaturesEnum()
        {
            _value = "drop_off_point";
        }

        /// <summary>
        /// Create a new instance of FeaturesEnum with a custom value.
        /// </summary>
        /// <param name="value">The value of the FeaturesEnum</param>
        /// <remarks>
        /// You can send a custom value to the API using this constructor, but the API most likely won't know what to do with it.
        /// You should use the predefined values returned by the static properties of this class unless you know that the value is value.
        /// </remarks>
        public FeaturesEnum(string value)
        {
            _value = value;
        }

        /// <summary>
        /// Enum DropOffPoint for value: drop_off_point
        /// </summary>
        public static FeaturesEnum DropOffPoint { get; } = new("drop_off_point");


        /// <summary>
        /// Enum PickupPoint for value: pickup_point
        /// </summary>
        public static FeaturesEnum PickupPoint { get; } = new("pickup_point");


        /// <summary>
        /// Enum PrintServices for value: print_services
        /// </summary>
        public static FeaturesEnum PrintServices { get; } = new("print_services");


        /// <summary>
        /// Enum AfterHoursLocker for value: after_hours_locker
        /// </summary>
        public static FeaturesEnum AfterHoursLocker { get; } = new("after_hours_locker");


        /// <summary>
        /// Enum AfterHoursDropbox for value: after_hours_dropbox
        /// </summary>
        public static FeaturesEnum AfterHoursDropbox { get; } = new("after_hours_dropbox");


        /// <summary>
        /// Get a string representation of the current value
        /// </summary>
        public override string ToString() => _value;
    }

    internal class FeaturesEnumJsonConverter : JsonConverter<FeaturesEnum>
    {
        public override FeaturesEnum? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) =>
            reader.TokenType == JsonTokenType.String ? new FeaturesEnum(reader.GetString()!) : null;

        public override void Write(Utf8JsonWriter writer, FeaturesEnum value, JsonSerializerOptions options) =>
            writer.WriteStringValue(value.ToString());

        public override bool CanConvert(Type typeToConvert) =>
            typeToConvert == typeof(FeaturesEnum);
    }

    /// <summary>
    /// Service point type
    /// </summary>
    /// <value>Service point type</value>
    [JsonConverter(typeof(TypeEnumJsonConverter))]
    public class TypeEnum
    {
        private readonly string _value;

        /// <summary>
        /// Create a new instance of TypeEnum with a predefined value.
        /// </summary>
        internal TypeEnum()
        {
            _value = "pudo";
        }

        /// <summary>
        /// Create a new instance of TypeEnum with a custom value.
        /// </summary>
        /// <param name="value">The value of the TypeEnum</param>
        /// <remarks>
        /// You can send a custom value to the API using this constructor, but the API most likely won't know what to do with it.
        /// You should use the predefined values returned by the static properties of this class unless you know that the value is value.
        /// </remarks>
        public TypeEnum(string value)
        {
            _value = value;
        }

        /// <summary>
        /// Enum Pudo for value: pudo
        /// </summary>
        public static TypeEnum Pudo { get; } = new("pudo");


        /// <summary>
        /// Enum Locker for value: locker
        /// </summary>
        public static TypeEnum Locker { get; } = new("locker");


        /// <summary>
        /// Get a string representation of the current value
        /// </summary>
        public override string ToString() => _value;
    }

    internal class TypeEnumJsonConverter : JsonConverter<TypeEnum>
    {
        public override TypeEnum? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) =>
            reader.TokenType == JsonTokenType.String ? new TypeEnum(reader.GetString()!) : null;

        public override void Write(Utf8JsonWriter writer, TypeEnum value, JsonSerializerOptions options) =>
            writer.WriteStringValue(value.ToString());

        public override bool CanConvert(Type typeToConvert) =>
            typeToConvert == typeof(TypeEnum);
    }


    /// <summary>
    /// Service point type
    /// </summary>
    /// <value>Service point type</value>
    [JsonPropertyName("type"), JsonPropertyOrder(16)]
    public TypeEnum? Type { get; set; }

    /// <summary>
    /// The first line of the street address.  For some addresses, this may be the only line.  Other addresses may require 2 or 3 lines.
    /// </summary>
    /// <value>The first line of the street address.  For some addresses, this may be the only line.  Other addresses may require 2 or 3 lines.</value>
    /// <example>
    /// PLACE DU CANADA
    /// </example>
    [JsonPropertyName("address_line1"), JsonPropertyOrder(1)]
    public string? AddressLine1 { get; set; }

    /// <summary>
    /// A [shipping carrier](https://www.shipengine.com/docs/carriers/setup/), such as &#x60;fedex&#x60;, &#x60;dhl_express&#x60;, &#x60;stamps_com&#x60;, etc. 
    /// </summary>
    /// <value>A [shipping carrier](https://www.shipengine.com/docs/carriers/setup/), such as &#x60;fedex&#x60;, &#x60;dhl_express&#x60;, &#x60;stamps_com&#x60;, etc. </value>
    /// <example>
    /// dhl_express
    /// </example>
    [JsonPropertyName("carrier_code"), JsonPropertyOrder(2)]
    public string? CarrierCode { get; set; }

    /// <summary>
    /// The name of the city or locality
    /// </summary>
    /// <value>The name of the city or locality</value>
    /// <example>
    /// TRUN
    /// </example>
    [JsonPropertyName("city_locality"), JsonPropertyOrder(3)]
    public string? CityLocality { get; set; }

    /// <summary>
    /// If this is a business address, then the company name should be specified here.
    /// </summary>
    /// <value>If this is a business address, then the company name should be specified here.</value>
    /// <example>
    /// My fancy company name
    /// </example>
    [JsonPropertyName("company_name"), JsonPropertyOrder(4)]
    public string? CompanyName { get; set; }

    /// <summary>
    /// A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) 
    /// </summary>
    /// <value>A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) </value>
    /// <example>
    /// CA
    /// </example>
    [JsonPropertyName("country_code"), JsonPropertyOrder(5)]
    public string? CountryCode { get; set; }

    /// <summary>
    /// Distance in meters
    /// </summary>
    /// <value>Distance in meters</value>
    /// <example>
    /// 728.9959308847579
    /// </example>
    [JsonPropertyName("distance_in_meters"), JsonPropertyOrder(6)]
    public double? DistanceInMeters { get; set; }

    /// <summary>
    /// Service features
    /// </summary>
    /// <value>Service features</value>
    [JsonPropertyName("features"), JsonPropertyOrder(7)]
    public List<ListServicePointsResponseBodyServicePointsInner.FeaturesEnum>? Features { get; set; }

    /// <summary>
    /// Gets or Sets HoursOfOperation
    /// </summary>
    [JsonPropertyName("hours_of_operation"), JsonPropertyOrder(8)]
    public ListServicePointsResponseBodyServicePointsInnerHoursOfOperation? HoursOfOperation { get; set; }

    /// <summary>
    /// The latitude of the point. Represented as signed degrees. Required if long is provided. http://www.geomidpoint.com/latlon.html
    /// </summary>
    /// <value>The latitude of the point. Represented as signed degrees. Required if long is provided. http://www.geomidpoint.com/latlon.html</value>
    /// <example>
    /// 48.842608
    /// </example>
    [JsonPropertyName("lat"), JsonPropertyOrder(9)]
    public double? Lat { get; set; }

    /// <summary>
    /// The longitude of the point. Represented as signed degrees. Required if lat is provided. http://www.geomidpoint.com/latlon.html
    /// </summary>
    /// <value>The longitude of the point. Represented as signed degrees. Required if lat is provided. http://www.geomidpoint.com/latlon.html</value>
    /// <example>
    /// 0.032875
    /// </example>
    [JsonPropertyName("long"), JsonPropertyOrder(10)]
    public double? Long { get; set; }

    /// <summary>
    /// Phone number associated
    /// </summary>
    /// <value>Phone number associated</value>
    /// <example>
    /// 555-555-5555
    /// </example>
    [JsonPropertyName("phone_number"), JsonPropertyOrder(11)]
    public string? PhoneNumber { get; set; }

    /// <summary>
    /// postal code
    /// </summary>
    /// <value>postal code</value>
    /// <example>
    /// 78756-3717
    /// </example>
    [JsonPropertyName("postal_code"), JsonPropertyOrder(12)]
    public string? PostalCode { get; set; }

    /// <summary>
    /// Gets or Sets ServiceCodes
    /// </summary>
    [JsonPropertyName("service_codes"), JsonPropertyOrder(13)]
    public List<string>? ServiceCodes { get; set; }

    /// <summary>
    /// A unique identifier for a carrier drop off point.
    /// </summary>
    /// <value>A unique identifier for a carrier drop off point.</value>
    /// <example>
    /// 614940
    /// </example>
    [JsonPropertyName("service_point_id"), JsonPropertyOrder(14)]
    public string? ServicePointId { get; set; }

    /// <summary>
    /// The state or province. For some countries (including the U.S.) only abbreviations are allowed. Other countries allow the full name or abbreviation.
    /// </summary>
    /// <value>The state or province. For some countries (including the U.S.) only abbreviations are allowed. Other countries allow the full name or abbreviation.</value>
    /// <example>
    /// TRUN
    /// </example>
    [JsonPropertyName("state_province"), JsonPropertyOrder(15)]
    public string? StateProvince { get; set; }


    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("class ListServicePointsResponseBodyServicePointsInner {\n");
#pragma warning disable CS0612 // Type or member is obsolete
        sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
        sb.Append("  CarrierCode: ").Append(CarrierCode).Append("\n");
        sb.Append("  CityLocality: ").Append(CityLocality).Append("\n");
        sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
        sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
        sb.Append("  DistanceInMeters: ").Append(DistanceInMeters).Append("\n");
        sb.Append("  Features: ").Append(Features).Append("\n");
        sb.Append("  HoursOfOperation: ").Append(HoursOfOperation).Append("\n");
        sb.Append("  Lat: ").Append(Lat).Append("\n");
        sb.Append("  Long: ").Append(Long).Append("\n");
        sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
        sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
        sb.Append("  ServiceCodes: ").Append(ServiceCodes).Append("\n");
        sb.Append("  ServicePointId: ").Append(ServicePointId).Append("\n");
        sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
        sb.Append("  Type: ").Append(Type).Append("\n");
#pragma warning restore CS0612 // Type or member is obsolete
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson(JsonSerializerOptions options)
    {
        return JsonSerializer.Serialize(this, options);
    }

}