/*
 * ShipEngine API
 *
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;

namespace ShipEngineSDK.Model;

    /// <summary>
    /// The error code specified for the failed API Call
    /// </summary>
    /// <value>The error code specified for the failed API Call</value>
    public static class ErrorCode
    {
        private static readonly HashSet<string> _values = new()
        {
            "auto_fund_not_supported",
            "batch_cannot_be_modified",
            "carrier_conflict",
            "carrier_disconnected",
            "carrier_not_connected",
            "carrier_not_supported",
            "confirmation_not_supported",
            "default_warehouse_cannot_be_deleted",
            "field_conflict",
            "field_value_required",
            "forbidden",
            "identifier_conflict",
            "identifiers_must_match",
            "insufficient_funds",
            "invalid_address",
            "invalid_billing_plan",
            "invalid_field_value",
            "invalid_identifier",
            "invalid_status",
            "invalid_string_length",
            "label_images_not_supported",
            "meter_failure",
            "order_source_not_active",
            "rate_limit_exceeded",
            "refresh_not_supported",
            "request_body_required",
            "return_label_not_supported",
            "settings_not_supported",
            "subscription_inactive",
            "terms_not_accepted",
            "tracking_not_supported",
            "trial_expired",
            "unauthorized",
            "unknown",
            "unspecified",
            "verification_failure",
            "warehouse_conflict",
            "webhook_event_type_conflict",
            "customs_items_required",
            "incompatible_paired_labels",
            "invalid_charge_event",
            "invalid_object",
            "no_rates_returned",
        };

        public static string DefaultValue => AutoFundNotSupported;
        /// <summary>
        /// Enum AutoFundNotSupported for value: auto_fund_not_supported
        /// </summary>
        public static string AutoFundNotSupported { get; } = "auto_fund_not_supported";


        /// <summary>
        /// Enum BatchCannotBeModified for value: batch_cannot_be_modified
        /// </summary>
        public static string BatchCannotBeModified { get; } = "batch_cannot_be_modified";


        /// <summary>
        /// Enum CarrierConflict for value: carrier_conflict
        /// </summary>
        public static string CarrierConflict { get; } = "carrier_conflict";


        /// <summary>
        /// Enum CarrierDisconnected for value: carrier_disconnected
        /// </summary>
        public static string CarrierDisconnected { get; } = "carrier_disconnected";


        /// <summary>
        /// Enum CarrierNotConnected for value: carrier_not_connected
        /// </summary>
        public static string CarrierNotConnected { get; } = "carrier_not_connected";


        /// <summary>
        /// Enum CarrierNotSupported for value: carrier_not_supported
        /// </summary>
        public static string CarrierNotSupported { get; } = "carrier_not_supported";


        /// <summary>
        /// Enum ConfirmationNotSupported for value: confirmation_not_supported
        /// </summary>
        public static string ConfirmationNotSupported { get; } = "confirmation_not_supported";


        /// <summary>
        /// Enum DefaultWarehouseCannotBeDeleted for value: default_warehouse_cannot_be_deleted
        /// </summary>
        public static string DefaultWarehouseCannotBeDeleted { get; } = "default_warehouse_cannot_be_deleted";


        /// <summary>
        /// Enum FieldConflict for value: field_conflict
        /// </summary>
        public static string FieldConflict { get; } = "field_conflict";


        /// <summary>
        /// Enum FieldValueRequired for value: field_value_required
        /// </summary>
        public static string FieldValueRequired { get; } = "field_value_required";


        /// <summary>
        /// Enum Forbidden for value: forbidden
        /// </summary>
        public static string Forbidden { get; } = "forbidden";


        /// <summary>
        /// Enum IdentifierConflict for value: identifier_conflict
        /// </summary>
        public static string IdentifierConflict { get; } = "identifier_conflict";


        /// <summary>
        /// Enum IdentifiersMustMatch for value: identifiers_must_match
        /// </summary>
        public static string IdentifiersMustMatch { get; } = "identifiers_must_match";


        /// <summary>
        /// Enum InsufficientFunds for value: insufficient_funds
        /// </summary>
        public static string InsufficientFunds { get; } = "insufficient_funds";


        /// <summary>
        /// Enum InvalidAddress for value: invalid_address
        /// </summary>
        public static string InvalidAddress { get; } = "invalid_address";


        /// <summary>
        /// Enum InvalidBillingPlan for value: invalid_billing_plan
        /// </summary>
        public static string InvalidBillingPlan { get; } = "invalid_billing_plan";


        /// <summary>
        /// Enum InvalidFieldValue for value: invalid_field_value
        /// </summary>
        public static string InvalidFieldValue { get; } = "invalid_field_value";


        /// <summary>
        /// Enum InvalidIdentifier for value: invalid_identifier
        /// </summary>
        public static string InvalidIdentifier { get; } = "invalid_identifier";


        /// <summary>
        /// Enum InvalidStatus for value: invalid_status
        /// </summary>
        public static string InvalidStatus { get; } = "invalid_status";


        /// <summary>
        /// Enum InvalidStringLength for value: invalid_string_length
        /// </summary>
        public static string InvalidStringLength { get; } = "invalid_string_length";


        /// <summary>
        /// Enum LabelImagesNotSupported for value: label_images_not_supported
        /// </summary>
        public static string LabelImagesNotSupported { get; } = "label_images_not_supported";


        /// <summary>
        /// Enum MeterFailure for value: meter_failure
        /// </summary>
        public static string MeterFailure { get; } = "meter_failure";


        /// <summary>
        /// Enum OrderSourceNotActive for value: order_source_not_active
        /// </summary>
        public static string OrderSourceNotActive { get; } = "order_source_not_active";


        /// <summary>
        /// Enum RateLimitExceeded for value: rate_limit_exceeded
        /// </summary>
        public static string RateLimitExceeded { get; } = "rate_limit_exceeded";


        /// <summary>
        /// Enum RefreshNotSupported for value: refresh_not_supported
        /// </summary>
        public static string RefreshNotSupported { get; } = "refresh_not_supported";


        /// <summary>
        /// Enum RequestBodyRequired for value: request_body_required
        /// </summary>
        public static string RequestBodyRequired { get; } = "request_body_required";


        /// <summary>
        /// Enum ReturnLabelNotSupported for value: return_label_not_supported
        /// </summary>
        public static string ReturnLabelNotSupported { get; } = "return_label_not_supported";


        /// <summary>
        /// Enum SettingsNotSupported for value: settings_not_supported
        /// </summary>
        public static string SettingsNotSupported { get; } = "settings_not_supported";


        /// <summary>
        /// Enum SubscriptionInactive for value: subscription_inactive
        /// </summary>
        public static string SubscriptionInactive { get; } = "subscription_inactive";


        /// <summary>
        /// Enum TermsNotAccepted for value: terms_not_accepted
        /// </summary>
        public static string TermsNotAccepted { get; } = "terms_not_accepted";


        /// <summary>
        /// Enum TrackingNotSupported for value: tracking_not_supported
        /// </summary>
        public static string TrackingNotSupported { get; } = "tracking_not_supported";


        /// <summary>
        /// Enum TrialExpired for value: trial_expired
        /// </summary>
        public static string TrialExpired { get; } = "trial_expired";


        /// <summary>
        /// Enum Unauthorized for value: unauthorized
        /// </summary>
        public static string Unauthorized { get; } = "unauthorized";


        /// <summary>
        /// Enum Unknown for value: unknown
        /// </summary>
        public static string Unknown { get; } = "unknown";


        /// <summary>
        /// Enum Unspecified for value: unspecified
        /// </summary>
        public static string Unspecified { get; } = "unspecified";


        /// <summary>
        /// Enum VerificationFailure for value: verification_failure
        /// </summary>
        public static string VerificationFailure { get; } = "verification_failure";


        /// <summary>
        /// Enum WarehouseConflict for value: warehouse_conflict
        /// </summary>
        public static string WarehouseConflict { get; } = "warehouse_conflict";


        /// <summary>
        /// Enum WebhookEventTypeConflict for value: webhook_event_type_conflict
        /// </summary>
        public static string WebhookEventTypeConflict { get; } = "webhook_event_type_conflict";


        /// <summary>
        /// Enum CustomsItemsRequired for value: customs_items_required
        /// </summary>
        public static string CustomsItemsRequired { get; } = "customs_items_required";


        /// <summary>
        /// Enum IncompatiblePairedLabels for value: incompatible_paired_labels
        /// </summary>
        public static string IncompatiblePairedLabels { get; } = "incompatible_paired_labels";


        /// <summary>
        /// Enum InvalidChargeEvent for value: invalid_charge_event
        /// </summary>
        public static string InvalidChargeEvent { get; } = "invalid_charge_event";


        /// <summary>
        /// Enum InvalidObject for value: invalid_object
        /// </summary>
        public static string InvalidObject { get; } = "invalid_object";


        /// <summary>
        /// Enum NoRatesReturned for value: no_rates_returned
        /// </summary>
        public static string NoRatesReturned { get; } = "no_rates_returned";


        /// <summary>
        /// Is the given value a valid ?
        /// </summary>
        public static bool IsValid(string value)
        {
            return _values.Contains(value);
        }
    }
