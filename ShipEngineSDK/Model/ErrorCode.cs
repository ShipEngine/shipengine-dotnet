/*
 * ShipEngine API
 *
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others.  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;

namespace ShipEngineSDK.Model;

/// <summary>
/// The error code specified for the failed API Call
/// </summary>
/// <value>The error code specified for the failed API Call</value>
[JsonConverter(typeof(ErrorCodeJsonConverter))]
public class ErrorCode
{
    private string _value;

    internal ErrorCode()
    {
        _value = "auto_fund_not_supported";
    }

    /// <summary>
    /// Create a new instance of ErrorCode with a custom value.
    /// </summary>
    /// <param name="value">The value of the ErrorCode</param>
    /// <remarks>
    /// You can send a custom value to the API using this constructor, but the API most likely won't know what to do with it.
    /// You should use the predefined values returned by the static properties of this class unless you know that the value is value.
    /// </remarks>
    public ErrorCode(string value)
    {
        _value = value;
    }

    /// <summary>
    /// Enum AutoFundNotSupported for value: auto_fund_not_supported
    /// </summary>
    public static ErrorCode AutoFundNotSupported { get; } = new("auto_fund_not_supported");


    /// <summary>
    /// Enum BatchCannotBeModified for value: batch_cannot_be_modified
    /// </summary>
    public static ErrorCode BatchCannotBeModified { get; } = new("batch_cannot_be_modified");


    /// <summary>
    /// Enum CarrierConflict for value: carrier_conflict
    /// </summary>
    public static ErrorCode CarrierConflict { get; } = new("carrier_conflict");


    /// <summary>
    /// Enum CarrierDisconnected for value: carrier_disconnected
    /// </summary>
    public static ErrorCode CarrierDisconnected { get; } = new("carrier_disconnected");


    /// <summary>
    /// Enum CarrierNotConnected for value: carrier_not_connected
    /// </summary>
    public static ErrorCode CarrierNotConnected { get; } = new("carrier_not_connected");


    /// <summary>
    /// Enum CarrierNotSupported for value: carrier_not_supported
    /// </summary>
    public static ErrorCode CarrierNotSupported { get; } = new("carrier_not_supported");


    /// <summary>
    /// Enum ConfirmationNotSupported for value: confirmation_not_supported
    /// </summary>
    public static ErrorCode ConfirmationNotSupported { get; } = new("confirmation_not_supported");


    /// <summary>
    /// Enum DefaultWarehouseCannotBeDeleted for value: default_warehouse_cannot_be_deleted
    /// </summary>
    public static ErrorCode DefaultWarehouseCannotBeDeleted { get; } = new("default_warehouse_cannot_be_deleted");


    /// <summary>
    /// Enum FieldConflict for value: field_conflict
    /// </summary>
    public static ErrorCode FieldConflict { get; } = new("field_conflict");


    /// <summary>
    /// Enum FieldValueRequired for value: field_value_required
    /// </summary>
    public static ErrorCode FieldValueRequired { get; } = new("field_value_required");


    /// <summary>
    /// Enum Forbidden for value: forbidden
    /// </summary>
    public static ErrorCode Forbidden { get; } = new("forbidden");


    /// <summary>
    /// Enum IdentifierConflict for value: identifier_conflict
    /// </summary>
    public static ErrorCode IdentifierConflict { get; } = new("identifier_conflict");


    /// <summary>
    /// Enum IdentifiersMustMatch for value: identifiers_must_match
    /// </summary>
    public static ErrorCode IdentifiersMustMatch { get; } = new("identifiers_must_match");


    /// <summary>
    /// Enum InsufficientFunds for value: insufficient_funds
    /// </summary>
    public static ErrorCode InsufficientFunds { get; } = new("insufficient_funds");


    /// <summary>
    /// Enum InvalidAddress for value: invalid_address
    /// </summary>
    public static ErrorCode InvalidAddress { get; } = new("invalid_address");


    /// <summary>
    /// Enum InvalidBillingPlan for value: invalid_billing_plan
    /// </summary>
    public static ErrorCode InvalidBillingPlan { get; } = new("invalid_billing_plan");


    /// <summary>
    /// Enum InvalidFieldValue for value: invalid_field_value
    /// </summary>
    public static ErrorCode InvalidFieldValue { get; } = new("invalid_field_value");


    /// <summary>
    /// Enum InvalidIdentifier for value: invalid_identifier
    /// </summary>
    public static ErrorCode InvalidIdentifier { get; } = new("invalid_identifier");


    /// <summary>
    /// Enum InvalidStatus for value: invalid_status
    /// </summary>
    public static ErrorCode InvalidStatus { get; } = new("invalid_status");


    /// <summary>
    /// Enum InvalidStringLength for value: invalid_string_length
    /// </summary>
    public static ErrorCode InvalidStringLength { get; } = new("invalid_string_length");


    /// <summary>
    /// Enum LabelImagesNotSupported for value: label_images_not_supported
    /// </summary>
    public static ErrorCode LabelImagesNotSupported { get; } = new("label_images_not_supported");


    /// <summary>
    /// Enum MeterFailure for value: meter_failure
    /// </summary>
    public static ErrorCode MeterFailure { get; } = new("meter_failure");


    /// <summary>
    /// Enum OrderSourceNotActive for value: order_source_not_active
    /// </summary>
    public static ErrorCode OrderSourceNotActive { get; } = new("order_source_not_active");


    /// <summary>
    /// Enum RateLimitExceeded for value: rate_limit_exceeded
    /// </summary>
    public static ErrorCode RateLimitExceeded { get; } = new("rate_limit_exceeded");


    /// <summary>
    /// Enum RefreshNotSupported for value: refresh_not_supported
    /// </summary>
    public static ErrorCode RefreshNotSupported { get; } = new("refresh_not_supported");


    /// <summary>
    /// Enum RequestBodyRequired for value: request_body_required
    /// </summary>
    public static ErrorCode RequestBodyRequired { get; } = new("request_body_required");


    /// <summary>
    /// Enum ReturnLabelNotSupported for value: return_label_not_supported
    /// </summary>
    public static ErrorCode ReturnLabelNotSupported { get; } = new("return_label_not_supported");


    /// <summary>
    /// Enum SettingsNotSupported for value: settings_not_supported
    /// </summary>
    public static ErrorCode SettingsNotSupported { get; } = new("settings_not_supported");


    /// <summary>
    /// Enum SubscriptionInactive for value: subscription_inactive
    /// </summary>
    public static ErrorCode SubscriptionInactive { get; } = new("subscription_inactive");


    /// <summary>
    /// Enum TermsNotAccepted for value: terms_not_accepted
    /// </summary>
    public static ErrorCode TermsNotAccepted { get; } = new("terms_not_accepted");


    /// <summary>
    /// Enum TrackingNotSupported for value: tracking_not_supported
    /// </summary>
    public static ErrorCode TrackingNotSupported { get; } = new("tracking_not_supported");


    /// <summary>
    /// Enum TrialExpired for value: trial_expired
    /// </summary>
    public static ErrorCode TrialExpired { get; } = new("trial_expired");


    /// <summary>
    /// Enum Unauthorized for value: unauthorized
    /// </summary>
    public static ErrorCode Unauthorized { get; } = new("unauthorized");


    /// <summary>
    /// Enum Unknown for value: unknown
    /// </summary>
    public static ErrorCode Unknown { get; } = new("unknown");


    /// <summary>
    /// Enum Unspecified for value: unspecified
    /// </summary>
    public static ErrorCode Unspecified { get; } = new("unspecified");


    /// <summary>
    /// Enum VerificationFailure for value: verification_failure
    /// </summary>
    public static ErrorCode VerificationFailure { get; } = new("verification_failure");


    /// <summary>
    /// Enum WarehouseConflict for value: warehouse_conflict
    /// </summary>
    public static ErrorCode WarehouseConflict { get; } = new("warehouse_conflict");


    /// <summary>
    /// Enum WebhookEventTypeConflict for value: webhook_event_type_conflict
    /// </summary>
    public static ErrorCode WebhookEventTypeConflict { get; } = new("webhook_event_type_conflict");


    /// <summary>
    /// Enum CustomsItemsRequired for value: customs_items_required
    /// </summary>
    public static ErrorCode CustomsItemsRequired { get; } = new("customs_items_required");


    /// <summary>
    /// Enum IncompatiblePairedLabels for value: incompatible_paired_labels
    /// </summary>
    public static ErrorCode IncompatiblePairedLabels { get; } = new("incompatible_paired_labels");


    /// <summary>
    /// Enum InvalidChargeEvent for value: invalid_charge_event
    /// </summary>
    public static ErrorCode InvalidChargeEvent { get; } = new("invalid_charge_event");


    /// <summary>
    /// Enum InvalidObject for value: invalid_object
    /// </summary>
    public static ErrorCode InvalidObject { get; } = new("invalid_object");


    /// <summary>
    /// Enum NoRatesReturned for value: no_rates_returned
    /// </summary>
    public static ErrorCode NoRatesReturned { get; } = new("no_rates_returned");


    public override string ToString() => _value;
}

internal class ErrorCodeJsonConverter : JsonConverter<ErrorCode>
{
    public override ErrorCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) =>
        reader.TokenType == JsonTokenType.String ? new ErrorCode(reader.GetString()) : null;

    public override void Write(Utf8JsonWriter writer, ErrorCode value, JsonSerializerOptions options) =>
        writer.WriteStringValue(value.ToString());

    public override bool CanConvert(Type typeToConvert) =>
        typeToConvert == typeof(ErrorCode);
}