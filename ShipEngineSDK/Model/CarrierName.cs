/*
 * ShipEngine API
 *
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others.  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;

namespace ShipEngineSDK.Model;

/// <summary>
/// The shipping carriers that are supported by ShipEngine
/// </summary>
/// <value>The shipping carriers that are supported by ShipEngine</value>
[JsonConverter(typeof(CarrierNameJsonConverter))]
public class CarrierName
{
    private string _value;

    internal CarrierName()
    {
        _value = "access_worldwide";
    }

    /// <summary>
    /// Create a new instance of CarrierName with a custom value.
    /// </summary>
    /// <param name="value">The value of the CarrierName</param>
    /// <remarks>
    /// You can send a custom value to the API using this constructor, but the API most likely won't know what to do with it.
    /// You should use the predefined values returned by the static properties of this class unless you know that the value is value.
    /// </remarks>
    public CarrierName(string value)
    {
        _value = value;
    }

    /// <summary>
    /// Enum AccessWorldwide for value: access_worldwide
    /// </summary>
    public static CarrierName AccessWorldwide { get; } = new("access_worldwide");


    /// <summary>
    /// Enum AmazonBuyShipping for value: amazon_buy_shipping
    /// </summary>
    public static CarrierName AmazonBuyShipping { get; } = new("amazon_buy_shipping");


    /// <summary>
    /// Enum AmazonShippingUk for value: amazon_shipping_uk
    /// </summary>
    public static CarrierName AmazonShippingUk { get; } = new("amazon_shipping_uk");


    /// <summary>
    /// Enum Apc for value: apc
    /// </summary>
    public static CarrierName Apc { get; } = new("apc");


    /// <summary>
    /// Enum Asendia for value: asendia
    /// </summary>
    public static CarrierName Asendia { get; } = new("asendia");


    /// <summary>
    /// Enum AustraliaPost for value: australia_post
    /// </summary>
    public static CarrierName AustraliaPost { get; } = new("australia_post");


    /// <summary>
    /// Enum CanadaPost for value: canada_post
    /// </summary>
    public static CarrierName CanadaPost { get; } = new("canada_post");


    /// <summary>
    /// Enum DhlEcommerce for value: dhl_ecommerce
    /// </summary>
    public static CarrierName DhlEcommerce { get; } = new("dhl_ecommerce");


    /// <summary>
    /// Enum DhlExpress for value: dhl_express
    /// </summary>
    public static CarrierName DhlExpress { get; } = new("dhl_express");


    /// <summary>
    /// Enum DhlExpressAu for value: dhl_express_au
    /// </summary>
    public static CarrierName DhlExpressAu { get; } = new("dhl_express_au");


    /// <summary>
    /// Enum DhlExpressCa for value: dhl_express_ca
    /// </summary>
    public static CarrierName DhlExpressCa { get; } = new("dhl_express_ca");


    /// <summary>
    /// Enum DhlExpressUk for value: dhl_express_uk
    /// </summary>
    public static CarrierName DhlExpressUk { get; } = new("dhl_express_uk");


    /// <summary>
    /// Enum Dpd for value: dpd
    /// </summary>
    public static CarrierName Dpd { get; } = new("dpd");


    /// <summary>
    /// Enum Endicia for value: endicia
    /// </summary>
    public static CarrierName Endicia { get; } = new("endicia");


    /// <summary>
    /// Enum Fedex for value: fedex
    /// </summary>
    public static CarrierName Fedex { get; } = new("fedex");


    /// <summary>
    /// Enum FedexUk for value: fedex_uk
    /// </summary>
    public static CarrierName FedexUk { get; } = new("fedex_uk");


    /// <summary>
    /// Enum Firstmile for value: firstmile
    /// </summary>
    public static CarrierName Firstmile { get; } = new("firstmile");


    /// <summary>
    /// Enum Imex for value: imex
    /// </summary>
    public static CarrierName Imex { get; } = new("imex");


    /// <summary>
    /// Enum Newgistics for value: newgistics
    /// </summary>
    public static CarrierName Newgistics { get; } = new("newgistics");


    /// <summary>
    /// Enum Ontrac for value: ontrac
    /// </summary>
    public static CarrierName Ontrac { get; } = new("ontrac");


    /// <summary>
    /// Enum PurolatorCanada for value: purolator_canada
    /// </summary>
    public static CarrierName PurolatorCanada { get; } = new("purolator_canada");


    /// <summary>
    /// Enum RoyalMail for value: royal_mail
    /// </summary>
    public static CarrierName RoyalMail { get; } = new("royal_mail");


    /// <summary>
    /// Enum RrDonnelley for value: rr_donnelley
    /// </summary>
    public static CarrierName RrDonnelley { get; } = new("rr_donnelley");


    /// <summary>
    /// Enum Seko for value: seko
    /// </summary>
    public static CarrierName Seko { get; } = new("seko");


    /// <summary>
    /// Enum Sendle for value: sendle
    /// </summary>
    public static CarrierName Sendle { get; } = new("sendle");


    /// <summary>
    /// Enum StampsCom for value: stamps_com
    /// </summary>
    public static CarrierName StampsCom { get; } = new("stamps_com");


    /// <summary>
    /// Enum Ups for value: ups
    /// </summary>
    public static CarrierName Ups { get; } = new("ups");


    /// <summary>
    /// Enum Lasership for value: lasership
    /// </summary>
    public static CarrierName Lasership { get; } = new("lasership");


    public override string ToString() => _value;
}

internal class CarrierNameJsonConverter : JsonConverter<CarrierName>
{
    public override CarrierName? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) =>
        reader.TokenType == JsonTokenType.String ? new CarrierName(reader.GetString()) : null;

    public override void Write(Utf8JsonWriter writer, CarrierName value, JsonSerializerOptions options) =>
        writer.WriteStringValue(value.ToString());

    public override bool CanConvert(Type typeToConvert) =>
        typeToConvert == typeof(CarrierName);
}