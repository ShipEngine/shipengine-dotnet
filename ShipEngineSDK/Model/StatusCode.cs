/*
 * ShipEngine API
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;

namespace ShipEngineSDK.Model;

/// <summary>
/// The tracking status codes  |Value       |Description |:- -- -- -- --  |:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |&#x60;un&#x60; | Unknown |&#x60;ac&#x60; | Accepted |&#x60;it&#x60; | In Transit |&#x60;de&#x60; | Delivered |&#x60;ex&#x60; | Exception |&#x60;at&#x60; | Delivery Attempt |&#x60;ny&#x60; | Not Yet In System 
/// </summary>
/// <value>The tracking status codes  |Value       |Description |:- -- -- -- --  |:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |&#x60;un&#x60; | Unknown |&#x60;ac&#x60; | Accepted |&#x60;it&#x60; | In Transit |&#x60;de&#x60; | Delivered |&#x60;ex&#x60; | Exception |&#x60;at&#x60; | Delivery Attempt |&#x60;ny&#x60; | Not Yet In System </value>
[JsonConverter(typeof(StatusCodeJsonConverter))]
public class StatusCode
{
    private string _value;

    internal StatusCode()
    {
        _value = "un";
    }

    /// <summary>
    /// Create a new instance of StatusCode with a custom value.
    /// </summary>
    /// <param name="value">The value of the StatusCode</param>
    /// <remarks>
    /// You can send a custom value to the API using this constructor, but the API most likely won't know what to do with it.
    /// You should use the predefined values returned by the static properties of this class unless you know that the value is value.
    /// </remarks>
    public StatusCode(string value)
    {
        _value = value;
    }

    /// <summary>
    /// Enum Un for value: un
    /// </summary>
    public static StatusCode Un { get; } = new("un");


    /// <summary>
    /// Enum Ac for value: ac
    /// </summary>
    public static StatusCode Ac { get; } = new("ac");


    /// <summary>
    /// Enum It for value: it
    /// </summary>
    public static StatusCode It { get; } = new("it");


    /// <summary>
    /// Enum De for value: de
    /// </summary>
    public static StatusCode De { get; } = new("de");


    /// <summary>
    /// Enum Ex for value: ex
    /// </summary>
    public static StatusCode Ex { get; } = new("ex");


    /// <summary>
    /// Enum At for value: at
    /// </summary>
    public static StatusCode At { get; } = new("at");


    /// <summary>
    /// Enum Ny for value: ny
    /// </summary>
    public static StatusCode Ny { get; } = new("ny");


    public override string ToString() => _value;
}

internal class StatusCodeJsonConverter : JsonConverter<StatusCode>
{
    public override StatusCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) =>
        reader.TokenType == JsonTokenType.String ? new StatusCode(reader.GetString()) : null;

    public override void Write(Utf8JsonWriter writer, StatusCode value, JsonSerializerOptions options) =>
        writer.WriteStringValue(value.ToString());

    public override bool CanConvert(Type typeToConvert) =>
        typeToConvert == typeof(StatusCode);
}