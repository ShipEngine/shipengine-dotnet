// <auto-generated />
// DO NOT MODIFY THIS FILE

// Changes can be made in a corresponding partial file, or by changing
// the template in <root>/generation/templates and generating the class again.


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;

namespace ShipEngineSDK.Model;

/// <summary>
/// The tracking status codes  |Value       |Description |:- -- -- -- --  |:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |&#x60;UN&#x60; | Unknown |&#x60;AC&#x60; | Accepted |&#x60;IT&#x60; | In Transit |&#x60;DE&#x60; | Delivered |&#x60;EX&#x60; | Exception |&#x60;AT&#x60; | Delivery Attempt |&#x60;NY&#x60; | Not Yet In System 
/// </summary>
/// <value>The tracking status codes  |Value       |Description |:- -- -- -- --  |:- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |&#x60;UN&#x60; | Unknown |&#x60;AC&#x60; | Accepted |&#x60;IT&#x60; | In Transit |&#x60;DE&#x60; | Delivered |&#x60;EX&#x60; | Exception |&#x60;AT&#x60; | Delivery Attempt |&#x60;NY&#x60; | Not Yet In System </value>
[JsonConverter(typeof(StatusCodeJsonConverter))]
public class StatusCode
{
    private readonly string _value;

    /// <summary>
    /// Create a new instance of StatusCode with a predefined value.
    /// </summary>
    internal StatusCode()
    {
        _value = "UN";
    }

    /// <summary>
    /// Create a new instance of StatusCode with a custom value.
    /// </summary>
    /// <param name="value">The value of the StatusCode</param>
    /// <remarks>
    /// You can send a custom value to the API using this constructor, but the API most likely won't know what to do with it.
    /// You should use the predefined values returned by the static properties of this class unless you know that the value is value.
    /// </remarks>
    public StatusCode(string value)
    {
        _value = value;
    }

    /// <summary>
    /// Enum UN for value: UN
    /// </summary>
    public static StatusCode UN { get; } = new("UN");


    /// <summary>
    /// Enum AC for value: AC
    /// </summary>
    public static StatusCode AC { get; } = new("AC");


    /// <summary>
    /// Enum IT for value: IT
    /// </summary>
    public static StatusCode IT { get; } = new("IT");


    /// <summary>
    /// Enum DE for value: DE
    /// </summary>
    public static StatusCode DE { get; } = new("DE");


    /// <summary>
    /// Enum EX for value: EX
    /// </summary>
    public static StatusCode EX { get; } = new("EX");


    /// <summary>
    /// Enum AT for value: AT
    /// </summary>
    public static StatusCode AT { get; } = new("AT");


    /// <summary>
    /// Enum NY for value: NY
    /// </summary>
    public static StatusCode NY { get; } = new("NY");


    /// <summary>
    /// Get a string representation of the current value
    /// </summary>
    public override string ToString() => _value;

    /// <summary>
    /// Get whether this instance is equal to another instance
    /// </summary>
    public override bool Equals(object? obj) =>
        obj is StatusCode other && _value == other._value;

    /// <summary>
    /// Get the hash code of the object
    /// </summary>
    public override int GetHashCode() => _value.GetHashCode();
}

internal class StatusCodeJsonConverter : JsonConverter<StatusCode>
{
    public override StatusCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) =>
        reader.TokenType == JsonTokenType.String ? new StatusCode(reader.GetString()!) : null;

    public override void Write(Utf8JsonWriter writer, StatusCode value, JsonSerializerOptions options) =>
        writer.WriteStringValue(value.ToString());

    public override bool CanConvert(Type typeToConvert) =>
        typeToConvert == typeof(StatusCode);
}