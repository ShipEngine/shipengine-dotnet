// <auto-generated />
// DO NOT MODIFY THIS FILE

// Changes can be made in a corresponding partial file, or by changing
// the template in <root>/generation/templates and generating the class again.


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;

namespace ShipEngineSDK.Model;

/// <summary>
/// The possible rate detail type values
/// </summary>
/// <value>The possible rate detail type values</value>
[JsonConverter(typeof(RateDetailTypeJsonConverter))]
public class RateDetailType
{
    private readonly string _value;

    /// <summary>
    /// Create a new instance of RateDetailType with a predefined value.
    /// </summary>
    internal RateDetailType()
    {
        _value = "uncategorized";
    }

    /// <summary>
    /// Create a new instance of RateDetailType with a custom value.
    /// </summary>
    /// <param name="value">The value of the RateDetailType</param>
    /// <remarks>
    /// You can send a custom value to the API using this constructor, but the API most likely won't know what to do with it.
    /// You should use the predefined values returned by the static properties of this class unless you know that the value is value.
    /// </remarks>
    public RateDetailType(string value)
    {
        _value = value;
    }

    /// <summary>
    /// Enum Uncategorized for value: uncategorized
    /// </summary>
    public static RateDetailType Uncategorized { get; } = new("uncategorized");


    /// <summary>
    /// Enum Shipping for value: shipping
    /// </summary>
    public static RateDetailType Shipping { get; } = new("shipping");


    /// <summary>
    /// Enum Insurance for value: insurance
    /// </summary>
    public static RateDetailType Insurance { get; } = new("insurance");


    /// <summary>
    /// Enum Confirmation for value: confirmation
    /// </summary>
    public static RateDetailType Confirmation { get; } = new("confirmation");


    /// <summary>
    /// Enum Discount for value: discount
    /// </summary>
    public static RateDetailType Discount { get; } = new("discount");


    /// <summary>
    /// Enum FuelCharge for value: fuel_charge
    /// </summary>
    public static RateDetailType FuelCharge { get; } = new("fuel_charge");


    /// <summary>
    /// Enum AdditionalFees for value: additional_fees
    /// </summary>
    public static RateDetailType AdditionalFees { get; } = new("additional_fees");


    /// <summary>
    /// Enum Tariff for value: tariff
    /// </summary>
    public static RateDetailType Tariff { get; } = new("tariff");


    /// <summary>
    /// Enum Tax for value: tax
    /// </summary>
    public static RateDetailType Tax { get; } = new("tax");


    /// <summary>
    /// Enum Delivery for value: delivery
    /// </summary>
    public static RateDetailType Delivery { get; } = new("delivery");


    /// <summary>
    /// Enum Handling for value: handling
    /// </summary>
    public static RateDetailType Handling { get; } = new("handling");


    /// <summary>
    /// Enum SpecialGoods for value: special_goods
    /// </summary>
    public static RateDetailType SpecialGoods { get; } = new("special_goods");


    /// <summary>
    /// Enum Pickup for value: pickup
    /// </summary>
    public static RateDetailType Pickup { get; } = new("pickup");


    /// <summary>
    /// Enum LocationFee for value: location_fee
    /// </summary>
    public static RateDetailType LocationFee { get; } = new("location_fee");


    /// <summary>
    /// Enum Oversize for value: oversize
    /// </summary>
    public static RateDetailType Oversize { get; } = new("oversize");


    /// <summary>
    /// Enum Returns for value: returns
    /// </summary>
    public static RateDetailType Returns { get; } = new("returns");


    /// <summary>
    /// Enum Notifications for value: notifications
    /// </summary>
    public static RateDetailType Notifications { get; } = new("notifications");


    /// <summary>
    /// Enum Tip for value: tip
    /// </summary>
    public static RateDetailType Tip { get; } = new("tip");


    /// <summary>
    /// Enum DutiesAndTaxes for value: duties_and_taxes
    /// </summary>
    public static RateDetailType DutiesAndTaxes { get; } = new("duties_and_taxes");


    /// <summary>
    /// Enum BrokerageFee for value: brokerage_fee
    /// </summary>
    public static RateDetailType BrokerageFee { get; } = new("brokerage_fee");


    /// <summary>
    /// Enum AdminFee for value: admin_fee
    /// </summary>
    public static RateDetailType AdminFee { get; } = new("admin_fee");


    /// <summary>
    /// Enum Adjustment for value: adjustment
    /// </summary>
    public static RateDetailType Adjustment { get; } = new("adjustment");


    /// <summary>
    /// Get a string representation of the current value
    /// </summary>
    public override string ToString() => _value;

    /// <summary>
    /// Get whether this instance is equal to another instance
    /// </summary>
    public override bool Equals(object? obj) =>
        obj is RateDetailType other && _value == other._value;

    /// <summary>
    /// Get the hash code of the object
    /// </summary>
    public override int GetHashCode() => _value.GetHashCode();
}

internal class RateDetailTypeJsonConverter : JsonConverter<RateDetailType>
{
    public override RateDetailType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) =>
        reader.TokenType == JsonTokenType.String ? new RateDetailType(reader.GetString()!) : null;

    public override void Write(Utf8JsonWriter writer, RateDetailType value, JsonSerializerOptions options) =>
        writer.WriteStringValue(value.ToString());

    public override bool CanConvert(Type typeToConvert) =>
        typeToConvert == typeof(RateDetailType);
}