// <auto-generated />
// DO NOT MODIFY THIS FILE

// Changes can be made in a corresponding partial file, or by changing
// the template in <root>/generation/templates and generating the class again.


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;

namespace ShipEngineSDK.Model;

/// <summary>
/// The possible insurance provider values
/// </summary>
/// <value>The possible insurance provider values</value>
[JsonConverter(typeof(InsuranceProviderJsonConverter))]
public class InsuranceProvider
{
    private readonly string _value;

    /// <summary>
    /// Create a new instance of InsuranceProvider with a predefined value.
    /// </summary>
    internal InsuranceProvider()
    {
        _value = "none";
    }

    /// <summary>
    /// Create a new instance of InsuranceProvider with a custom value.
    /// </summary>
    /// <param name="value">The value of the InsuranceProvider</param>
    /// <remarks>
    /// You can send a custom value to the API using this constructor, but the API most likely won't know what to do with it.
    /// You should use the predefined values returned by the static properties of this class unless you know that the value is value.
    /// </remarks>
    public InsuranceProvider(string value)
    {
        _value = value;
    }

    /// <summary>
    /// Enum None for value: none
    /// </summary>
    public static InsuranceProvider None { get; } = new("none");


    /// <summary>
    /// Enum Shipsurance for value: shipsurance
    /// </summary>
    public static InsuranceProvider Shipsurance { get; } = new("shipsurance");


    /// <summary>
    /// Enum Carrier for value: carrier
    /// </summary>
    public static InsuranceProvider Carrier { get; } = new("carrier");


    /// <summary>
    /// Enum ThirdParty for value: third_party
    /// </summary>
    public static InsuranceProvider ThirdParty { get; } = new("third_party");


    /// <summary>
    /// Get a string representation of the current value
    /// </summary>
    public override string ToString() => _value;

    /// <summary>
    /// Get whether this instance is equal to another instance
    /// </summary>
    public override bool Equals(object? obj) =>
        obj is InsuranceProvider other && _value == other._value;

    /// <summary>
    /// Get the hash code of the object
    /// </summary>
    public override int GetHashCode() => _value.GetHashCode();
}

internal class InsuranceProviderJsonConverter : JsonConverter<InsuranceProvider>
{
    public override InsuranceProvider? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) =>
        reader.TokenType == JsonTokenType.String ? new InsuranceProvider(reader.GetString()!) : null;

    public override void Write(Utf8JsonWriter writer, InsuranceProvider value, JsonSerializerOptions options) =>
        writer.WriteStringValue(value.ToString());

    public override bool CanConvert(Type typeToConvert) =>
        typeToConvert == typeof(InsuranceProvider);
}