/*
 * ShipEngine API
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;

namespace ShipEngineSDK.Model;

/// <summary>
/// Defines packaging_group
/// </summary>
[JsonConverter(typeof(PackagingGroupJsonConverter))]
public class PackagingGroup
{
    private string _value;

    internal PackagingGroup()
    {
        _value = "i";
    }

    /// <summary>
    /// Create a new instance of PackagingGroup with a custom value.
    /// </summary>
    /// <param name="value">The value of the PackagingGroup</param>
    /// <remarks>
    /// You can send a custom value to the API using this constructor, but the API most likely won't know what to do with it.
    /// You should use the predefined values returned by the static properties of this class unless you know that the value is value.
    /// </remarks>
    public PackagingGroup(string value)
    {
        _value = value;
    }

    /// <summary>
    /// Enum I for value: i
    /// </summary>
    public static PackagingGroup I { get; } = new("i");


    /// <summary>
    /// Enum Ii for value: ii
    /// </summary>
    public static PackagingGroup Ii { get; } = new("ii");


    /// <summary>
    /// Enum Iii for value: iii
    /// </summary>
    public static PackagingGroup Iii { get; } = new("iii");


    public override string ToString() => _value;
}

internal class PackagingGroupJsonConverter : JsonConverter<PackagingGroup>
{
    public override PackagingGroup? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) =>
        reader.TokenType == JsonTokenType.String ? new PackagingGroup(reader.GetString()) : null;

    public override void Write(Utf8JsonWriter writer, PackagingGroup value, JsonSerializerOptions options) =>
        writer.WriteStringValue(value.ToString());

    public override bool CanConvert(Type typeToConvert) =>
        typeToConvert == typeof(PackagingGroup);
}