// <auto-generated />
// DO NOT MODIFY THIS FILE

// Changes can be made in a corresponding partial file, or by changing
// the template in <root>/generation/templates and generating the class again.


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.RegularExpressions;

namespace ShipEngineSDK.Model;

/// <summary>
/// PartialShippingAddressToGeolocationInner
/// </summary>
public partial class PartialShippingAddressToGeolocationInner
{
    /// <summary>
    /// Enum of available type of geolocation items:   - &#39;what3words&#39; functionality allows to specify a location by providing 3 words that have been assign to the specific location see [link](https://what3words.com/business) for more details. 
    /// </summary>
    /// <value>Enum of available type of geolocation items:   - &#39;what3words&#39; functionality allows to specify a location by providing 3 words that have been assign to the specific location see [link](https://what3words.com/business) for more details. </value>
    [JsonConverter(typeof(TypeEnumJsonConverter))]
    public class TypeEnum
    {
        private readonly string _value;

        /// <summary>
        /// Create a new instance of TypeEnum with a predefined value.
        /// </summary>
        internal TypeEnum()
        {
            _value = "what3words";
        }

        /// <summary>
        /// Create a new instance of TypeEnum with a custom value.
        /// </summary>
        /// <param name="value">The value of the TypeEnum</param>
        /// <remarks>
        /// You can send a custom value to the API using this constructor, but the API most likely won't know what to do with it.
        /// You should use the predefined values returned by the static properties of this class unless you know that the value is value.
        /// </remarks>
        public TypeEnum(string value)
        {
            _value = value;
        }

        /// <summary>
        /// Enum What3words for value: what3words
        /// </summary>
        public static TypeEnum What3words { get; } = new("what3words");


        /// <summary>
        /// Get a string representation of the current value
        /// </summary>
        public override string ToString() => _value;
    }

    internal class TypeEnumJsonConverter : JsonConverter<TypeEnum>
    {
        public override TypeEnum? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) =>
            reader.TokenType == JsonTokenType.String ? new TypeEnum(reader.GetString()!) : null;

        public override void Write(Utf8JsonWriter writer, TypeEnum value, JsonSerializerOptions options) =>
            writer.WriteStringValue(value.ToString());

        public override bool CanConvert(Type typeToConvert) =>
            typeToConvert == typeof(TypeEnum);
    }


    /// <summary>
    /// Enum of available type of geolocation items:   - &#39;what3words&#39; functionality allows to specify a location by providing 3 words that have been assign to the specific location see [link](https://what3words.com/business) for more details. 
    /// </summary>
    /// <value>Enum of available type of geolocation items:   - &#39;what3words&#39; functionality allows to specify a location by providing 3 words that have been assign to the specific location see [link](https://what3words.com/business) for more details. </value>
    /// <example>
    /// what3words
    /// </example>
    [JsonPropertyName("type"), JsonPropertyOrder(1)]
    public TypeEnum? Type { get; set; }

    /// <summary>
    /// value of the geolocation item
    /// </summary>
    /// <value>value of the geolocation item</value>
    /// <example>
    /// cats.with.thumbs
    /// </example>
    [JsonPropertyName("value"), JsonPropertyOrder(2)]
    public string? Value { get; set; }


    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class PartialShippingAddressToGeolocationInner {\n");
#pragma warning disable CS0612 // Type or member is obsolete
        sb.Append("  Type: ").Append(Type).Append("\n");
        sb.Append("  Value: ").Append(Value).Append("\n");
#pragma warning restore CS0612 // Type or member is obsolete
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson(JsonSerializerOptions options)
    {
        return JsonSerializer.Serialize(this, options);
    }

}