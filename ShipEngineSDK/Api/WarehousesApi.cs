/*
 * ShipEngine API
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using ShipEngineSDK.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace ShipEngineSDK;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial interface IShipEngine
{
    /// <summary>
    /// Create Warehouse Create a warehouse location that you can use to create shipping items by simply passing in the generated warehouse id. If the return address is not supplied in the request body then it is assumed that the origin address is the return address as well 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createWarehouseRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateWarehouseResponseBody)</returns>
    Task<CreateWarehouseResponseBody> CreateWarehouse(CreateWarehouseRequestBody createWarehouseRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Create Warehouse Create a warehouse location that you can use to create shipping items by simply passing in the generated warehouse id. If the return address is not supplied in the request body then it is assumed that the origin address is the return address as well 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createWarehouseRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateWarehouseResponseBody)</returns>
    Task<CreateWarehouseResponseBody> CreateWarehouse(Config methodConfig, CreateWarehouseRequestBody createWarehouseRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Create Warehouse Create a warehouse location that you can use to create shipping items by simply passing in the generated warehouse id. If the return address is not supplied in the request body then it is assumed that the origin address is the return address as well 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createWarehouseRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateWarehouseResponseBody)</returns>
    Task<CreateWarehouseResponseBody> CreateWarehouse(HttpClient methodClient, Config methodConfig, CreateWarehouseRequestBody createWarehouseRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Delete Warehouse By ID Delete a warehouse by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> DeleteWarehouse(string warehouseId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Delete Warehouse By ID Delete a warehouse by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> DeleteWarehouse(Config methodConfig, string warehouseId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Delete Warehouse By ID Delete a warehouse by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> DeleteWarehouse(HttpClient methodClient, Config methodConfig, string warehouseId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Warehouse By Id Retrieve warehouse data based on the warehouse ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetWarehouseByIdResponseBody)</returns>
    Task<GetWarehouseByIdResponseBody> GetWarehouseById(string warehouseId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Warehouse By Id Retrieve warehouse data based on the warehouse ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetWarehouseByIdResponseBody)</returns>
    Task<GetWarehouseByIdResponseBody> GetWarehouseById(Config methodConfig, string warehouseId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Warehouse By Id Retrieve warehouse data based on the warehouse ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetWarehouseByIdResponseBody)</returns>
    Task<GetWarehouseByIdResponseBody> GetWarehouseById(HttpClient methodClient, Config methodConfig, string warehouseId, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Warehouses Retrieve a list of warehouses associated with this account.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListWarehousesResponseBody)</returns>
    Task<ListWarehousesResponseBody> ListWarehouses(CancellationToken cancellationToken = default);

    /// <summary>
    /// List Warehouses Retrieve a list of warehouses associated with this account.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListWarehousesResponseBody)</returns>
    Task<ListWarehousesResponseBody> ListWarehouses(Config methodConfig, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Warehouses Retrieve a list of warehouses associated with this account.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListWarehousesResponseBody)</returns>
    Task<ListWarehousesResponseBody> ListWarehouses(HttpClient methodClient, Config methodConfig, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Warehouse By Id Update Warehouse object information
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="updateWarehouseRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> UpdateWarehouse(string warehouseId, UpdateWarehouseRequestBody updateWarehouseRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Warehouse By Id Update Warehouse object information
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="updateWarehouseRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> UpdateWarehouse(Config methodConfig, string warehouseId, UpdateWarehouseRequestBody updateWarehouseRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Warehouse By Id Update Warehouse object information
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="updateWarehouseRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> UpdateWarehouse(HttpClient methodClient, Config methodConfig, string warehouseId, UpdateWarehouseRequestBody updateWarehouseRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Warehouse Settings Update Warehouse settings object information
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="updateWarehouseSettingsRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> UpdateWarehouseSettings(string warehouseId, UpdateWarehouseSettingsRequestBody updateWarehouseSettingsRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Warehouse Settings Update Warehouse settings object information
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="updateWarehouseSettingsRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> UpdateWarehouseSettings(Config methodConfig, string warehouseId, UpdateWarehouseSettingsRequestBody updateWarehouseSettingsRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Warehouse Settings Update Warehouse settings object information
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="updateWarehouseSettingsRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> UpdateWarehouseSettings(HttpClient methodClient, Config methodConfig, string warehouseId, UpdateWarehouseSettingsRequestBody updateWarehouseSettingsRequestBody, CancellationToken cancellationToken = default);

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class ShipEngine
{
    /// <summary>
    /// Create Warehouse Create a warehouse location that you can use to create shipping items by simply passing in the generated warehouse id. If the return address is not supplied in the request body then it is assumed that the origin address is the return address as well 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createWarehouseRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateWarehouseResponseBody)</returns>
    public Task<CreateWarehouseResponseBody> CreateWarehouse(CreateWarehouseRequestBody createWarehouseRequestBody, CancellationToken cancellationToken = default)
    {
        return CreateWarehouse(_client, _config, createWarehouseRequestBody, cancellationToken);
    }

    /// <summary>
    /// Create Warehouse Create a warehouse location that you can use to create shipping items by simply passing in the generated warehouse id. If the return address is not supplied in the request body then it is assumed that the origin address is the return address as well 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createWarehouseRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateWarehouseResponseBody)</returns>
    public async Task<CreateWarehouseResponseBody> CreateWarehouse(Config methodConfig, CreateWarehouseRequestBody createWarehouseRequestBody, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await CreateWarehouse(methodClient, methodConfig, createWarehouseRequestBody, cancellationToken);
    }

    /// <summary>
    /// Create Warehouse Create a warehouse location that you can use to create shipping items by simply passing in the generated warehouse id. If the return address is not supplied in the request body then it is assumed that the origin address is the return address as well 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createWarehouseRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateWarehouseResponseBody)</returns>
    public async Task<CreateWarehouseResponseBody> CreateWarehouse(HttpClient methodClient, Config methodConfig, CreateWarehouseRequestBody createWarehouseRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'createWarehouseRequestBody' is set
        if (createWarehouseRequestBody == null)
        {
            throw new ArgumentNullException(nameof(createWarehouseRequestBody));
        }


        RequestOptions requestOptions = new("/v1/warehouses");

        requestOptions.Data = JsonSerializer.Serialize(createWarehouseRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "WarehousesApi.CreateWarehouse";

        var result = await SendHttpRequestAsync<CreateWarehouseResponseBody>(HttpMethods.Post, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Delete Warehouse By ID Delete a warehouse by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public Task<string> DeleteWarehouse(string warehouseId, CancellationToken cancellationToken = default)
    {
        return DeleteWarehouse(_client, _config, warehouseId, cancellationToken);
    }

    /// <summary>
    /// Delete Warehouse By ID Delete a warehouse by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> DeleteWarehouse(Config methodConfig, string warehouseId, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await DeleteWarehouse(methodClient, methodConfig, warehouseId, cancellationToken);
    }

    /// <summary>
    /// Delete Warehouse By ID Delete a warehouse by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> DeleteWarehouse(HttpClient methodClient, Config methodConfig, string warehouseId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'warehouseId' is set
        if (warehouseId == null)
        {
            throw new ArgumentNullException(nameof(warehouseId));
        }


        RequestOptions requestOptions = new("/v1/warehouses/{warehouse_id}");

        requestOptions.PathParameters.Add("warehouse_id", ShipEngineSDK.Client.ClientUtils.ParameterToString(warehouseId)); // path parameter

        requestOptions.Operation = "WarehousesApi.DeleteWarehouse";

        var result = await SendHttpRequestAsync<string>(HttpMethods.Delete, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Get Warehouse By Id Retrieve warehouse data based on the warehouse ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetWarehouseByIdResponseBody)</returns>
    public Task<GetWarehouseByIdResponseBody> GetWarehouseById(string warehouseId, CancellationToken cancellationToken = default)
    {
        return GetWarehouseById(_client, _config, warehouseId, cancellationToken);
    }

    /// <summary>
    /// Get Warehouse By Id Retrieve warehouse data based on the warehouse ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetWarehouseByIdResponseBody)</returns>
    public async Task<GetWarehouseByIdResponseBody> GetWarehouseById(Config methodConfig, string warehouseId, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await GetWarehouseById(methodClient, methodConfig, warehouseId, cancellationToken);
    }

    /// <summary>
    /// Get Warehouse By Id Retrieve warehouse data based on the warehouse ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetWarehouseByIdResponseBody)</returns>
    public async Task<GetWarehouseByIdResponseBody> GetWarehouseById(HttpClient methodClient, Config methodConfig, string warehouseId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'warehouseId' is set
        if (warehouseId == null)
        {
            throw new ArgumentNullException(nameof(warehouseId));
        }


        RequestOptions requestOptions = new("/v1/warehouses/{warehouse_id}");

        requestOptions.PathParameters.Add("warehouse_id", ShipEngineSDK.Client.ClientUtils.ParameterToString(warehouseId)); // path parameter

        requestOptions.Operation = "WarehousesApi.GetWarehouseById";

        var result = await SendHttpRequestAsync<GetWarehouseByIdResponseBody>(HttpMethods.Get, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// List Warehouses Retrieve a list of warehouses associated with this account.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListWarehousesResponseBody)</returns>
    public Task<ListWarehousesResponseBody> ListWarehouses(CancellationToken cancellationToken = default)
    {
        return ListWarehouses(_client, _config, cancellationToken);
    }

    /// <summary>
    /// List Warehouses Retrieve a list of warehouses associated with this account.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListWarehousesResponseBody)</returns>
    public async Task<ListWarehousesResponseBody> ListWarehouses(Config methodConfig, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await ListWarehouses(methodClient, methodConfig, cancellationToken);
    }

    /// <summary>
    /// List Warehouses Retrieve a list of warehouses associated with this account.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListWarehousesResponseBody)</returns>
    public async Task<ListWarehousesResponseBody> ListWarehouses(HttpClient methodClient, Config methodConfig, CancellationToken cancellationToken = default)
    {

        RequestOptions requestOptions = new("/v1/warehouses");


        requestOptions.Operation = "WarehousesApi.ListWarehouses";

        var result = await SendHttpRequestAsync<ListWarehousesResponseBody>(HttpMethods.Get, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Update Warehouse By Id Update Warehouse object information
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="updateWarehouseRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public Task<string> UpdateWarehouse(string warehouseId, UpdateWarehouseRequestBody updateWarehouseRequestBody, CancellationToken cancellationToken = default)
    {
        return UpdateWarehouse(_client, _config, warehouseId, updateWarehouseRequestBody, cancellationToken);
    }

    /// <summary>
    /// Update Warehouse By Id Update Warehouse object information
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="updateWarehouseRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> UpdateWarehouse(Config methodConfig, string warehouseId, UpdateWarehouseRequestBody updateWarehouseRequestBody, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await UpdateWarehouse(methodClient, methodConfig, warehouseId, updateWarehouseRequestBody, cancellationToken);
    }

    /// <summary>
    /// Update Warehouse By Id Update Warehouse object information
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="updateWarehouseRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> UpdateWarehouse(HttpClient methodClient, Config methodConfig, string warehouseId, UpdateWarehouseRequestBody updateWarehouseRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'warehouseId' is set
        if (warehouseId == null)
        {
            throw new ArgumentNullException(nameof(warehouseId));
        }

        // verify the required parameter 'updateWarehouseRequestBody' is set
        if (updateWarehouseRequestBody == null)
        {
            throw new ArgumentNullException(nameof(updateWarehouseRequestBody));
        }


        RequestOptions requestOptions = new("/v1/warehouses/{warehouse_id}");

        requestOptions.PathParameters.Add("warehouse_id", ShipEngineSDK.Client.ClientUtils.ParameterToString(warehouseId)); // path parameter
        requestOptions.Data = JsonSerializer.Serialize(updateWarehouseRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "WarehousesApi.UpdateWarehouse";

        var result = await SendHttpRequestAsync<string>(HttpMethods.Put, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Update Warehouse Settings Update Warehouse settings object information
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="updateWarehouseSettingsRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public Task<string> UpdateWarehouseSettings(string warehouseId, UpdateWarehouseSettingsRequestBody updateWarehouseSettingsRequestBody, CancellationToken cancellationToken = default)
    {
        return UpdateWarehouseSettings(_client, _config, warehouseId, updateWarehouseSettingsRequestBody, cancellationToken);
    }

    /// <summary>
    /// Update Warehouse Settings Update Warehouse settings object information
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="updateWarehouseSettingsRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> UpdateWarehouseSettings(Config methodConfig, string warehouseId, UpdateWarehouseSettingsRequestBody updateWarehouseSettingsRequestBody, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await UpdateWarehouseSettings(methodClient, methodConfig, warehouseId, updateWarehouseSettingsRequestBody, cancellationToken);
    }

    /// <summary>
    /// Update Warehouse Settings Update Warehouse settings object information
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="warehouseId">Warehouse ID</param>
    /// <param name="updateWarehouseSettingsRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> UpdateWarehouseSettings(HttpClient methodClient, Config methodConfig, string warehouseId, UpdateWarehouseSettingsRequestBody updateWarehouseSettingsRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'warehouseId' is set
        if (warehouseId == null)
        {
            throw new ArgumentNullException(nameof(warehouseId));
        }

        // verify the required parameter 'updateWarehouseSettingsRequestBody' is set
        if (updateWarehouseSettingsRequestBody == null)
        {
            throw new ArgumentNullException(nameof(updateWarehouseSettingsRequestBody));
        }


        RequestOptions requestOptions = new("/v1/warehouses/{warehouse_id}/settings");

        requestOptions.PathParameters.Add("warehouse_id", ShipEngineSDK.Client.ClientUtils.ParameterToString(warehouseId)); // path parameter
        requestOptions.Data = JsonSerializer.Serialize(updateWarehouseSettingsRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "WarehousesApi.UpdateWarehouseSettings";

        var result = await SendHttpRequestAsync<string>(HttpMethods.Put, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

}