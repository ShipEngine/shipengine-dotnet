// <auto-generated />
// DO NOT MODIFY THIS FILE

// Changes can be made in a corresponding partial file, or by changing
// the template in <root>/generation/templates and generating the class again.


using ShipEngineSDK.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace ShipEngineSDK;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial interface IShipEngine
{
    /// <summary>
    /// Create a New Tag Create a new Tag for customizing how you track your shipments
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="tagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (CreateTagResponseBody)</returns>
    Task<ShipEngineResponse<CreateTagResponseBody>> CreateTag(string tagName, CancellationToken cancellationToken = default);

    /// <summary>
    /// Create a New Tag Create a new Tag for customizing how you track your shipments
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="tagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (CreateTagResponseBody)</returns>
    Task<ShipEngineResponse<CreateTagResponseBody>> CreateTag(HttpClient methodClient, string tagName, CancellationToken cancellationToken = default);

    /// <summary>
    /// Delete Tag Delete a tag that is no longer needed
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="tagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    Task<ShipEngineResponse<string>> DeleteTag(string tagName, CancellationToken cancellationToken = default);

    /// <summary>
    /// Delete Tag Delete a tag that is no longer needed
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="tagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    Task<ShipEngineResponse<string>> DeleteTag(HttpClient methodClient, string tagName, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Tags Get a list of all tags associated with an account.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListTagsResponseBody)</returns>
    Task<ShipEngineResponse<ListTagsResponseBody>> ListTags(CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Tags Get a list of all tags associated with an account.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListTagsResponseBody)</returns>
    Task<ShipEngineResponse<ListTagsResponseBody>> ListTags(HttpClient methodClient, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Tag Name Change a tag name while still keeping the relevant shipments attached to it
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="tagName"></param>
    /// <param name="newTagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    Task<ShipEngineResponse<string>> RenameTag(string tagName, string newTagName, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Tag Name Change a tag name while still keeping the relevant shipments attached to it
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="tagName"></param>
    /// <param name="newTagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    Task<ShipEngineResponse<string>> RenameTag(HttpClient methodClient, string tagName, string newTagName, CancellationToken cancellationToken = default);

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class ShipEngine
{
    /// <summary>
    /// Create a New Tag Create a new Tag for customizing how you track your shipments
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="tagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (CreateTagResponseBody)</returns>
    public Task<ShipEngineResponse<CreateTagResponseBody>> CreateTag(string tagName, CancellationToken cancellationToken = default)
    {
        return CreateTag(_client, tagName, cancellationToken);
    }

    /// <summary>
    /// Create a New Tag Create a new Tag for customizing how you track your shipments
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="tagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (CreateTagResponseBody)</returns>
    public async Task<ShipEngineResponse<CreateTagResponseBody>> CreateTag(HttpClient methodClient, string tagName, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'tagName' is set
        if (tagName == null)
        {
            throw new ArgumentNullException(nameof(tagName));
        }


        RequestOptions requestOptions = new("/v1/tags/{tag_name}");

        requestOptions.PathParameters.Add("tag_name", ClientUtils.ParameterToString(tagName)); // path parameter

        requestOptions.Operation = "TagsApi.CreateTag";

        var (data, response) = await GetHttpResponse<CreateTagResponseBody>(HttpMethods.Post, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
        var headers = response.Headers.ToDictionary(h => h.Key, h => h.Value.FirstOrDefault(),
            StringComparer.InvariantCultureIgnoreCase);
        return new ShipEngineResponse<CreateTagResponseBody>(data, response.StatusCode, headers);
    }

    /// <summary>
    /// Delete Tag Delete a tag that is no longer needed
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="tagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    public Task<ShipEngineResponse<string>> DeleteTag(string tagName, CancellationToken cancellationToken = default)
    {
        return DeleteTag(_client, tagName, cancellationToken);
    }

    /// <summary>
    /// Delete Tag Delete a tag that is no longer needed
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="tagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    public async Task<ShipEngineResponse<string>> DeleteTag(HttpClient methodClient, string tagName, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'tagName' is set
        if (tagName == null)
        {
            throw new ArgumentNullException(nameof(tagName));
        }


        RequestOptions requestOptions = new("/v1/tags/{tag_name}");

        requestOptions.PathParameters.Add("tag_name", ClientUtils.ParameterToString(tagName)); // path parameter

        requestOptions.Operation = "TagsApi.DeleteTag";

        var (data, response) = await GetHttpResponse<string>(HttpMethods.Delete, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
        var headers = response.Headers.ToDictionary(h => h.Key, h => h.Value.FirstOrDefault(),
            StringComparer.InvariantCultureIgnoreCase);
        return new ShipEngineResponse<string>(data, response.StatusCode, headers);
    }

    /// <summary>
    /// Get Tags Get a list of all tags associated with an account.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListTagsResponseBody)</returns>
    public Task<ShipEngineResponse<ListTagsResponseBody>> ListTags(CancellationToken cancellationToken = default)
    {
        return ListTags(_client, cancellationToken);
    }

    /// <summary>
    /// Get Tags Get a list of all tags associated with an account.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListTagsResponseBody)</returns>
    public async Task<ShipEngineResponse<ListTagsResponseBody>> ListTags(HttpClient methodClient, CancellationToken cancellationToken = default)
    {

        RequestOptions requestOptions = new("/v1/tags");


        requestOptions.Operation = "TagsApi.ListTags";

        var (data, response) = await GetHttpResponse<ListTagsResponseBody>(HttpMethods.Get, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
        var headers = response.Headers.ToDictionary(h => h.Key, h => h.Value.FirstOrDefault(),
            StringComparer.InvariantCultureIgnoreCase);
        return new ShipEngineResponse<ListTagsResponseBody>(data, response.StatusCode, headers);
    }

    /// <summary>
    /// Update Tag Name Change a tag name while still keeping the relevant shipments attached to it
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="tagName"></param>
    /// <param name="newTagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    public Task<ShipEngineResponse<string>> RenameTag(string tagName, string newTagName, CancellationToken cancellationToken = default)
    {
        return RenameTag(_client, tagName, newTagName, cancellationToken);
    }

    /// <summary>
    /// Update Tag Name Change a tag name while still keeping the relevant shipments attached to it
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="tagName"></param>
    /// <param name="newTagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    public async Task<ShipEngineResponse<string>> RenameTag(HttpClient methodClient, string tagName, string newTagName, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'tagName' is set
        if (tagName == null)
        {
            throw new ArgumentNullException(nameof(tagName));
        }

        // verify the required parameter 'newTagName' is set
        if (newTagName == null)
        {
            throw new ArgumentNullException(nameof(newTagName));
        }


        RequestOptions requestOptions = new("/v1/tags/{tag_name}/{new_tag_name}");

        requestOptions.PathParameters.Add("tag_name", ClientUtils.ParameterToString(tagName)); // path parameter
        requestOptions.PathParameters.Add("new_tag_name", ClientUtils.ParameterToString(newTagName)); // path parameter

        requestOptions.Operation = "TagsApi.RenameTag";

        var (data, response) = await GetHttpResponse<string>(HttpMethods.Put, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
        var headers = response.Headers.ToDictionary(h => h.Key, h => h.Value.FirstOrDefault(),
            StringComparer.InvariantCultureIgnoreCase);
        return new ShipEngineResponse<string>(data, response.StatusCode, headers);
    }

}
