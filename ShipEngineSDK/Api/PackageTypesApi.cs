/*
 * ShipEngine API
 *
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others.  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using ShipEngineSDK.Model;

namespace ShipEngineSDK;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial interface IShipEngine
{
    /// <summary>
    /// Create Custom Package Type Create a custom package type to better assist in getting accurate rate estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createPackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreatePackageTypeResponseBody)</returns>
    Task<CreatePackageTypeResponseBody> CreatePackageType(CreatePackageTypeRequestBody createPackageTypeRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Create Custom Package Type Create a custom package type to better assist in getting accurate rate estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createPackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreatePackageTypeResponseBody)</returns>
    Task<CreatePackageTypeResponseBody> CreatePackageType(Config methodConfig, CreatePackageTypeRequestBody createPackageTypeRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Create Custom Package Type Create a custom package type to better assist in getting accurate rate estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createPackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreatePackageTypeResponseBody)</returns>
    Task<CreatePackageTypeResponseBody> CreatePackageType(HttpClient methodClient, Config methodConfig, CreatePackageTypeRequestBody createPackageTypeRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Delete A Custom Package By ID Delete a custom package using the ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> DeletePackageType(string packageId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Delete A Custom Package By ID Delete a custom package using the ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> DeletePackageType(Config methodConfig, string packageId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Delete A Custom Package By ID Delete a custom package using the ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> DeletePackageType(HttpClient methodClient, Config methodConfig, string packageId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Custom Package Type By ID Get Custom Package Type by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetPackageTypeByIdResponseBody)</returns>
    Task<GetPackageTypeByIdResponseBody> GetPackageTypeById(string packageId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Custom Package Type By ID Get Custom Package Type by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetPackageTypeByIdResponseBody)</returns>
    Task<GetPackageTypeByIdResponseBody> GetPackageTypeById(Config methodConfig, string packageId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Custom Package Type By ID Get Custom Package Type by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetPackageTypeByIdResponseBody)</returns>
    Task<GetPackageTypeByIdResponseBody> GetPackageTypeById(HttpClient methodClient, Config methodConfig, string packageId, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Custom Package Types List the custom package types associated with the account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListPackageTypesResponseBody)</returns>
    Task<ListPackageTypesResponseBody> ListPackageTypes(CancellationToken cancellationToken = default);

    /// <summary>
    /// List Custom Package Types List the custom package types associated with the account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListPackageTypesResponseBody)</returns>
    Task<ListPackageTypesResponseBody> ListPackageTypes(Config methodConfig, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Custom Package Types List the custom package types associated with the account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListPackageTypesResponseBody)</returns>
    Task<ListPackageTypesResponseBody> ListPackageTypes(HttpClient methodClient, Config methodConfig, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Custom Package Type By ID Update the custom package type object by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="updatePackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> UpdatePackageType(string packageId, UpdatePackageTypeRequestBody updatePackageTypeRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Custom Package Type By ID Update the custom package type object by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="updatePackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> UpdatePackageType(Config methodConfig, string packageId, UpdatePackageTypeRequestBody updatePackageTypeRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Custom Package Type By ID Update the custom package type object by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="updatePackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> UpdatePackageType(HttpClient methodClient, Config methodConfig, string packageId, UpdatePackageTypeRequestBody updatePackageTypeRequestBody, CancellationToken cancellationToken = default);

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class ShipEngine
{
    /// <summary>
    /// Create Custom Package Type Create a custom package type to better assist in getting accurate rate estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createPackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreatePackageTypeResponseBody)</returns>
    public Task<CreatePackageTypeResponseBody> CreatePackageType(CreatePackageTypeRequestBody createPackageTypeRequestBody, CancellationToken cancellationToken = default)
    {
        return CreatePackageType(_client, _config, createPackageTypeRequestBody, cancellationToken);
    }

    /// <summary>
    /// Create Custom Package Type Create a custom package type to better assist in getting accurate rate estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createPackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreatePackageTypeResponseBody)</returns>
    public async Task<CreatePackageTypeResponseBody> CreatePackageType(Config methodConfig, CreatePackageTypeRequestBody createPackageTypeRequestBody, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await CreatePackageType(methodClient, methodConfig, createPackageTypeRequestBody, cancellationToken);
    }

    /// <summary>
    /// Create Custom Package Type Create a custom package type to better assist in getting accurate rate estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createPackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreatePackageTypeResponseBody)</returns>
    public async Task<CreatePackageTypeResponseBody> CreatePackageType(HttpClient methodClient, Config methodConfig, CreatePackageTypeRequestBody createPackageTypeRequestBody, CancellationToken cancellationToken = default)
    {
        
        // verify the required parameter 'createPackageTypeRequestBody' is set
        if (createPackageTypeRequestBody == null)
        {
            throw new ArgumentNullException(nameof(createPackageTypeRequestBody));
        }


        RequestOptions requestOptions = new("/v1/packages");

        requestOptions.Data = JsonSerializer.Serialize(createPackageTypeRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "PackageTypesApi.CreatePackageType";

        var result = await SendHttpRequestAsync<CreatePackageTypeResponseBody>(HttpMethods.Post, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Delete A Custom Package By ID Delete a custom package using the ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public Task<string> DeletePackageType(string packageId, CancellationToken cancellationToken = default)
    {
        return DeletePackageType(_client, _config, packageId, cancellationToken);
    }

    /// <summary>
    /// Delete A Custom Package By ID Delete a custom package using the ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> DeletePackageType(Config methodConfig, string packageId, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await DeletePackageType(methodClient, methodConfig, packageId, cancellationToken);
    }

    /// <summary>
    /// Delete A Custom Package By ID Delete a custom package using the ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> DeletePackageType(HttpClient methodClient, Config methodConfig, string packageId, CancellationToken cancellationToken = default)
    {
        
        // verify the required parameter 'packageId' is set
        if (packageId == null)
        {
            throw new ArgumentNullException(nameof(packageId));
        }


        RequestOptions requestOptions = new("/v1/packages/{package_id}");

        requestOptions.PathParameters.Add("package_id", ShipEngineSDK.Client.ClientUtils.ParameterToString(packageId)); // path parameter

        requestOptions.Operation = "PackageTypesApi.DeletePackageType";

        var result = await SendHttpRequestAsync<string>(HttpMethods.Delete, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Get Custom Package Type By ID Get Custom Package Type by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetPackageTypeByIdResponseBody)</returns>
    public Task<GetPackageTypeByIdResponseBody> GetPackageTypeById(string packageId, CancellationToken cancellationToken = default)
    {
        return GetPackageTypeById(_client, _config, packageId, cancellationToken);
    }

    /// <summary>
    /// Get Custom Package Type By ID Get Custom Package Type by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetPackageTypeByIdResponseBody)</returns>
    public async Task<GetPackageTypeByIdResponseBody> GetPackageTypeById(Config methodConfig, string packageId, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await GetPackageTypeById(methodClient, methodConfig, packageId, cancellationToken);
    }

    /// <summary>
    /// Get Custom Package Type By ID Get Custom Package Type by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetPackageTypeByIdResponseBody)</returns>
    public async Task<GetPackageTypeByIdResponseBody> GetPackageTypeById(HttpClient methodClient, Config methodConfig, string packageId, CancellationToken cancellationToken = default)
    {
        
        // verify the required parameter 'packageId' is set
        if (packageId == null)
        {
            throw new ArgumentNullException(nameof(packageId));
        }


        RequestOptions requestOptions = new("/v1/packages/{package_id}");

        requestOptions.PathParameters.Add("package_id", ShipEngineSDK.Client.ClientUtils.ParameterToString(packageId)); // path parameter

        requestOptions.Operation = "PackageTypesApi.GetPackageTypeById";

        var result = await SendHttpRequestAsync<GetPackageTypeByIdResponseBody>(HttpMethods.Get, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// List Custom Package Types List the custom package types associated with the account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListPackageTypesResponseBody)</returns>
    public Task<ListPackageTypesResponseBody> ListPackageTypes(CancellationToken cancellationToken = default)
    {
        return ListPackageTypes(_client, _config, cancellationToken);
    }

    /// <summary>
    /// List Custom Package Types List the custom package types associated with the account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListPackageTypesResponseBody)</returns>
    public async Task<ListPackageTypesResponseBody> ListPackageTypes(Config methodConfig, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await ListPackageTypes(methodClient, methodConfig, cancellationToken);
    }

    /// <summary>
    /// List Custom Package Types List the custom package types associated with the account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListPackageTypesResponseBody)</returns>
    public async Task<ListPackageTypesResponseBody> ListPackageTypes(HttpClient methodClient, Config methodConfig, CancellationToken cancellationToken = default)
    {
        

        RequestOptions requestOptions = new("/v1/packages");


        requestOptions.Operation = "PackageTypesApi.ListPackageTypes";

        var result = await SendHttpRequestAsync<ListPackageTypesResponseBody>(HttpMethods.Get, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Update Custom Package Type By ID Update the custom package type object by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="updatePackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public Task<string> UpdatePackageType(string packageId, UpdatePackageTypeRequestBody updatePackageTypeRequestBody, CancellationToken cancellationToken = default)
    {
        return UpdatePackageType(_client, _config, packageId, updatePackageTypeRequestBody, cancellationToken);
    }

    /// <summary>
    /// Update Custom Package Type By ID Update the custom package type object by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="updatePackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> UpdatePackageType(Config methodConfig, string packageId, UpdatePackageTypeRequestBody updatePackageTypeRequestBody, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await UpdatePackageType(methodClient, methodConfig, packageId, updatePackageTypeRequestBody, cancellationToken);
    }

    /// <summary>
    /// Update Custom Package Type By ID Update the custom package type object by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="updatePackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> UpdatePackageType(HttpClient methodClient, Config methodConfig, string packageId, UpdatePackageTypeRequestBody updatePackageTypeRequestBody, CancellationToken cancellationToken = default)
    {
        
        // verify the required parameter 'packageId' is set
        if (packageId == null)
        {
            throw new ArgumentNullException(nameof(packageId));
        }

        // verify the required parameter 'updatePackageTypeRequestBody' is set
        if (updatePackageTypeRequestBody == null)
        {
            throw new ArgumentNullException(nameof(updatePackageTypeRequestBody));
        }


        RequestOptions requestOptions = new("/v1/packages/{package_id}");

        requestOptions.PathParameters.Add("package_id", ShipEngineSDK.Client.ClientUtils.ParameterToString(packageId)); // path parameter
        requestOptions.Data = JsonSerializer.Serialize(updatePackageTypeRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "PackageTypesApi.UpdatePackageType";

        var result = await SendHttpRequestAsync<string>(HttpMethods.Put, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

}
