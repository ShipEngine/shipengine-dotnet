/*
 * ShipEngine API
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using ShipEngineSDK.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace ShipEngineSDK;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial interface IShipEngine
{
    /// <summary>
    /// Create Custom Package Type Create a custom package type to better assist in getting accurate rate estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createPackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreatePackageTypeResponseBody)</returns>
    Task<CreatePackageTypeResponseBody> CreatePackageType(CreatePackageTypeRequestBody createPackageTypeRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Create Custom Package Type Create a custom package type to better assist in getting accurate rate estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="createPackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreatePackageTypeResponseBody)</returns>
    Task<CreatePackageTypeResponseBody> CreatePackageType(HttpClient methodClient, CreatePackageTypeRequestBody createPackageTypeRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Delete A Custom Package By ID Delete a custom package using the ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> DeletePackageType(string packageId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Delete A Custom Package By ID Delete a custom package using the ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> DeletePackageType(HttpClient methodClient, string packageId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Custom Package Type By ID Get Custom Package Type by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetPackageTypeByIdResponseBody)</returns>
    Task<GetPackageTypeByIdResponseBody> GetPackageTypeById(string packageId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Custom Package Type By ID Get Custom Package Type by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetPackageTypeByIdResponseBody)</returns>
    Task<GetPackageTypeByIdResponseBody> GetPackageTypeById(HttpClient methodClient, string packageId, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Custom Package Types List the custom package types associated with the account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListPackageTypesResponseBody)</returns>
    Task<ListPackageTypesResponseBody> ListPackageTypes(CancellationToken cancellationToken = default);

    /// <summary>
    /// List Custom Package Types List the custom package types associated with the account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListPackageTypesResponseBody)</returns>
    Task<ListPackageTypesResponseBody> ListPackageTypes(HttpClient methodClient, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Custom Package Type By ID Update the custom package type object by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="updatePackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> UpdatePackageType(string packageId, UpdatePackageTypeRequestBody updatePackageTypeRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Custom Package Type By ID Update the custom package type object by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="packageId">Package ID</param>
    /// <param name="updatePackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> UpdatePackageType(HttpClient methodClient, string packageId, UpdatePackageTypeRequestBody updatePackageTypeRequestBody, CancellationToken cancellationToken = default);

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class ShipEngine
{
    /// <summary>
    /// Create Custom Package Type Create a custom package type to better assist in getting accurate rate estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createPackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreatePackageTypeResponseBody)</returns>
    public Task<CreatePackageTypeResponseBody> CreatePackageType(CreatePackageTypeRequestBody createPackageTypeRequestBody, CancellationToken cancellationToken = default)
    {
        return CreatePackageType(_client, createPackageTypeRequestBody, cancellationToken);
    }

    /// <summary>
    /// Create Custom Package Type Create a custom package type to better assist in getting accurate rate estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="createPackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreatePackageTypeResponseBody)</returns>
    public async Task<CreatePackageTypeResponseBody> CreatePackageType(HttpClient methodClient, CreatePackageTypeRequestBody createPackageTypeRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'createPackageTypeRequestBody' is set
        if (createPackageTypeRequestBody == null)
        {
            throw new ArgumentNullException(nameof(createPackageTypeRequestBody));
        }


        RequestOptions requestOptions = new("/v1/packages");

        requestOptions.Data = JsonSerializer.Serialize(createPackageTypeRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "PackageTypesApi.CreatePackageType";

        var result = await SendHttpRequestAsync<CreatePackageTypeResponseBody>(HttpMethods.Post, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// Delete A Custom Package By ID Delete a custom package using the ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public Task<string> DeletePackageType(string packageId, CancellationToken cancellationToken = default)
    {
        return DeletePackageType(_client, packageId, cancellationToken);
    }

    /// <summary>
    /// Delete A Custom Package By ID Delete a custom package using the ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> DeletePackageType(HttpClient methodClient, string packageId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'packageId' is set
        if (packageId == null)
        {
            throw new ArgumentNullException(nameof(packageId));
        }


        RequestOptions requestOptions = new("/v1/packages/{package_id}");

        requestOptions.PathParameters.Add("package_id", ShipEngineSDK.ClientUtils.ParameterToString(packageId)); // path parameter

        requestOptions.Operation = "PackageTypesApi.DeletePackageType";

        var result = await SendHttpRequestAsync<string>(HttpMethods.Delete, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// Get Custom Package Type By ID Get Custom Package Type by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetPackageTypeByIdResponseBody)</returns>
    public Task<GetPackageTypeByIdResponseBody> GetPackageTypeById(string packageId, CancellationToken cancellationToken = default)
    {
        return GetPackageTypeById(_client, packageId, cancellationToken);
    }

    /// <summary>
    /// Get Custom Package Type By ID Get Custom Package Type by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="packageId">Package ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetPackageTypeByIdResponseBody)</returns>
    public async Task<GetPackageTypeByIdResponseBody> GetPackageTypeById(HttpClient methodClient, string packageId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'packageId' is set
        if (packageId == null)
        {
            throw new ArgumentNullException(nameof(packageId));
        }


        RequestOptions requestOptions = new("/v1/packages/{package_id}");

        requestOptions.PathParameters.Add("package_id", ShipEngineSDK.ClientUtils.ParameterToString(packageId)); // path parameter

        requestOptions.Operation = "PackageTypesApi.GetPackageTypeById";

        var result = await SendHttpRequestAsync<GetPackageTypeByIdResponseBody>(HttpMethods.Get, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// List Custom Package Types List the custom package types associated with the account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListPackageTypesResponseBody)</returns>
    public Task<ListPackageTypesResponseBody> ListPackageTypes(CancellationToken cancellationToken = default)
    {
        return ListPackageTypes(_client, cancellationToken);
    }

    /// <summary>
    /// List Custom Package Types List the custom package types associated with the account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListPackageTypesResponseBody)</returns>
    public async Task<ListPackageTypesResponseBody> ListPackageTypes(HttpClient methodClient, CancellationToken cancellationToken = default)
    {

        RequestOptions requestOptions = new("/v1/packages");


        requestOptions.Operation = "PackageTypesApi.ListPackageTypes";

        var result = await SendHttpRequestAsync<ListPackageTypesResponseBody>(HttpMethods.Get, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// Update Custom Package Type By ID Update the custom package type object by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="packageId">Package ID</param>
    /// <param name="updatePackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public Task<string> UpdatePackageType(string packageId, UpdatePackageTypeRequestBody updatePackageTypeRequestBody, CancellationToken cancellationToken = default)
    {
        return UpdatePackageType(_client, packageId, updatePackageTypeRequestBody, cancellationToken);
    }

    /// <summary>
    /// Update Custom Package Type By ID Update the custom package type object by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="packageId">Package ID</param>
    /// <param name="updatePackageTypeRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> UpdatePackageType(HttpClient methodClient, string packageId, UpdatePackageTypeRequestBody updatePackageTypeRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'packageId' is set
        if (packageId == null)
        {
            throw new ArgumentNullException(nameof(packageId));
        }

        // verify the required parameter 'updatePackageTypeRequestBody' is set
        if (updatePackageTypeRequestBody == null)
        {
            throw new ArgumentNullException(nameof(updatePackageTypeRequestBody));
        }


        RequestOptions requestOptions = new("/v1/packages/{package_id}");

        requestOptions.PathParameters.Add("package_id", ShipEngineSDK.ClientUtils.ParameterToString(packageId)); // path parameter
        requestOptions.Data = JsonSerializer.Serialize(updatePackageTypeRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "PackageTypesApi.UpdatePackageType";

        var result = await SendHttpRequestAsync<string>(HttpMethods.Put, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

}