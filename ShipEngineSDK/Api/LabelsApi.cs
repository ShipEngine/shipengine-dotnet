/*
 * ShipEngine API
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using ShipEngineSDK.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace ShipEngineSDK;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial interface IShipEngine
{
    /// <summary>
    /// Purchase Label Purchase and print a label for shipment
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createLabelRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateLabelResponseBody)</returns>
    Task<CreateLabelResponseBody> CreateLabel(CreateLabelRequestBody createLabelRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Purchase Label Purchase and print a label for shipment
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="createLabelRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateLabelResponseBody)</returns>
    Task<CreateLabelResponseBody> CreateLabel(HttpClient methodClient, CreateLabelRequestBody createLabelRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Purchase Label with Rate ID When retrieving rates for shipments using the &#x60;/rates&#x60; endpoint, the returned information contains a &#x60;rate_id&#x60; property that can be used to generate a label without having to refill in the shipment information repeatedly. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="rateId">Rate ID</param>
    /// <param name="createLabelFromRateRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateLabelFromRateResponseBody)</returns>
    Task<CreateLabelFromRateResponseBody> CreateLabelFromRate(string rateId, CreateLabelFromRateRequestBody createLabelFromRateRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Purchase Label with Rate ID When retrieving rates for shipments using the &#x60;/rates&#x60; endpoint, the returned information contains a &#x60;rate_id&#x60; property that can be used to generate a label without having to refill in the shipment information repeatedly. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="rateId">Rate ID</param>
    /// <param name="createLabelFromRateRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateLabelFromRateResponseBody)</returns>
    Task<CreateLabelFromRateResponseBody> CreateLabelFromRate(HttpClient methodClient, string rateId, CreateLabelFromRateRequestBody createLabelFromRateRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Purchase Label with Shipment ID Purchase a label using a shipment ID that has already been created with the desired address and package info. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="createLabelFromShipmentRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateLabelFromShipmentResponseBody)</returns>
    Task<CreateLabelFromShipmentResponseBody> CreateLabelFromShipment(string shipmentId, CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Purchase Label with Shipment ID Purchase a label using a shipment ID that has already been created with the desired address and package info. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="createLabelFromShipmentRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateLabelFromShipmentResponseBody)</returns>
    Task<CreateLabelFromShipmentResponseBody> CreateLabelFromShipment(HttpClient methodClient, string shipmentId, CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Create a return label Create a return label
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelId">Label ID</param>
    /// <param name="createReturnLabelRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateReturnLabelResponseBody)</returns>
    Task<CreateReturnLabelResponseBody> CreateReturnLabel(string labelId, CreateReturnLabelRequestBody createReturnLabelRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Create a return label Create a return label
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="labelId">Label ID</param>
    /// <param name="createReturnLabelRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateReturnLabelResponseBody)</returns>
    Task<CreateReturnLabelResponseBody> CreateReturnLabel(HttpClient methodClient, string labelId, CreateReturnLabelRequestBody createReturnLabelRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Label By External Shipment ID Find a label by using the external shipment id that was used during label creation 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="externalShipmentId"></param>
    /// <param name="labelDownloadType"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetLabelByExternalShipmentIdResponseBody)</returns>
    Task<GetLabelByExternalShipmentIdResponseBody> GetLabelByExternalShipmentId(string externalShipmentId, LabelDownloadType? labelDownloadType, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Label By External Shipment ID Find a label by using the external shipment id that was used during label creation 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="externalShipmentId"></param>
    /// <param name="labelDownloadType"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetLabelByExternalShipmentIdResponseBody)</returns>
    Task<GetLabelByExternalShipmentIdResponseBody> GetLabelByExternalShipmentId(HttpClient methodClient, string externalShipmentId, LabelDownloadType? labelDownloadType, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Label By ID Retrieve information for individual labels.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelId">Label ID</param>
    /// <param name="labelDownloadType"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetLabelByIdResponseBody)</returns>
    Task<GetLabelByIdResponseBody> GetLabelById(string labelId, LabelDownloadType? labelDownloadType, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Label By ID Retrieve information for individual labels.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="labelId">Label ID</param>
    /// <param name="labelDownloadType"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetLabelByIdResponseBody)</returns>
    Task<GetLabelByIdResponseBody> GetLabelById(HttpClient methodClient, string labelId, LabelDownloadType? labelDownloadType, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Label Tracking Information Retrieve the label&#39;s tracking information
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelId">Label ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetTrackingLogFromLabelResponseBody)</returns>
    Task<GetTrackingLogFromLabelResponseBody> GetTrackingLogFromLabel(string labelId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Label Tracking Information Retrieve the label&#39;s tracking information
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="labelId">Label ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetTrackingLogFromLabelResponseBody)</returns>
    Task<GetTrackingLogFromLabelResponseBody> GetTrackingLogFromLabel(HttpClient methodClient, string labelId, CancellationToken cancellationToken = default);

    /// <summary>
    /// List labels This endpoint returns a list of labels that you&#39;ve [created](https://www.shipengine.com/docs/labels/create-a-label/). You can optionally filter the results as well as control their sort order and the number of results returned at a time.  By default, all labels are returned, 25 at a time, starting with the most recently created ones.  You can combine multiple filter options to narrow-down the results.  For example, if you only want to get your UPS labels for your east coast warehouse you could query by both &#x60;warehouse_id&#x60; and &#x60;carrier_id&#x60; 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelStatus">Only return labels that are currently in the specified status (optional)</param>
    /// <param name="serviceCode">Only return labels for a specific [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) (optional)</param>
    /// <param name="carrierId">Only return labels for a specific [carrier account](https://www.shipengine.com/docs/carriers/setup/) (optional)</param>
    /// <param name="trackingNumber">Only return labels with a specific tracking number (optional)</param>
    /// <param name="batchId">Only return labels that were created in a specific [batch](https://www.shipengine.com/docs/labels/bulk/) (optional)</param>
    /// <param name="rateId">Rate ID (optional)</param>
    /// <param name="shipmentId">Shipment ID (optional)</param>
    /// <param name="warehouseId">Only return labels that originate from a specific [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) (optional)</param>
    /// <param name="createdAtStart">Only return labels that were created on or after a specific date/time (optional)</param>
    /// <param name="createdAtEnd">Only return labels that were created on or before a specific date/time (optional)</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pageSize">The number of results to return per response. (optional, default to 25)</param>
    /// <param name="sortDir">Controls the sort order of the query. (optional)</param>
    /// <param name="sortBy">Controls which field the query is sorted by. (optional, default to created_at)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListLabelsResponseBody)</returns>
    Task<ListLabelsResponseBody> ListLabels(LabelStatus? labelStatus, string serviceCode, string carrierId, string trackingNumber, string batchId, string rateId, string shipmentId, string warehouseId, DateTime? createdAtStart, DateTime? createdAtEnd, int? page, int? pageSize, SortDir? sortDir, string sortBy, CancellationToken cancellationToken = default);

    /// <summary>
    /// List labels This endpoint returns a list of labels that you&#39;ve [created](https://www.shipengine.com/docs/labels/create-a-label/). You can optionally filter the results as well as control their sort order and the number of results returned at a time.  By default, all labels are returned, 25 at a time, starting with the most recently created ones.  You can combine multiple filter options to narrow-down the results.  For example, if you only want to get your UPS labels for your east coast warehouse you could query by both &#x60;warehouse_id&#x60; and &#x60;carrier_id&#x60; 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="labelStatus">Only return labels that are currently in the specified status (optional)</param>
    /// <param name="serviceCode">Only return labels for a specific [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) (optional)</param>
    /// <param name="carrierId">Only return labels for a specific [carrier account](https://www.shipengine.com/docs/carriers/setup/) (optional)</param>
    /// <param name="trackingNumber">Only return labels with a specific tracking number (optional)</param>
    /// <param name="batchId">Only return labels that were created in a specific [batch](https://www.shipengine.com/docs/labels/bulk/) (optional)</param>
    /// <param name="rateId">Rate ID (optional)</param>
    /// <param name="shipmentId">Shipment ID (optional)</param>
    /// <param name="warehouseId">Only return labels that originate from a specific [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) (optional)</param>
    /// <param name="createdAtStart">Only return labels that were created on or after a specific date/time (optional)</param>
    /// <param name="createdAtEnd">Only return labels that were created on or before a specific date/time (optional)</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pageSize">The number of results to return per response. (optional, default to 25)</param>
    /// <param name="sortDir">Controls the sort order of the query. (optional)</param>
    /// <param name="sortBy">Controls which field the query is sorted by. (optional, default to created_at)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListLabelsResponseBody)</returns>
    Task<ListLabelsResponseBody> ListLabels(HttpClient methodClient, LabelStatus? labelStatus, string serviceCode, string carrierId, string trackingNumber, string batchId, string rateId, string shipmentId, string warehouseId, DateTime? createdAtStart, DateTime? createdAtEnd, int? page, int? pageSize, SortDir? sortDir, string sortBy, CancellationToken cancellationToken = default);

    /// <summary>
    /// Void a Label By ID Void a label by ID to get a refund.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelId">Label ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (VoidLabelResponseBody)</returns>
    Task<VoidLabelResponseBody> VoidLabel(string labelId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Void a Label By ID Void a label by ID to get a refund.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="labelId">Label ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (VoidLabelResponseBody)</returns>
    Task<VoidLabelResponseBody> VoidLabel(HttpClient methodClient, string labelId, CancellationToken cancellationToken = default);

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class ShipEngine
{
    /// <summary>
    /// Purchase Label Purchase and print a label for shipment
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createLabelRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateLabelResponseBody)</returns>
    public Task<CreateLabelResponseBody> CreateLabel(CreateLabelRequestBody createLabelRequestBody, CancellationToken cancellationToken = default)
    {
        return CreateLabel(_client, createLabelRequestBody, cancellationToken);
    }

    /// <summary>
    /// Purchase Label Purchase and print a label for shipment
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="createLabelRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateLabelResponseBody)</returns>
    public async Task<CreateLabelResponseBody> CreateLabel(HttpClient methodClient, CreateLabelRequestBody createLabelRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'createLabelRequestBody' is set
        if (createLabelRequestBody == null)
        {
            throw new ArgumentNullException(nameof(createLabelRequestBody));
        }


        RequestOptions requestOptions = new("/v1/labels");

        requestOptions.Data = JsonSerializer.Serialize(createLabelRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "LabelsApi.CreateLabel";

        var result = await SendHttpRequestAsync<CreateLabelResponseBody>(HttpMethods.Post, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// Purchase Label with Rate ID When retrieving rates for shipments using the &#x60;/rates&#x60; endpoint, the returned information contains a &#x60;rate_id&#x60; property that can be used to generate a label without having to refill in the shipment information repeatedly. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="rateId">Rate ID</param>
    /// <param name="createLabelFromRateRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateLabelFromRateResponseBody)</returns>
    public Task<CreateLabelFromRateResponseBody> CreateLabelFromRate(string rateId, CreateLabelFromRateRequestBody createLabelFromRateRequestBody, CancellationToken cancellationToken = default)
    {
        return CreateLabelFromRate(_client, rateId, createLabelFromRateRequestBody, cancellationToken);
    }

    /// <summary>
    /// Purchase Label with Rate ID When retrieving rates for shipments using the &#x60;/rates&#x60; endpoint, the returned information contains a &#x60;rate_id&#x60; property that can be used to generate a label without having to refill in the shipment information repeatedly. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="rateId">Rate ID</param>
    /// <param name="createLabelFromRateRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateLabelFromRateResponseBody)</returns>
    public async Task<CreateLabelFromRateResponseBody> CreateLabelFromRate(HttpClient methodClient, string rateId, CreateLabelFromRateRequestBody createLabelFromRateRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'rateId' is set
        if (rateId == null)
        {
            throw new ArgumentNullException(nameof(rateId));
        }

        // verify the required parameter 'createLabelFromRateRequestBody' is set
        if (createLabelFromRateRequestBody == null)
        {
            throw new ArgumentNullException(nameof(createLabelFromRateRequestBody));
        }


        RequestOptions requestOptions = new("/v1/labels/rates/{rate_id}");

        requestOptions.PathParameters.Add("rate_id", ShipEngineSDK.ClientUtils.ParameterToString(rateId)); // path parameter
        requestOptions.Data = JsonSerializer.Serialize(createLabelFromRateRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "LabelsApi.CreateLabelFromRate";

        var result = await SendHttpRequestAsync<CreateLabelFromRateResponseBody>(HttpMethods.Post, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// Purchase Label with Shipment ID Purchase a label using a shipment ID that has already been created with the desired address and package info. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="createLabelFromShipmentRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateLabelFromShipmentResponseBody)</returns>
    public Task<CreateLabelFromShipmentResponseBody> CreateLabelFromShipment(string shipmentId, CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody, CancellationToken cancellationToken = default)
    {
        return CreateLabelFromShipment(_client, shipmentId, createLabelFromShipmentRequestBody, cancellationToken);
    }

    /// <summary>
    /// Purchase Label with Shipment ID Purchase a label using a shipment ID that has already been created with the desired address and package info. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="createLabelFromShipmentRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateLabelFromShipmentResponseBody)</returns>
    public async Task<CreateLabelFromShipmentResponseBody> CreateLabelFromShipment(HttpClient methodClient, string shipmentId, CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null)
        {
            throw new ArgumentNullException(nameof(shipmentId));
        }

        // verify the required parameter 'createLabelFromShipmentRequestBody' is set
        if (createLabelFromShipmentRequestBody == null)
        {
            throw new ArgumentNullException(nameof(createLabelFromShipmentRequestBody));
        }


        RequestOptions requestOptions = new("/v1/labels/shipment/{shipment_id}");

        requestOptions.PathParameters.Add("shipment_id", ShipEngineSDK.ClientUtils.ParameterToString(shipmentId)); // path parameter
        requestOptions.Data = JsonSerializer.Serialize(createLabelFromShipmentRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "LabelsApi.CreateLabelFromShipment";

        var result = await SendHttpRequestAsync<CreateLabelFromShipmentResponseBody>(HttpMethods.Post, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// Create a return label Create a return label
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelId">Label ID</param>
    /// <param name="createReturnLabelRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateReturnLabelResponseBody)</returns>
    public Task<CreateReturnLabelResponseBody> CreateReturnLabel(string labelId, CreateReturnLabelRequestBody createReturnLabelRequestBody, CancellationToken cancellationToken = default)
    {
        return CreateReturnLabel(_client, labelId, createReturnLabelRequestBody, cancellationToken);
    }

    /// <summary>
    /// Create a return label Create a return label
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="labelId">Label ID</param>
    /// <param name="createReturnLabelRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateReturnLabelResponseBody)</returns>
    public async Task<CreateReturnLabelResponseBody> CreateReturnLabel(HttpClient methodClient, string labelId, CreateReturnLabelRequestBody createReturnLabelRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'labelId' is set
        if (labelId == null)
        {
            throw new ArgumentNullException(nameof(labelId));
        }

        // verify the required parameter 'createReturnLabelRequestBody' is set
        if (createReturnLabelRequestBody == null)
        {
            throw new ArgumentNullException(nameof(createReturnLabelRequestBody));
        }


        RequestOptions requestOptions = new("/v1/labels/{label_id}/return");

        requestOptions.PathParameters.Add("label_id", ShipEngineSDK.ClientUtils.ParameterToString(labelId)); // path parameter
        requestOptions.Data = JsonSerializer.Serialize(createReturnLabelRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "LabelsApi.CreateReturnLabel";

        var result = await SendHttpRequestAsync<CreateReturnLabelResponseBody>(HttpMethods.Post, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// Get Label By External Shipment ID Find a label by using the external shipment id that was used during label creation 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="externalShipmentId"></param>
    /// <param name="labelDownloadType"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetLabelByExternalShipmentIdResponseBody)</returns>
    public Task<GetLabelByExternalShipmentIdResponseBody> GetLabelByExternalShipmentId(string externalShipmentId, LabelDownloadType? labelDownloadType = default, CancellationToken cancellationToken = default)
    {
        return GetLabelByExternalShipmentId(_client, externalShipmentId, labelDownloadType, cancellationToken);
    }

    /// <summary>
    /// Get Label By External Shipment ID Find a label by using the external shipment id that was used during label creation 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="externalShipmentId"></param>
    /// <param name="labelDownloadType"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetLabelByExternalShipmentIdResponseBody)</returns>
    public async Task<GetLabelByExternalShipmentIdResponseBody> GetLabelByExternalShipmentId(HttpClient methodClient, string externalShipmentId, LabelDownloadType? labelDownloadType = default, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'externalShipmentId' is set
        if (externalShipmentId == null)
        {
            throw new ArgumentNullException(nameof(externalShipmentId));
        }


        RequestOptions requestOptions = new("/v1/labels/external_shipment_id/{external_shipment_id}");

        requestOptions.PathParameters.Add("external_shipment_id", ShipEngineSDK.ClientUtils.ParameterToString(externalShipmentId)); // path parameter
        if (labelDownloadType != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "label_download_type", labelDownloadType));
        }

        requestOptions.Operation = "LabelsApi.GetLabelByExternalShipmentId";

        var result = await SendHttpRequestAsync<GetLabelByExternalShipmentIdResponseBody>(HttpMethods.Get, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// Get Label By ID Retrieve information for individual labels.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelId">Label ID</param>
    /// <param name="labelDownloadType"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetLabelByIdResponseBody)</returns>
    public Task<GetLabelByIdResponseBody> GetLabelById(string labelId, LabelDownloadType? labelDownloadType = default, CancellationToken cancellationToken = default)
    {
        return GetLabelById(_client, labelId, labelDownloadType, cancellationToken);
    }

    /// <summary>
    /// Get Label By ID Retrieve information for individual labels.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="labelId">Label ID</param>
    /// <param name="labelDownloadType"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetLabelByIdResponseBody)</returns>
    public async Task<GetLabelByIdResponseBody> GetLabelById(HttpClient methodClient, string labelId, LabelDownloadType? labelDownloadType = default, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'labelId' is set
        if (labelId == null)
        {
            throw new ArgumentNullException(nameof(labelId));
        }


        RequestOptions requestOptions = new("/v1/labels/{label_id}");

        requestOptions.PathParameters.Add("label_id", ShipEngineSDK.ClientUtils.ParameterToString(labelId)); // path parameter
        if (labelDownloadType != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "label_download_type", labelDownloadType));
        }

        requestOptions.Operation = "LabelsApi.GetLabelById";

        var result = await SendHttpRequestAsync<GetLabelByIdResponseBody>(HttpMethods.Get, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// Get Label Tracking Information Retrieve the label&#39;s tracking information
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelId">Label ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetTrackingLogFromLabelResponseBody)</returns>
    public Task<GetTrackingLogFromLabelResponseBody> GetTrackingLogFromLabel(string labelId, CancellationToken cancellationToken = default)
    {
        return GetTrackingLogFromLabel(_client, labelId, cancellationToken);
    }

    /// <summary>
    /// Get Label Tracking Information Retrieve the label&#39;s tracking information
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="labelId">Label ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetTrackingLogFromLabelResponseBody)</returns>
    public async Task<GetTrackingLogFromLabelResponseBody> GetTrackingLogFromLabel(HttpClient methodClient, string labelId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'labelId' is set
        if (labelId == null)
        {
            throw new ArgumentNullException(nameof(labelId));
        }


        RequestOptions requestOptions = new("/v1/labels/{label_id}/track");

        requestOptions.PathParameters.Add("label_id", ShipEngineSDK.ClientUtils.ParameterToString(labelId)); // path parameter

        requestOptions.Operation = "LabelsApi.GetTrackingLogFromLabel";

        var result = await SendHttpRequestAsync<GetTrackingLogFromLabelResponseBody>(HttpMethods.Get, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// List labels This endpoint returns a list of labels that you&#39;ve [created](https://www.shipengine.com/docs/labels/create-a-label/). You can optionally filter the results as well as control their sort order and the number of results returned at a time.  By default, all labels are returned, 25 at a time, starting with the most recently created ones.  You can combine multiple filter options to narrow-down the results.  For example, if you only want to get your UPS labels for your east coast warehouse you could query by both &#x60;warehouse_id&#x60; and &#x60;carrier_id&#x60; 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelStatus">Only return labels that are currently in the specified status (optional)</param>
    /// <param name="serviceCode">Only return labels for a specific [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) (optional)</param>
    /// <param name="carrierId">Only return labels for a specific [carrier account](https://www.shipengine.com/docs/carriers/setup/) (optional)</param>
    /// <param name="trackingNumber">Only return labels with a specific tracking number (optional)</param>
    /// <param name="batchId">Only return labels that were created in a specific [batch](https://www.shipengine.com/docs/labels/bulk/) (optional)</param>
    /// <param name="rateId">Rate ID (optional)</param>
    /// <param name="shipmentId">Shipment ID (optional)</param>
    /// <param name="warehouseId">Only return labels that originate from a specific [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) (optional)</param>
    /// <param name="createdAtStart">Only return labels that were created on or after a specific date/time (optional)</param>
    /// <param name="createdAtEnd">Only return labels that were created on or before a specific date/time (optional)</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pageSize">The number of results to return per response. (optional, default to 25)</param>
    /// <param name="sortDir">Controls the sort order of the query. (optional)</param>
    /// <param name="sortBy">Controls which field the query is sorted by. (optional, default to created_at)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListLabelsResponseBody)</returns>
    public Task<ListLabelsResponseBody> ListLabels(LabelStatus? labelStatus = default, string serviceCode = default, string carrierId = default, string trackingNumber = default, string batchId = default, string rateId = default, string shipmentId = default, string warehouseId = default, DateTime? createdAtStart = default, DateTime? createdAtEnd = default, int? page = default, int? pageSize = default, SortDir? sortDir = default, string sortBy = default, CancellationToken cancellationToken = default)
    {
        return ListLabels(_client, labelStatus, serviceCode, carrierId, trackingNumber, batchId, rateId, shipmentId, warehouseId, createdAtStart, createdAtEnd, page, pageSize, sortDir, sortBy, cancellationToken);
    }

    /// <summary>
    /// List labels This endpoint returns a list of labels that you&#39;ve [created](https://www.shipengine.com/docs/labels/create-a-label/). You can optionally filter the results as well as control their sort order and the number of results returned at a time.  By default, all labels are returned, 25 at a time, starting with the most recently created ones.  You can combine multiple filter options to narrow-down the results.  For example, if you only want to get your UPS labels for your east coast warehouse you could query by both &#x60;warehouse_id&#x60; and &#x60;carrier_id&#x60; 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="labelStatus">Only return labels that are currently in the specified status (optional)</param>
    /// <param name="serviceCode">Only return labels for a specific [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) (optional)</param>
    /// <param name="carrierId">Only return labels for a specific [carrier account](https://www.shipengine.com/docs/carriers/setup/) (optional)</param>
    /// <param name="trackingNumber">Only return labels with a specific tracking number (optional)</param>
    /// <param name="batchId">Only return labels that were created in a specific [batch](https://www.shipengine.com/docs/labels/bulk/) (optional)</param>
    /// <param name="rateId">Rate ID (optional)</param>
    /// <param name="shipmentId">Shipment ID (optional)</param>
    /// <param name="warehouseId">Only return labels that originate from a specific [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) (optional)</param>
    /// <param name="createdAtStart">Only return labels that were created on or after a specific date/time (optional)</param>
    /// <param name="createdAtEnd">Only return labels that were created on or before a specific date/time (optional)</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pageSize">The number of results to return per response. (optional, default to 25)</param>
    /// <param name="sortDir">Controls the sort order of the query. (optional)</param>
    /// <param name="sortBy">Controls which field the query is sorted by. (optional, default to created_at)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListLabelsResponseBody)</returns>
    public async Task<ListLabelsResponseBody> ListLabels(HttpClient methodClient, LabelStatus? labelStatus = default, string serviceCode = default, string carrierId = default, string trackingNumber = default, string batchId = default, string rateId = default, string shipmentId = default, string warehouseId = default, DateTime? createdAtStart = default, DateTime? createdAtEnd = default, int? page = default, int? pageSize = default, SortDir? sortDir = default, string sortBy = default, CancellationToken cancellationToken = default)
    {

        RequestOptions requestOptions = new("/v1/labels");

        if (labelStatus != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "label_status", labelStatus));
        }
        if (serviceCode != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "service_code", serviceCode));
        }
        if (carrierId != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "carrier_id", carrierId));
        }
        if (trackingNumber != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "tracking_number", trackingNumber));
        }
        if (batchId != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "batch_id", batchId));
        }
        if (rateId != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "rate_id", rateId));
        }
        if (shipmentId != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "shipment_id", shipmentId));
        }
        if (warehouseId != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "warehouse_id", warehouseId));
        }
        if (createdAtStart != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "created_at_start", createdAtStart));
        }
        if (createdAtEnd != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "created_at_end", createdAtEnd));
        }
        if (page != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "page", page));
        }
        if (pageSize != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
        }
        if (sortDir != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "sort_dir", sortDir));
        }
        if (sortBy != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
        }

        requestOptions.Operation = "LabelsApi.ListLabels";

        var result = await SendHttpRequestAsync<ListLabelsResponseBody>(HttpMethods.Get, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// Void a Label By ID Void a label by ID to get a refund.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelId">Label ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (VoidLabelResponseBody)</returns>
    public Task<VoidLabelResponseBody> VoidLabel(string labelId, CancellationToken cancellationToken = default)
    {
        return VoidLabel(_client, labelId, cancellationToken);
    }

    /// <summary>
    /// Void a Label By ID Void a label by ID to get a refund.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="labelId">Label ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (VoidLabelResponseBody)</returns>
    public async Task<VoidLabelResponseBody> VoidLabel(HttpClient methodClient, string labelId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'labelId' is set
        if (labelId == null)
        {
            throw new ArgumentNullException(nameof(labelId));
        }


        RequestOptions requestOptions = new("/v1/labels/{label_id}/void");

        requestOptions.PathParameters.Add("label_id", ShipEngineSDK.ClientUtils.ParameterToString(labelId)); // path parameter

        requestOptions.Operation = "LabelsApi.VoidLabel";

        var result = await SendHttpRequestAsync<VoidLabelResponseBody>(HttpMethods.Put, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

}