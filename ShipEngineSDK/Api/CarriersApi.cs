// <auto-generated />
// DO NOT MODIFY THIS FILE

// Changes can be made in a corresponding partial file, or by changing
// the template in <root>/generation/templates and generating the class again.


using ShipEngineSDK.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace ShipEngineSDK;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial interface IShipEngine
{
    /// <summary>
    /// Add Funds To Carrier Add Funds To A Carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="addFundsToCarrierRequestBody"></param>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (AddFundsToCarrierResponseBody)</returns>
    Task<ShipEngineResponse<AddFundsToCarrierResponseBody>> AddFundsToCarrier(AddFundsToCarrierRequestBody addFundsToCarrierRequestBody, string carrierId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Add Funds To Carrier Add Funds To A Carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="addFundsToCarrierRequestBody"></param>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (AddFundsToCarrierResponseBody)</returns>
    Task<ShipEngineResponse<AddFundsToCarrierResponseBody>> AddFundsToCarrier(HttpClient methodClient, AddFundsToCarrierRequestBody addFundsToCarrierRequestBody, string carrierId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Disconnect Carrier by ID Disconnect a Carrier of the given ID from the account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    Task<ShipEngineResponse<string>> DisconnectCarrierById(string carrierId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Disconnect Carrier by ID Disconnect a Carrier of the given ID from the account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    Task<ShipEngineResponse<string>> DisconnectCarrierById(HttpClient methodClient, string carrierId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Carrier By ID Retrive carrier info by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetCarrierByIdResponseBody)</returns>
    Task<ShipEngineResponse<GetCarrierByIdResponseBody>> GetCarrierById(string carrierId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Carrier By ID Retrive carrier info by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetCarrierByIdResponseBody)</returns>
    Task<ShipEngineResponse<GetCarrierByIdResponseBody>> GetCarrierById(HttpClient methodClient, string carrierId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Carrier Options Get a list of the options available for the carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetCarrierOptionsResponseBody)</returns>
    Task<ShipEngineResponse<GetCarrierOptionsResponseBody>> GetCarrierOptions(string carrierId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Carrier Options Get a list of the options available for the carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetCarrierOptionsResponseBody)</returns>
    Task<ShipEngineResponse<GetCarrierOptionsResponseBody>> GetCarrierOptions(HttpClient methodClient, string carrierId, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Carrier Package Types List the package types associated with the carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListCarrierPackageTypesResponseBody)</returns>
    Task<ShipEngineResponse<ListCarrierPackageTypesResponseBody>> ListCarrierPackageTypes(string carrierId, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Carrier Package Types List the package types associated with the carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListCarrierPackageTypesResponseBody)</returns>
    Task<ShipEngineResponse<ListCarrierPackageTypesResponseBody>> ListCarrierPackageTypes(HttpClient methodClient, string carrierId, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Carrier Services List the services associated with the carrier ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListCarrierServicesResponseBody)</returns>
    Task<ShipEngineResponse<ListCarrierServicesResponseBody>> ListCarrierServices(string carrierId, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Carrier Services List the services associated with the carrier ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListCarrierServicesResponseBody)</returns>
    Task<ShipEngineResponse<ListCarrierServicesResponseBody>> ListCarrierServices(HttpClient methodClient, string carrierId, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Carriers List all carriers that have been added to this account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetCarriersResponseBody)</returns>
    Task<ShipEngineResponse<GetCarriersResponseBody>> ListCarriers(CancellationToken cancellationToken = default);

    /// <summary>
    /// List Carriers List all carriers that have been added to this account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetCarriersResponseBody)</returns>
    Task<ShipEngineResponse<GetCarriersResponseBody>> ListCarriers(HttpClient methodClient, CancellationToken cancellationToken = default);

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class ShipEngine
{
    /// <summary>
    /// Add Funds To Carrier Add Funds To A Carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="addFundsToCarrierRequestBody"></param>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (AddFundsToCarrierResponseBody)</returns>
    public Task<ShipEngineResponse<AddFundsToCarrierResponseBody>> AddFundsToCarrier(AddFundsToCarrierRequestBody addFundsToCarrierRequestBody, string carrierId, CancellationToken cancellationToken = default)
    {
        return AddFundsToCarrier(_client, addFundsToCarrierRequestBody, carrierId, cancellationToken);
    }

    /// <summary>
    /// Add Funds To Carrier Add Funds To A Carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="addFundsToCarrierRequestBody"></param>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (AddFundsToCarrierResponseBody)</returns>
    public async Task<ShipEngineResponse<AddFundsToCarrierResponseBody>> AddFundsToCarrier(HttpClient methodClient, AddFundsToCarrierRequestBody addFundsToCarrierRequestBody, string carrierId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'addFundsToCarrierRequestBody' is set
        if (addFundsToCarrierRequestBody == null)
        {
            throw new ArgumentNullException(nameof(addFundsToCarrierRequestBody));
        }

        // verify the required parameter 'carrierId' is set
        if (carrierId == null)
        {
            throw new ArgumentNullException(nameof(carrierId));
        }


        RequestOptions requestOptions = new("/v1/carriers/{carrier_id}/add_funds");

        requestOptions.PathParameters.Add("carrier_id", ClientUtils.ParameterToString(carrierId)); // path parameter
        requestOptions.Data = JsonSerializer.Serialize(addFundsToCarrierRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "CarriersApi.AddFundsToCarrier";

        var (data, response) = await GetHttpResponse<AddFundsToCarrierResponseBody>(HttpMethods.Put, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
        var headers = response.Headers.ToDictionary(h => h.Key, h => h.Value.FirstOrDefault(),
            StringComparer.InvariantCultureIgnoreCase);
        return new ShipEngineResponse<AddFundsToCarrierResponseBody>(data, response.StatusCode, headers);
    }

    /// <summary>
    /// Disconnect Carrier by ID Disconnect a Carrier of the given ID from the account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    public Task<ShipEngineResponse<string>> DisconnectCarrierById(string carrierId, CancellationToken cancellationToken = default)
    {
        return DisconnectCarrierById(_client, carrierId, cancellationToken);
    }

    /// <summary>
    /// Disconnect Carrier by ID Disconnect a Carrier of the given ID from the account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    public async Task<ShipEngineResponse<string>> DisconnectCarrierById(HttpClient methodClient, string carrierId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'carrierId' is set
        if (carrierId == null)
        {
            throw new ArgumentNullException(nameof(carrierId));
        }


        RequestOptions requestOptions = new("/v1/carriers/{carrier_id}");

        requestOptions.PathParameters.Add("carrier_id", ClientUtils.ParameterToString(carrierId)); // path parameter

        requestOptions.Operation = "CarriersApi.DisconnectCarrierById";

        var (data, response) = await GetHttpResponse<string>(HttpMethods.Delete, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
        var headers = response.Headers.ToDictionary(h => h.Key, h => h.Value.FirstOrDefault(),
            StringComparer.InvariantCultureIgnoreCase);
        return new ShipEngineResponse<string>(data, response.StatusCode, headers);
    }

    /// <summary>
    /// Get Carrier By ID Retrive carrier info by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetCarrierByIdResponseBody)</returns>
    public Task<ShipEngineResponse<GetCarrierByIdResponseBody>> GetCarrierById(string carrierId, CancellationToken cancellationToken = default)
    {
        return GetCarrierById(_client, carrierId, cancellationToken);
    }

    /// <summary>
    /// Get Carrier By ID Retrive carrier info by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetCarrierByIdResponseBody)</returns>
    public async Task<ShipEngineResponse<GetCarrierByIdResponseBody>> GetCarrierById(HttpClient methodClient, string carrierId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'carrierId' is set
        if (carrierId == null)
        {
            throw new ArgumentNullException(nameof(carrierId));
        }


        RequestOptions requestOptions = new("/v1/carriers/{carrier_id}");

        requestOptions.PathParameters.Add("carrier_id", ClientUtils.ParameterToString(carrierId)); // path parameter

        requestOptions.Operation = "CarriersApi.GetCarrierById";

        var (data, response) = await GetHttpResponse<GetCarrierByIdResponseBody>(HttpMethods.Get, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
        var headers = response.Headers.ToDictionary(h => h.Key, h => h.Value.FirstOrDefault(),
            StringComparer.InvariantCultureIgnoreCase);
        return new ShipEngineResponse<GetCarrierByIdResponseBody>(data, response.StatusCode, headers);
    }

    /// <summary>
    /// Get Carrier Options Get a list of the options available for the carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetCarrierOptionsResponseBody)</returns>
    public Task<ShipEngineResponse<GetCarrierOptionsResponseBody>> GetCarrierOptions(string carrierId, CancellationToken cancellationToken = default)
    {
        return GetCarrierOptions(_client, carrierId, cancellationToken);
    }

    /// <summary>
    /// Get Carrier Options Get a list of the options available for the carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetCarrierOptionsResponseBody)</returns>
    public async Task<ShipEngineResponse<GetCarrierOptionsResponseBody>> GetCarrierOptions(HttpClient methodClient, string carrierId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'carrierId' is set
        if (carrierId == null)
        {
            throw new ArgumentNullException(nameof(carrierId));
        }


        RequestOptions requestOptions = new("/v1/carriers/{carrier_id}/options");

        requestOptions.PathParameters.Add("carrier_id", ClientUtils.ParameterToString(carrierId)); // path parameter

        requestOptions.Operation = "CarriersApi.GetCarrierOptions";

        var (data, response) = await GetHttpResponse<GetCarrierOptionsResponseBody>(HttpMethods.Get, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
        var headers = response.Headers.ToDictionary(h => h.Key, h => h.Value.FirstOrDefault(),
            StringComparer.InvariantCultureIgnoreCase);
        return new ShipEngineResponse<GetCarrierOptionsResponseBody>(data, response.StatusCode, headers);
    }

    /// <summary>
    /// List Carrier Package Types List the package types associated with the carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListCarrierPackageTypesResponseBody)</returns>
    public Task<ShipEngineResponse<ListCarrierPackageTypesResponseBody>> ListCarrierPackageTypes(string carrierId, CancellationToken cancellationToken = default)
    {
        return ListCarrierPackageTypes(_client, carrierId, cancellationToken);
    }

    /// <summary>
    /// List Carrier Package Types List the package types associated with the carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListCarrierPackageTypesResponseBody)</returns>
    public async Task<ShipEngineResponse<ListCarrierPackageTypesResponseBody>> ListCarrierPackageTypes(HttpClient methodClient, string carrierId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'carrierId' is set
        if (carrierId == null)
        {
            throw new ArgumentNullException(nameof(carrierId));
        }


        RequestOptions requestOptions = new("/v1/carriers/{carrier_id}/packages");

        requestOptions.PathParameters.Add("carrier_id", ClientUtils.ParameterToString(carrierId)); // path parameter

        requestOptions.Operation = "CarriersApi.ListCarrierPackageTypes";

        var (data, response) = await GetHttpResponse<ListCarrierPackageTypesResponseBody>(HttpMethods.Get, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
        var headers = response.Headers.ToDictionary(h => h.Key, h => h.Value.FirstOrDefault(),
            StringComparer.InvariantCultureIgnoreCase);
        return new ShipEngineResponse<ListCarrierPackageTypesResponseBody>(data, response.StatusCode, headers);
    }

    /// <summary>
    /// List Carrier Services List the services associated with the carrier ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListCarrierServicesResponseBody)</returns>
    public Task<ShipEngineResponse<ListCarrierServicesResponseBody>> ListCarrierServices(string carrierId, CancellationToken cancellationToken = default)
    {
        return ListCarrierServices(_client, carrierId, cancellationToken);
    }

    /// <summary>
    /// List Carrier Services List the services associated with the carrier ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="carrierId">Carrier ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListCarrierServicesResponseBody)</returns>
    public async Task<ShipEngineResponse<ListCarrierServicesResponseBody>> ListCarrierServices(HttpClient methodClient, string carrierId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'carrierId' is set
        if (carrierId == null)
        {
            throw new ArgumentNullException(nameof(carrierId));
        }


        RequestOptions requestOptions = new("/v1/carriers/{carrier_id}/services");

        requestOptions.PathParameters.Add("carrier_id", ClientUtils.ParameterToString(carrierId)); // path parameter

        requestOptions.Operation = "CarriersApi.ListCarrierServices";

        var (data, response) = await GetHttpResponse<ListCarrierServicesResponseBody>(HttpMethods.Get, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
        var headers = response.Headers.ToDictionary(h => h.Key, h => h.Value.FirstOrDefault(),
            StringComparer.InvariantCultureIgnoreCase);
        return new ShipEngineResponse<ListCarrierServicesResponseBody>(data, response.StatusCode, headers);
    }

    /// <summary>
    /// List Carriers List all carriers that have been added to this account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetCarriersResponseBody)</returns>
    public Task<ShipEngineResponse<GetCarriersResponseBody>> ListCarriers(CancellationToken cancellationToken = default)
    {
        return ListCarriers(_client, cancellationToken);
    }

    /// <summary>
    /// List Carriers List all carriers that have been added to this account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetCarriersResponseBody)</returns>
    public async Task<ShipEngineResponse<GetCarriersResponseBody>> ListCarriers(HttpClient methodClient, CancellationToken cancellationToken = default)
    {

        RequestOptions requestOptions = new("/v1/carriers");


        requestOptions.Operation = "CarriersApi.ListCarriers";

        var (data, response) = await GetHttpResponse<GetCarriersResponseBody>(HttpMethods.Get, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
        var headers = response.Headers.ToDictionary(h => h.Key, h => h.Value.FirstOrDefault(),
            StringComparer.InvariantCultureIgnoreCase);
        return new ShipEngineResponse<GetCarriersResponseBody>(data, response.StatusCode, headers);
    }

}
