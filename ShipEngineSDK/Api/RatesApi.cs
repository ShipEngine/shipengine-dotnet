/*
 * ShipEngine API
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using ShipEngineSDK.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace ShipEngineSDK;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial interface IShipEngine
{
    /// <summary>
    /// Get Shipping Rates It&#39;s not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don&#39;t solely ship things using a single shipping option; so we provide functionality to show you all your options! 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="calculateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CalculateRatesResponseBody)</returns>
    Task<CalculateRatesResponseBody> CalculateRates(CalculateRatesRequestBody calculateRatesRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Shipping Rates It&#39;s not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don&#39;t solely ship things using a single shipping option; so we provide functionality to show you all your options! 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="calculateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CalculateRatesResponseBody)</returns>
    Task<CalculateRatesResponseBody> CalculateRates(HttpClient methodClient, CalculateRatesRequestBody calculateRatesRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Bulk Rates Get Bulk Shipment Rates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="compareBulkRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;BulkRate&gt;)</returns>
    Task<List<BulkRate>> CompareBulkRates(CompareBulkRatesRequestBody compareBulkRatesRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Bulk Rates Get Bulk Shipment Rates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="compareBulkRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;BulkRate&gt;)</returns>
    Task<List<BulkRate>> CompareBulkRates(HttpClient methodClient, CompareBulkRatesRequestBody compareBulkRatesRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Estimate Rates Get Rate Estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="estimateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;RateEstimate&gt;)</returns>
    Task<List<RateEstimate>> EstimateRates(EstimateRatesRequestBody estimateRatesRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Estimate Rates Get Rate Estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="estimateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;RateEstimate&gt;)</returns>
    Task<List<RateEstimate>> EstimateRates(HttpClient methodClient, EstimateRatesRequestBody estimateRatesRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Rate By ID Retrieve a previously queried rate by its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="rateId">Rate ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetRateByIdResponseBody)</returns>
    Task<GetRateByIdResponseBody> GetRateById(string rateId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Rate By ID Retrieve a previously queried rate by its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="rateId">Rate ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetRateByIdResponseBody)</returns>
    Task<GetRateByIdResponseBody> GetRateById(HttpClient methodClient, string rateId, CancellationToken cancellationToken = default);

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class ShipEngine
{
    /// <summary>
    /// Get Shipping Rates It&#39;s not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don&#39;t solely ship things using a single shipping option; so we provide functionality to show you all your options! 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="calculateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CalculateRatesResponseBody)</returns>
    public Task<CalculateRatesResponseBody> CalculateRates(CalculateRatesRequestBody calculateRatesRequestBody, CancellationToken cancellationToken = default)
    {
        return CalculateRates(_client, calculateRatesRequestBody, cancellationToken);
    }

    /// <summary>
    /// Get Shipping Rates It&#39;s not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don&#39;t solely ship things using a single shipping option; so we provide functionality to show you all your options! 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="calculateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CalculateRatesResponseBody)</returns>
    public async Task<CalculateRatesResponseBody> CalculateRates(HttpClient methodClient, CalculateRatesRequestBody calculateRatesRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'calculateRatesRequestBody' is set
        if (calculateRatesRequestBody == null)
        {
            throw new ArgumentNullException(nameof(calculateRatesRequestBody));
        }


        RequestOptions requestOptions = new("/v1/rates");

        requestOptions.Data = JsonSerializer.Serialize(calculateRatesRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "RatesApi.CalculateRates";

        var result = await SendHttpRequestAsync<CalculateRatesResponseBody>(HttpMethods.Post, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// Get Bulk Rates Get Bulk Shipment Rates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="compareBulkRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;BulkRate&gt;)</returns>
    public Task<List<BulkRate>> CompareBulkRates(CompareBulkRatesRequestBody compareBulkRatesRequestBody, CancellationToken cancellationToken = default)
    {
        return CompareBulkRates(_client, compareBulkRatesRequestBody, cancellationToken);
    }

    /// <summary>
    /// Get Bulk Rates Get Bulk Shipment Rates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="compareBulkRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;BulkRate&gt;)</returns>
    public async Task<List<BulkRate>> CompareBulkRates(HttpClient methodClient, CompareBulkRatesRequestBody compareBulkRatesRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'compareBulkRatesRequestBody' is set
        if (compareBulkRatesRequestBody == null)
        {
            throw new ArgumentNullException(nameof(compareBulkRatesRequestBody));
        }


        RequestOptions requestOptions = new("/v1/rates/bulk");

        requestOptions.Data = JsonSerializer.Serialize(compareBulkRatesRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "RatesApi.CompareBulkRates";

        var result = await SendHttpRequestAsync<List<BulkRate>>(HttpMethods.Post, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// Estimate Rates Get Rate Estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="estimateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;RateEstimate&gt;)</returns>
    public Task<List<RateEstimate>> EstimateRates(EstimateRatesRequestBody estimateRatesRequestBody, CancellationToken cancellationToken = default)
    {
        return EstimateRates(_client, estimateRatesRequestBody, cancellationToken);
    }

    /// <summary>
    /// Estimate Rates Get Rate Estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="estimateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;RateEstimate&gt;)</returns>
    public async Task<List<RateEstimate>> EstimateRates(HttpClient methodClient, EstimateRatesRequestBody estimateRatesRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'estimateRatesRequestBody' is set
        if (estimateRatesRequestBody == null)
        {
            throw new ArgumentNullException(nameof(estimateRatesRequestBody));
        }


        RequestOptions requestOptions = new("/v1/rates/estimate");

        requestOptions.Data = JsonSerializer.Serialize(estimateRatesRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "RatesApi.EstimateRates";

        var result = await SendHttpRequestAsync<List<RateEstimate>>(HttpMethods.Post, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// Get Rate By ID Retrieve a previously queried rate by its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="rateId">Rate ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetRateByIdResponseBody)</returns>
    public Task<GetRateByIdResponseBody> GetRateById(string rateId, CancellationToken cancellationToken = default)
    {
        return GetRateById(_client, rateId, cancellationToken);
    }

    /// <summary>
    /// Get Rate By ID Retrieve a previously queried rate by its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="rateId">Rate ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetRateByIdResponseBody)</returns>
    public async Task<GetRateByIdResponseBody> GetRateById(HttpClient methodClient, string rateId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'rateId' is set
        if (rateId == null)
        {
            throw new ArgumentNullException(nameof(rateId));
        }


        RequestOptions requestOptions = new("/v1/rates/{rate_id}");

        requestOptions.PathParameters.Add("rate_id", ShipEngineSDK.ClientUtils.ParameterToString(rateId)); // path parameter

        requestOptions.Operation = "RatesApi.GetRateById";

        var result = await SendHttpRequestAsync<GetRateByIdResponseBody>(HttpMethods.Get, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

}