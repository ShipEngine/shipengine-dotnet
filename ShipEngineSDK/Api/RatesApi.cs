/*
 * ShipEngine API
 *
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others.  # Authentication  <!- - ReDoc-Inject: <security-definitions> - ->
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using ShipEngineSDK.Model;

namespace ShipEngineSDK;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial interface IShipEngine
{
    /// <summary>
    /// Get Shipping Rates It&#39;s not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don&#39;t solely ship things using a single shipping option; so we provide functionality to show you all your options! 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="calculateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CalculateRatesResponseBody)</returns>
    Task<CalculateRatesResponseBody> CalculateRates(CalculateRatesRequestBody calculateRatesRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Shipping Rates It&#39;s not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don&#39;t solely ship things using a single shipping option; so we provide functionality to show you all your options! 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="calculateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CalculateRatesResponseBody)</returns>
    Task<CalculateRatesResponseBody> CalculateRates(Config methodConfig, CalculateRatesRequestBody calculateRatesRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Shipping Rates It&#39;s not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don&#39;t solely ship things using a single shipping option; so we provide functionality to show you all your options! 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="calculateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CalculateRatesResponseBody)</returns>
    Task<CalculateRatesResponseBody> CalculateRates(HttpClient methodClient, Config methodConfig, CalculateRatesRequestBody calculateRatesRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Bulk Rates Get Bulk Shipment Rates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="compareBulkRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;BulkRate&gt;)</returns>
    Task<List<BulkRate>> CompareBulkRates(CompareBulkRatesRequestBody compareBulkRatesRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Bulk Rates Get Bulk Shipment Rates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="compareBulkRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;BulkRate&gt;)</returns>
    Task<List<BulkRate>> CompareBulkRates(Config methodConfig, CompareBulkRatesRequestBody compareBulkRatesRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Bulk Rates Get Bulk Shipment Rates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="compareBulkRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;BulkRate&gt;)</returns>
    Task<List<BulkRate>> CompareBulkRates(HttpClient methodClient, Config methodConfig, CompareBulkRatesRequestBody compareBulkRatesRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Estimate Rates Get Rate Estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="estimateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;RateEstimate&gt;)</returns>
    Task<List<RateEstimate>> EstimateRates(EstimateRatesRequestBody estimateRatesRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Estimate Rates Get Rate Estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="estimateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;RateEstimate&gt;)</returns>
    Task<List<RateEstimate>> EstimateRates(Config methodConfig, EstimateRatesRequestBody estimateRatesRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Estimate Rates Get Rate Estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="estimateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;RateEstimate&gt;)</returns>
    Task<List<RateEstimate>> EstimateRates(HttpClient methodClient, Config methodConfig, EstimateRatesRequestBody estimateRatesRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Rate By ID Retrieve a previously queried rate by its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="rateId">Rate ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetRateByIdResponseBody)</returns>
    Task<GetRateByIdResponseBody> GetRateById(string rateId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Rate By ID Retrieve a previously queried rate by its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="rateId">Rate ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetRateByIdResponseBody)</returns>
    Task<GetRateByIdResponseBody> GetRateById(Config methodConfig, string rateId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Rate By ID Retrieve a previously queried rate by its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="rateId">Rate ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetRateByIdResponseBody)</returns>
    Task<GetRateByIdResponseBody> GetRateById(HttpClient methodClient, Config methodConfig, string rateId, CancellationToken cancellationToken = default);

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class ShipEngine
{
    /// <summary>
    /// Get Shipping Rates It&#39;s not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don&#39;t solely ship things using a single shipping option; so we provide functionality to show you all your options! 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="calculateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CalculateRatesResponseBody)</returns>
    public Task<CalculateRatesResponseBody> CalculateRates(CalculateRatesRequestBody calculateRatesRequestBody, CancellationToken cancellationToken = default)
    {
        return CalculateRates(_client, _config, calculateRatesRequestBody, cancellationToken);
    }

    /// <summary>
    /// Get Shipping Rates It&#39;s not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don&#39;t solely ship things using a single shipping option; so we provide functionality to show you all your options! 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="calculateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CalculateRatesResponseBody)</returns>
    public async Task<CalculateRatesResponseBody> CalculateRates(Config methodConfig, CalculateRatesRequestBody calculateRatesRequestBody, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await CalculateRates(methodClient, methodConfig, calculateRatesRequestBody, cancellationToken);
    }

    /// <summary>
    /// Get Shipping Rates It&#39;s not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don&#39;t solely ship things using a single shipping option; so we provide functionality to show you all your options! 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="calculateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CalculateRatesResponseBody)</returns>
    public async Task<CalculateRatesResponseBody> CalculateRates(HttpClient methodClient, Config methodConfig, CalculateRatesRequestBody calculateRatesRequestBody, CancellationToken cancellationToken = default)
    {
        
        // verify the required parameter 'calculateRatesRequestBody' is set
        if (calculateRatesRequestBody == null)
        {
            throw new ArgumentNullException(nameof(calculateRatesRequestBody));
        }


        RequestOptions requestOptions = new("/v1/rates");

        requestOptions.Data = JsonSerializer.Serialize(calculateRatesRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "RatesApi.CalculateRates";

        var result = await SendHttpRequestAsync<CalculateRatesResponseBody>(HttpMethods.Post, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Get Bulk Rates Get Bulk Shipment Rates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="compareBulkRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;BulkRate&gt;)</returns>
    public Task<List<BulkRate>> CompareBulkRates(CompareBulkRatesRequestBody compareBulkRatesRequestBody, CancellationToken cancellationToken = default)
    {
        return CompareBulkRates(_client, _config, compareBulkRatesRequestBody, cancellationToken);
    }

    /// <summary>
    /// Get Bulk Rates Get Bulk Shipment Rates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="compareBulkRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;BulkRate&gt;)</returns>
    public async Task<List<BulkRate>> CompareBulkRates(Config methodConfig, CompareBulkRatesRequestBody compareBulkRatesRequestBody, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await CompareBulkRates(methodClient, methodConfig, compareBulkRatesRequestBody, cancellationToken);
    }

    /// <summary>
    /// Get Bulk Rates Get Bulk Shipment Rates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="compareBulkRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;BulkRate&gt;)</returns>
    public async Task<List<BulkRate>> CompareBulkRates(HttpClient methodClient, Config methodConfig, CompareBulkRatesRequestBody compareBulkRatesRequestBody, CancellationToken cancellationToken = default)
    {
        
        // verify the required parameter 'compareBulkRatesRequestBody' is set
        if (compareBulkRatesRequestBody == null)
        {
            throw new ArgumentNullException(nameof(compareBulkRatesRequestBody));
        }


        RequestOptions requestOptions = new("/v1/rates/bulk");

        requestOptions.Data = JsonSerializer.Serialize(compareBulkRatesRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "RatesApi.CompareBulkRates";

        var result = await SendHttpRequestAsync<List<BulkRate>>(HttpMethods.Post, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Estimate Rates Get Rate Estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="estimateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;RateEstimate&gt;)</returns>
    public Task<List<RateEstimate>> EstimateRates(EstimateRatesRequestBody estimateRatesRequestBody, CancellationToken cancellationToken = default)
    {
        return EstimateRates(_client, _config, estimateRatesRequestBody, cancellationToken);
    }

    /// <summary>
    /// Estimate Rates Get Rate Estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="estimateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;RateEstimate&gt;)</returns>
    public async Task<List<RateEstimate>> EstimateRates(Config methodConfig, EstimateRatesRequestBody estimateRatesRequestBody, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await EstimateRates(methodClient, methodConfig, estimateRatesRequestBody, cancellationToken);
    }

    /// <summary>
    /// Estimate Rates Get Rate Estimates
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="estimateRatesRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;RateEstimate&gt;)</returns>
    public async Task<List<RateEstimate>> EstimateRates(HttpClient methodClient, Config methodConfig, EstimateRatesRequestBody estimateRatesRequestBody, CancellationToken cancellationToken = default)
    {
        
        // verify the required parameter 'estimateRatesRequestBody' is set
        if (estimateRatesRequestBody == null)
        {
            throw new ArgumentNullException(nameof(estimateRatesRequestBody));
        }


        RequestOptions requestOptions = new("/v1/rates/estimate");

        requestOptions.Data = JsonSerializer.Serialize(estimateRatesRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "RatesApi.EstimateRates";

        var result = await SendHttpRequestAsync<List<RateEstimate>>(HttpMethods.Post, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Get Rate By ID Retrieve a previously queried rate by its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="rateId">Rate ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetRateByIdResponseBody)</returns>
    public Task<GetRateByIdResponseBody> GetRateById(string rateId, CancellationToken cancellationToken = default)
    {
        return GetRateById(_client, _config, rateId, cancellationToken);
    }

    /// <summary>
    /// Get Rate By ID Retrieve a previously queried rate by its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="rateId">Rate ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetRateByIdResponseBody)</returns>
    public async Task<GetRateByIdResponseBody> GetRateById(Config methodConfig, string rateId, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await GetRateById(methodClient, methodConfig, rateId, cancellationToken);
    }

    /// <summary>
    /// Get Rate By ID Retrieve a previously queried rate by its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="rateId">Rate ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetRateByIdResponseBody)</returns>
    public async Task<GetRateByIdResponseBody> GetRateById(HttpClient methodClient, Config methodConfig, string rateId, CancellationToken cancellationToken = default)
    {
        
        // verify the required parameter 'rateId' is set
        if (rateId == null)
        {
            throw new ArgumentNullException(nameof(rateId));
        }


        RequestOptions requestOptions = new("/v1/rates/{rate_id}");

        requestOptions.PathParameters.Add("rate_id", ShipEngineSDK.Client.ClientUtils.ParameterToString(rateId)); // path parameter

        requestOptions.Operation = "RatesApi.GetRateById";

        var result = await SendHttpRequestAsync<GetRateByIdResponseBody>(HttpMethods.Get, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

}
