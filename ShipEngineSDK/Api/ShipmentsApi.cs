// <auto-generated />
// DO NOT MODIFY THIS FILE

// Changes can be made in a corresponding partial file, or by changing
// the template in <root>/generation/templates and generating the class again.


using ShipEngineSDK.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace ShipEngineSDK;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial interface IShipEngine
{
    /// <summary>
    /// Cancel a Shipment Mark a shipment cancelled, if it is no longer needed or being used by your organized. Any label associated with the shipment needs to be voided first An example use case would be if a batch label creation job is going to run at a set time and only queries &#x60;pending&#x60; shipments. Marking a shipment as cancelled would remove it from this process 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    Task<ShipEngineResponse<string>> CancelShipments(string shipmentId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Cancel a Shipment Mark a shipment cancelled, if it is no longer needed or being used by your organized. Any label associated with the shipment needs to be voided first An example use case would be if a batch label creation job is going to run at a set time and only queries &#x60;pending&#x60; shipments. Marking a shipment as cancelled would remove it from this process 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    Task<ShipEngineResponse<string>> CancelShipments(HttpClient methodClient, string shipmentId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Create Shipments Create one or multiple shipments.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createShipmentsRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (CreateShipmentsResponseBody)</returns>
    Task<ShipEngineResponse<CreateShipmentsResponseBody>> CreateShipments(CreateShipmentsRequestBody createShipmentsRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Create Shipments Create one or multiple shipments.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="createShipmentsRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (CreateShipmentsResponseBody)</returns>
    Task<ShipEngineResponse<CreateShipmentsResponseBody>> CreateShipments(HttpClient methodClient, CreateShipmentsRequestBody createShipmentsRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Shipment By External ID Query Shipments created using your own custom ID convention using this endpint
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="externalShipmentId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetShipmentByExternalIdResponseBody)</returns>
    Task<ShipEngineResponse<GetShipmentByExternalIdResponseBody>> GetShipmentByExternalId(string externalShipmentId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Shipment By External ID Query Shipments created using your own custom ID convention using this endpint
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="externalShipmentId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetShipmentByExternalIdResponseBody)</returns>
    Task<ShipEngineResponse<GetShipmentByExternalIdResponseBody>> GetShipmentByExternalId(HttpClient methodClient, string externalShipmentId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Shipment By ID Get an individual shipment based on its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetShipmentByIdResponseBody)</returns>
    Task<ShipEngineResponse<GetShipmentByIdResponseBody>> GetShipmentById(string shipmentId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Shipment By ID Get an individual shipment based on its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetShipmentByIdResponseBody)</returns>
    Task<ShipEngineResponse<GetShipmentByIdResponseBody>> GetShipmentById(HttpClient methodClient, string shipmentId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Shipment Rates Get Rates for the shipment information associated with the shipment ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="createdAtStart">Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListShipmentRatesResponseBody)</returns>
    Task<ShipEngineResponse<ListShipmentRatesResponseBody>> ListShipmentRates(string shipmentId, DateTimeOffset? createdAtStart, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Shipment Rates Get Rates for the shipment information associated with the shipment ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="createdAtStart">Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListShipmentRatesResponseBody)</returns>
    Task<ShipEngineResponse<ListShipmentRatesResponseBody>> ListShipmentRates(HttpClient methodClient, string shipmentId, DateTimeOffset? createdAtStart, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Shipments Get list of Shipments
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createdAtStart">Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)</param>
    /// <param name="createdAtEnd">Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time) (optional)</param>
    /// <param name="modifiedAtStart">Used to create a filter for when a resource was modified (ex. A shipment that was modified after a certain time) (optional)</param>
    /// <param name="modifiedAtEnd">Used to create a filter for when a resource was modified (ex. A shipment that was modified before a certain time) (optional)</param>
    /// <param name="shipmentStatus"> (optional)</param>
    /// <param name="sortBy"> (optional)</param>
    /// <param name="sortDir">Controls the sort order of the query. (optional)</param>
    /// <param name="batchId">Batch ID (optional)</param>
    /// <param name="tag">Search for shipments based on the custom tag added to the shipment object (optional)</param>
    /// <param name="salesOrderId">Sales Order ID (optional)</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pageSize">The number of results to return per response. (optional, default to 25)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListShipmentsResponseBody)</returns>
    Task<ShipEngineResponse<ListShipmentsResponseBody>> ListShipments(DateTimeOffset? createdAtStart, DateTimeOffset? createdAtEnd, DateTimeOffset? modifiedAtStart, DateTimeOffset? modifiedAtEnd, ShipmentStatus? shipmentStatus, ShipmentsSortBy? sortBy, SortDir? sortDir, string? batchId, string? tag, string? salesOrderId, int? page, int? pageSize, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Shipments Get list of Shipments
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="createdAtStart">Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)</param>
    /// <param name="createdAtEnd">Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time) (optional)</param>
    /// <param name="modifiedAtStart">Used to create a filter for when a resource was modified (ex. A shipment that was modified after a certain time) (optional)</param>
    /// <param name="modifiedAtEnd">Used to create a filter for when a resource was modified (ex. A shipment that was modified before a certain time) (optional)</param>
    /// <param name="shipmentStatus"> (optional)</param>
    /// <param name="sortBy"> (optional)</param>
    /// <param name="sortDir">Controls the sort order of the query. (optional)</param>
    /// <param name="batchId">Batch ID (optional)</param>
    /// <param name="tag">Search for shipments based on the custom tag added to the shipment object (optional)</param>
    /// <param name="salesOrderId">Sales Order ID (optional)</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pageSize">The number of results to return per response. (optional, default to 25)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListShipmentsResponseBody)</returns>
    Task<ShipEngineResponse<ListShipmentsResponseBody>> ListShipments(HttpClient methodClient, DateTimeOffset? createdAtStart, DateTimeOffset? createdAtEnd, DateTimeOffset? modifiedAtStart, DateTimeOffset? modifiedAtEnd, ShipmentStatus? shipmentStatus, ShipmentsSortBy? sortBy, SortDir? sortDir, string? batchId, string? tag, string? salesOrderId, int? page, int? pageSize, CancellationToken cancellationToken = default);

    /// <summary>
    /// Parse shipping info The shipment-recognition API makes it easy for you to extract shipping data from unstructured text, including people&#39;s names, addresses, package weights and dimensions, insurance and delivery requirements, and more.  Data often enters your system as unstructured text (for example: emails, SMS messages, support tickets, or other documents). ShipEngine&#39;s shipment-recognition API helps you extract meaningful, structured data from this unstructured text. The parsed shipment data is returned in the same structure that&#39;s used for other ShipEngine APIs, so you can easily use the parsed data to create a shipping label.  &gt; **Note:** Shipment recognition is currently supported for the United States, Canada, Australia, New Zealand, the United Kingdom, and Ireland. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="parseShipmentRequestBody">The only required field is &#x60;text&#x60;, which is the text to be parsed. You can optionally also provide a &#x60;shipment&#x60; containing any already-known values. For example, you probably already know the &#x60;ship_from&#x60; address, and you may also already know what carrier and service you want to use. </param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ParseShipmentResponseBody)</returns>
    Task<ShipEngineResponse<ParseShipmentResponseBody>> ParseShipment(ParseShipmentRequestBody parseShipmentRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Parse shipping info The shipment-recognition API makes it easy for you to extract shipping data from unstructured text, including people&#39;s names, addresses, package weights and dimensions, insurance and delivery requirements, and more.  Data often enters your system as unstructured text (for example: emails, SMS messages, support tickets, or other documents). ShipEngine&#39;s shipment-recognition API helps you extract meaningful, structured data from this unstructured text. The parsed shipment data is returned in the same structure that&#39;s used for other ShipEngine APIs, so you can easily use the parsed data to create a shipping label.  &gt; **Note:** Shipment recognition is currently supported for the United States, Canada, Australia, New Zealand, the United Kingdom, and Ireland. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="parseShipmentRequestBody">The only required field is &#x60;text&#x60;, which is the text to be parsed. You can optionally also provide a &#x60;shipment&#x60; containing any already-known values. For example, you probably already know the &#x60;ship_from&#x60; address, and you may also already know what carrier and service you want to use. </param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ParseShipmentResponseBody)</returns>
    Task<ShipEngineResponse<ParseShipmentResponseBody>> ParseShipment(HttpClient methodClient, ParseShipmentRequestBody parseShipmentRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Shipment Tags Get Shipment tags based on its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (TagShipmentResponseBody)</returns>
    Task<ShipEngineResponse<TagShipmentResponseBody>> ShipmentsListTags(string shipmentId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Shipment Tags Get Shipment tags based on its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (TagShipmentResponseBody)</returns>
    Task<ShipEngineResponse<TagShipmentResponseBody>> ShipmentsListTags(HttpClient methodClient, string shipmentId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Shipments Tags Update Shipments Tags
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="updateShipmentsTagsRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse</returns>
    Task<ShipEngineResponse<Object>> ShipmentsUpdateTags(UpdateShipmentsTagsRequestBody updateShipmentsTagsRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Shipments Tags Update Shipments Tags
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="updateShipmentsTagsRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse</returns>
    Task<ShipEngineResponse<Object>> ShipmentsUpdateTags(HttpClient methodClient, UpdateShipmentsTagsRequestBody updateShipmentsTagsRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Add Tag to Shipment Add a tag to the shipment object
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="tagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (TagShipmentResponseBody)</returns>
    Task<ShipEngineResponse<TagShipmentResponseBody>> TagShipment(string shipmentId, string tagName, CancellationToken cancellationToken = default);

    /// <summary>
    /// Add Tag to Shipment Add a tag to the shipment object
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="tagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (TagShipmentResponseBody)</returns>
    Task<ShipEngineResponse<TagShipmentResponseBody>> TagShipment(HttpClient methodClient, string shipmentId, string tagName, CancellationToken cancellationToken = default);

    /// <summary>
    /// Remove Tag from Shipment Remove an existing tag from the Shipment object
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="tagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    Task<ShipEngineResponse<string>> UntagShipment(string shipmentId, string tagName, CancellationToken cancellationToken = default);

    /// <summary>
    /// Remove Tag from Shipment Remove an existing tag from the Shipment object
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="tagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    Task<ShipEngineResponse<string>> UntagShipment(HttpClient methodClient, string shipmentId, string tagName, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Shipment By ID Update a shipment object based on its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="updateShipmentRequestBody"></param>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (UpdateShipmentResponseBody)</returns>
    Task<ShipEngineResponse<UpdateShipmentResponseBody>> UpdateShipment(UpdateShipmentRequestBody updateShipmentRequestBody, string shipmentId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Shipment By ID Update a shipment object based on its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="updateShipmentRequestBody"></param>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (UpdateShipmentResponseBody)</returns>
    Task<ShipEngineResponse<UpdateShipmentResponseBody>> UpdateShipment(HttpClient methodClient, UpdateShipmentRequestBody updateShipmentRequestBody, string shipmentId, CancellationToken cancellationToken = default);

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class ShipEngine
{
    /// <summary>
    /// Cancel a Shipment Mark a shipment cancelled, if it is no longer needed or being used by your organized. Any label associated with the shipment needs to be voided first An example use case would be if a batch label creation job is going to run at a set time and only queries &#x60;pending&#x60; shipments. Marking a shipment as cancelled would remove it from this process 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    public Task<ShipEngineResponse<string>> CancelShipments(string shipmentId, CancellationToken cancellationToken = default)
    {
        return CancelShipments(_client, shipmentId, cancellationToken);
    }

    /// <summary>
    /// Cancel a Shipment Mark a shipment cancelled, if it is no longer needed or being used by your organized. Any label associated with the shipment needs to be voided first An example use case would be if a batch label creation job is going to run at a set time and only queries &#x60;pending&#x60; shipments. Marking a shipment as cancelled would remove it from this process 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    public async Task<ShipEngineResponse<string>> CancelShipments(HttpClient methodClient, string shipmentId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null)
        {
            throw new ArgumentNullException(nameof(shipmentId));
        }


        RequestOptions requestOptions = new("/v1/shipments/{shipment_id}/cancel");

        requestOptions.PathParameters.Add("shipment_id", ClientUtils.ParameterToString(shipmentId)); // path parameter

        requestOptions.Operation = "ShipmentsApi.CancelShipments";

        return await GetHttpResponse<string>(HttpMethods.Put, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
    }

    /// <summary>
    /// Create Shipments Create one or multiple shipments.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createShipmentsRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (CreateShipmentsResponseBody)</returns>
    public Task<ShipEngineResponse<CreateShipmentsResponseBody>> CreateShipments(CreateShipmentsRequestBody createShipmentsRequestBody, CancellationToken cancellationToken = default)
    {
        return CreateShipments(_client, createShipmentsRequestBody, cancellationToken);
    }

    /// <summary>
    /// Create Shipments Create one or multiple shipments.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="createShipmentsRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (CreateShipmentsResponseBody)</returns>
    public async Task<ShipEngineResponse<CreateShipmentsResponseBody>> CreateShipments(HttpClient methodClient, CreateShipmentsRequestBody createShipmentsRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'createShipmentsRequestBody' is set
        if (createShipmentsRequestBody == null)
        {
            throw new ArgumentNullException(nameof(createShipmentsRequestBody));
        }


        RequestOptions requestOptions = new("/v1/shipments");

        requestOptions.Data = JsonSerializer.Serialize(createShipmentsRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "ShipmentsApi.CreateShipments";

        return await GetHttpResponse<CreateShipmentsResponseBody>(HttpMethods.Post, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
    }

    /// <summary>
    /// Get Shipment By External ID Query Shipments created using your own custom ID convention using this endpint
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="externalShipmentId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetShipmentByExternalIdResponseBody)</returns>
    public Task<ShipEngineResponse<GetShipmentByExternalIdResponseBody>> GetShipmentByExternalId(string externalShipmentId, CancellationToken cancellationToken = default)
    {
        return GetShipmentByExternalId(_client, externalShipmentId, cancellationToken);
    }

    /// <summary>
    /// Get Shipment By External ID Query Shipments created using your own custom ID convention using this endpint
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="externalShipmentId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetShipmentByExternalIdResponseBody)</returns>
    public async Task<ShipEngineResponse<GetShipmentByExternalIdResponseBody>> GetShipmentByExternalId(HttpClient methodClient, string externalShipmentId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'externalShipmentId' is set
        if (externalShipmentId == null)
        {
            throw new ArgumentNullException(nameof(externalShipmentId));
        }


        RequestOptions requestOptions = new("/v1/shipments/external_shipment_id/{external_shipment_id}");

        requestOptions.PathParameters.Add("external_shipment_id", ClientUtils.ParameterToString(externalShipmentId)); // path parameter

        requestOptions.Operation = "ShipmentsApi.GetShipmentByExternalId";

        return await GetHttpResponse<GetShipmentByExternalIdResponseBody>(HttpMethods.Get, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
    }

    /// <summary>
    /// Get Shipment By ID Get an individual shipment based on its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetShipmentByIdResponseBody)</returns>
    public Task<ShipEngineResponse<GetShipmentByIdResponseBody>> GetShipmentById(string shipmentId, CancellationToken cancellationToken = default)
    {
        return GetShipmentById(_client, shipmentId, cancellationToken);
    }

    /// <summary>
    /// Get Shipment By ID Get an individual shipment based on its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (GetShipmentByIdResponseBody)</returns>
    public async Task<ShipEngineResponse<GetShipmentByIdResponseBody>> GetShipmentById(HttpClient methodClient, string shipmentId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null)
        {
            throw new ArgumentNullException(nameof(shipmentId));
        }


        RequestOptions requestOptions = new("/v1/shipments/{shipment_id}");

        requestOptions.PathParameters.Add("shipment_id", ClientUtils.ParameterToString(shipmentId)); // path parameter

        requestOptions.Operation = "ShipmentsApi.GetShipmentById";

        return await GetHttpResponse<GetShipmentByIdResponseBody>(HttpMethods.Get, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
    }

    /// <summary>
    /// Get Shipment Rates Get Rates for the shipment information associated with the shipment ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="createdAtStart">Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListShipmentRatesResponseBody)</returns>
    public Task<ShipEngineResponse<ListShipmentRatesResponseBody>> ListShipmentRates(string shipmentId, DateTimeOffset? createdAtStart = default, CancellationToken cancellationToken = default)
    {
        return ListShipmentRates(_client, shipmentId, createdAtStart, cancellationToken);
    }

    /// <summary>
    /// Get Shipment Rates Get Rates for the shipment information associated with the shipment ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="createdAtStart">Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListShipmentRatesResponseBody)</returns>
    public async Task<ShipEngineResponse<ListShipmentRatesResponseBody>> ListShipmentRates(HttpClient methodClient, string shipmentId, DateTimeOffset? createdAtStart = default, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null)
        {
            throw new ArgumentNullException(nameof(shipmentId));
        }


        RequestOptions requestOptions = new("/v1/shipments/{shipment_id}/rates");

        requestOptions.PathParameters.Add("shipment_id", ClientUtils.ParameterToString(shipmentId)); // path parameter
        if (createdAtStart != null)
        {
            requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "created_at_start", createdAtStart));
        }

        requestOptions.Operation = "ShipmentsApi.ListShipmentRates";

        return await GetHttpResponse<ListShipmentRatesResponseBody>(HttpMethods.Get, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
    }

    /// <summary>
    /// List Shipments Get list of Shipments
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createdAtStart">Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)</param>
    /// <param name="createdAtEnd">Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time) (optional)</param>
    /// <param name="modifiedAtStart">Used to create a filter for when a resource was modified (ex. A shipment that was modified after a certain time) (optional)</param>
    /// <param name="modifiedAtEnd">Used to create a filter for when a resource was modified (ex. A shipment that was modified before a certain time) (optional)</param>
    /// <param name="shipmentStatus"> (optional)</param>
    /// <param name="sortBy"> (optional)</param>
    /// <param name="sortDir">Controls the sort order of the query. (optional)</param>
    /// <param name="batchId">Batch ID (optional)</param>
    /// <param name="tag">Search for shipments based on the custom tag added to the shipment object (optional)</param>
    /// <param name="salesOrderId">Sales Order ID (optional)</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pageSize">The number of results to return per response. (optional, default to 25)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListShipmentsResponseBody)</returns>
    public Task<ShipEngineResponse<ListShipmentsResponseBody>> ListShipments(DateTimeOffset? createdAtStart = default, DateTimeOffset? createdAtEnd = default, DateTimeOffset? modifiedAtStart = default, DateTimeOffset? modifiedAtEnd = default, ShipmentStatus? shipmentStatus = default, ShipmentsSortBy? sortBy = default, SortDir? sortDir = default, string? batchId = default, string? tag = default, string? salesOrderId = default, int? page = default, int? pageSize = default, CancellationToken cancellationToken = default)
    {
        return ListShipments(_client, createdAtStart, createdAtEnd, modifiedAtStart, modifiedAtEnd, shipmentStatus, sortBy, sortDir, batchId, tag, salesOrderId, page, pageSize, cancellationToken);
    }

    /// <summary>
    /// List Shipments Get list of Shipments
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="createdAtStart">Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)</param>
    /// <param name="createdAtEnd">Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time) (optional)</param>
    /// <param name="modifiedAtStart">Used to create a filter for when a resource was modified (ex. A shipment that was modified after a certain time) (optional)</param>
    /// <param name="modifiedAtEnd">Used to create a filter for when a resource was modified (ex. A shipment that was modified before a certain time) (optional)</param>
    /// <param name="shipmentStatus"> (optional)</param>
    /// <param name="sortBy"> (optional)</param>
    /// <param name="sortDir">Controls the sort order of the query. (optional)</param>
    /// <param name="batchId">Batch ID (optional)</param>
    /// <param name="tag">Search for shipments based on the custom tag added to the shipment object (optional)</param>
    /// <param name="salesOrderId">Sales Order ID (optional)</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pageSize">The number of results to return per response. (optional, default to 25)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ListShipmentsResponseBody)</returns>
    public async Task<ShipEngineResponse<ListShipmentsResponseBody>> ListShipments(HttpClient methodClient, DateTimeOffset? createdAtStart = default, DateTimeOffset? createdAtEnd = default, DateTimeOffset? modifiedAtStart = default, DateTimeOffset? modifiedAtEnd = default, ShipmentStatus? shipmentStatus = default, ShipmentsSortBy? sortBy = default, SortDir? sortDir = default, string? batchId = default, string? tag = default, string? salesOrderId = default, int? page = default, int? pageSize = default, CancellationToken cancellationToken = default)
    {

        RequestOptions requestOptions = new("/v1/shipments");

        if (createdAtStart != null)
        {
            requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "created_at_start", createdAtStart));
        }
        if (createdAtEnd != null)
        {
            requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "created_at_end", createdAtEnd));
        }
        if (modifiedAtStart != null)
        {
            requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "modified_at_start", modifiedAtStart));
        }
        if (modifiedAtEnd != null)
        {
            requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "modified_at_end", modifiedAtEnd));
        }
        if (shipmentStatus != null)
        {
            requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "shipment_status", shipmentStatus));
        }
        if (sortBy != null)
        {
            requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
        }
        if (sortDir != null)
        {
            requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sort_dir", sortDir));
        }
        if (batchId != null)
        {
            requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "batch_id", batchId));
        }
        if (tag != null)
        {
            requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "tag", tag));
        }
        if (salesOrderId != null)
        {
            requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sales_order_id", salesOrderId));
        }
        if (page != null)
        {
            requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page", page));
        }
        if (pageSize != null)
        {
            requestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
        }

        requestOptions.Operation = "ShipmentsApi.ListShipments";

        return await GetHttpResponse<ListShipmentsResponseBody>(HttpMethods.Get, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
    }

    /// <summary>
    /// Parse shipping info The shipment-recognition API makes it easy for you to extract shipping data from unstructured text, including people&#39;s names, addresses, package weights and dimensions, insurance and delivery requirements, and more.  Data often enters your system as unstructured text (for example: emails, SMS messages, support tickets, or other documents). ShipEngine&#39;s shipment-recognition API helps you extract meaningful, structured data from this unstructured text. The parsed shipment data is returned in the same structure that&#39;s used for other ShipEngine APIs, so you can easily use the parsed data to create a shipping label.  &gt; **Note:** Shipment recognition is currently supported for the United States, Canada, Australia, New Zealand, the United Kingdom, and Ireland. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="parseShipmentRequestBody">The only required field is &#x60;text&#x60;, which is the text to be parsed. You can optionally also provide a &#x60;shipment&#x60; containing any already-known values. For example, you probably already know the &#x60;ship_from&#x60; address, and you may also already know what carrier and service you want to use. </param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ParseShipmentResponseBody)</returns>
    public Task<ShipEngineResponse<ParseShipmentResponseBody>> ParseShipment(ParseShipmentRequestBody parseShipmentRequestBody, CancellationToken cancellationToken = default)
    {
        return ParseShipment(_client, parseShipmentRequestBody, cancellationToken);
    }

    /// <summary>
    /// Parse shipping info The shipment-recognition API makes it easy for you to extract shipping data from unstructured text, including people&#39;s names, addresses, package weights and dimensions, insurance and delivery requirements, and more.  Data often enters your system as unstructured text (for example: emails, SMS messages, support tickets, or other documents). ShipEngine&#39;s shipment-recognition API helps you extract meaningful, structured data from this unstructured text. The parsed shipment data is returned in the same structure that&#39;s used for other ShipEngine APIs, so you can easily use the parsed data to create a shipping label.  &gt; **Note:** Shipment recognition is currently supported for the United States, Canada, Australia, New Zealand, the United Kingdom, and Ireland. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="parseShipmentRequestBody">The only required field is &#x60;text&#x60;, which is the text to be parsed. You can optionally also provide a &#x60;shipment&#x60; containing any already-known values. For example, you probably already know the &#x60;ship_from&#x60; address, and you may also already know what carrier and service you want to use. </param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (ParseShipmentResponseBody)</returns>
    public async Task<ShipEngineResponse<ParseShipmentResponseBody>> ParseShipment(HttpClient methodClient, ParseShipmentRequestBody parseShipmentRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'parseShipmentRequestBody' is set
        if (parseShipmentRequestBody == null)
        {
            throw new ArgumentNullException(nameof(parseShipmentRequestBody));
        }


        RequestOptions requestOptions = new("/v1/shipments/recognize");

        requestOptions.Data = JsonSerializer.Serialize(parseShipmentRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "ShipmentsApi.ParseShipment";

        return await GetHttpResponse<ParseShipmentResponseBody>(HttpMethods.Put, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
    }

    /// <summary>
    /// Get Shipment Tags Get Shipment tags based on its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (TagShipmentResponseBody)</returns>
    public Task<ShipEngineResponse<TagShipmentResponseBody>> ShipmentsListTags(string shipmentId, CancellationToken cancellationToken = default)
    {
        return ShipmentsListTags(_client, shipmentId, cancellationToken);
    }

    /// <summary>
    /// Get Shipment Tags Get Shipment tags based on its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (TagShipmentResponseBody)</returns>
    public async Task<ShipEngineResponse<TagShipmentResponseBody>> ShipmentsListTags(HttpClient methodClient, string shipmentId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null)
        {
            throw new ArgumentNullException(nameof(shipmentId));
        }


        RequestOptions requestOptions = new("/v1/shipments/{shipment_id}/tags");

        requestOptions.PathParameters.Add("shipment_id", ClientUtils.ParameterToString(shipmentId)); // path parameter

        requestOptions.Operation = "ShipmentsApi.ShipmentsListTags";

        return await GetHttpResponse<TagShipmentResponseBody>(HttpMethods.Get, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
    }

    /// <summary>
    /// Update Shipments Tags Update Shipments Tags
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="updateShipmentsTagsRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse</returns>
    public Task<ShipEngineResponse<Object>> ShipmentsUpdateTags(UpdateShipmentsTagsRequestBody updateShipmentsTagsRequestBody, CancellationToken cancellationToken = default)
    {
        return ShipmentsUpdateTags(_client, updateShipmentsTagsRequestBody, cancellationToken);
    }

    /// <summary>
    /// Update Shipments Tags Update Shipments Tags
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="updateShipmentsTagsRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse</returns>
    public async Task<ShipEngineResponse<Object>> ShipmentsUpdateTags(HttpClient methodClient, UpdateShipmentsTagsRequestBody updateShipmentsTagsRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'updateShipmentsTagsRequestBody' is set
        if (updateShipmentsTagsRequestBody == null)
        {
            throw new ArgumentNullException(nameof(updateShipmentsTagsRequestBody));
        }


        RequestOptions requestOptions = new("/v1/shipments/tags");

        requestOptions.Data = JsonSerializer.Serialize(updateShipmentsTagsRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "ShipmentsApi.ShipmentsUpdateTags";

        return await GetHttpResponse<Object>(HttpMethods.Put, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
    }

    /// <summary>
    /// Add Tag to Shipment Add a tag to the shipment object
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="tagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (TagShipmentResponseBody)</returns>
    public Task<ShipEngineResponse<TagShipmentResponseBody>> TagShipment(string shipmentId, string tagName, CancellationToken cancellationToken = default)
    {
        return TagShipment(_client, shipmentId, tagName, cancellationToken);
    }

    /// <summary>
    /// Add Tag to Shipment Add a tag to the shipment object
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="tagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (TagShipmentResponseBody)</returns>
    public async Task<ShipEngineResponse<TagShipmentResponseBody>> TagShipment(HttpClient methodClient, string shipmentId, string tagName, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null)
        {
            throw new ArgumentNullException(nameof(shipmentId));
        }

        // verify the required parameter 'tagName' is set
        if (tagName == null)
        {
            throw new ArgumentNullException(nameof(tagName));
        }


        RequestOptions requestOptions = new("/v1/shipments/{shipment_id}/tags/{tag_name}");

        requestOptions.PathParameters.Add("shipment_id", ClientUtils.ParameterToString(shipmentId)); // path parameter
        requestOptions.PathParameters.Add("tag_name", ClientUtils.ParameterToString(tagName)); // path parameter

        requestOptions.Operation = "ShipmentsApi.TagShipment";

        return await GetHttpResponse<TagShipmentResponseBody>(HttpMethods.Post, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
    }

    /// <summary>
    /// Remove Tag from Shipment Remove an existing tag from the Shipment object
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="tagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    public Task<ShipEngineResponse<string>> UntagShipment(string shipmentId, string tagName, CancellationToken cancellationToken = default)
    {
        return UntagShipment(_client, shipmentId, tagName, cancellationToken);
    }

    /// <summary>
    /// Remove Tag from Shipment Remove an existing tag from the Shipment object
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="tagName"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (string)</returns>
    public async Task<ShipEngineResponse<string>> UntagShipment(HttpClient methodClient, string shipmentId, string tagName, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null)
        {
            throw new ArgumentNullException(nameof(shipmentId));
        }

        // verify the required parameter 'tagName' is set
        if (tagName == null)
        {
            throw new ArgumentNullException(nameof(tagName));
        }


        RequestOptions requestOptions = new("/v1/shipments/{shipment_id}/tags/{tag_name}");

        requestOptions.PathParameters.Add("shipment_id", ClientUtils.ParameterToString(shipmentId)); // path parameter
        requestOptions.PathParameters.Add("tag_name", ClientUtils.ParameterToString(tagName)); // path parameter

        requestOptions.Operation = "ShipmentsApi.UntagShipment";

        return await GetHttpResponse<string>(HttpMethods.Delete, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
    }

    /// <summary>
    /// Update Shipment By ID Update a shipment object based on its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="updateShipmentRequestBody"></param>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (UpdateShipmentResponseBody)</returns>
    public Task<ShipEngineResponse<UpdateShipmentResponseBody>> UpdateShipment(UpdateShipmentRequestBody updateShipmentRequestBody, string shipmentId, CancellationToken cancellationToken = default)
    {
        return UpdateShipment(_client, updateShipmentRequestBody, shipmentId, cancellationToken);
    }

    /// <summary>
    /// Update Shipment By ID Update a shipment object based on its ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="updateShipmentRequestBody"></param>
    /// <param name="shipmentId">Shipment ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ShipEngineResponse (UpdateShipmentResponseBody)</returns>
    public async Task<ShipEngineResponse<UpdateShipmentResponseBody>> UpdateShipment(HttpClient methodClient, UpdateShipmentRequestBody updateShipmentRequestBody, string shipmentId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'updateShipmentRequestBody' is set
        if (updateShipmentRequestBody == null)
        {
            throw new ArgumentNullException(nameof(updateShipmentRequestBody));
        }

        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null)
        {
            throw new ArgumentNullException(nameof(shipmentId));
        }


        RequestOptions requestOptions = new("/v1/shipments/{shipment_id}");

        requestOptions.PathParameters.Add("shipment_id", ClientUtils.ParameterToString(shipmentId)); // path parameter
        requestOptions.Data = JsonSerializer.Serialize(updateShipmentRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "ShipmentsApi.UpdateShipment";

        return await GetHttpResponse<UpdateShipmentResponseBody>(HttpMethods.Put, requestOptions.FullPath(), requestOptions.Data, methodClient, _config, cancellationToken);
    }

}
