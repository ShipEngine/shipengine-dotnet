/*
 * ShipEngine API
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using ShipEngineSDK.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace ShipEngineSDK;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial interface IShipEngine
{
    /// <summary>
    /// Add Funds To Insurance You may need to auto fund your account from time to time. For example, if you don&#39;t normally ship items over $100, and may want to add funds to insurance rather than keeping the account funded. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="addFundsToInsuranceRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AddFundsToInsuranceResponseBody)</returns>
    Task<AddFundsToInsuranceResponseBody> AddFundsToInsurance(AddFundsToInsuranceRequestBody addFundsToInsuranceRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Add Funds To Insurance You may need to auto fund your account from time to time. For example, if you don&#39;t normally ship items over $100, and may want to add funds to insurance rather than keeping the account funded. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="addFundsToInsuranceRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AddFundsToInsuranceResponseBody)</returns>
    Task<AddFundsToInsuranceResponseBody> AddFundsToInsurance(HttpClient methodClient, AddFundsToInsuranceRequestBody addFundsToInsuranceRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Connect a Shipsurance Account Connect a Shipsurance Account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="connectInsurerRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    Task<Object> ConnectInsurer(ConnectInsurerRequestBody connectInsurerRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Connect a Shipsurance Account Connect a Shipsurance Account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="connectInsurerRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    Task<Object> ConnectInsurer(HttpClient methodClient, ConnectInsurerRequestBody connectInsurerRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Disconnect a Shipsurance Account Disconnect a Shipsurance Account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    Task<Object> DisconnectInsurer(CancellationToken cancellationToken = default);

    /// <summary>
    /// Disconnect a Shipsurance Account Disconnect a Shipsurance Account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    Task<Object> DisconnectInsurer(HttpClient methodClient, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Insurance Funds Balance Retrieve the balance of your Shipsurance account.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetInsuranceBalanceResponseBody)</returns>
    Task<GetInsuranceBalanceResponseBody> GetInsuranceBalance(CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Insurance Funds Balance Retrieve the balance of your Shipsurance account.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetInsuranceBalanceResponseBody)</returns>
    Task<GetInsuranceBalanceResponseBody> GetInsuranceBalance(HttpClient methodClient, CancellationToken cancellationToken = default);

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class ShipEngine
{
    /// <summary>
    /// Add Funds To Insurance You may need to auto fund your account from time to time. For example, if you don&#39;t normally ship items over $100, and may want to add funds to insurance rather than keeping the account funded. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="addFundsToInsuranceRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AddFundsToInsuranceResponseBody)</returns>
    public Task<AddFundsToInsuranceResponseBody> AddFundsToInsurance(AddFundsToInsuranceRequestBody addFundsToInsuranceRequestBody, CancellationToken cancellationToken = default)
    {
        return AddFundsToInsurance(_client, addFundsToInsuranceRequestBody, cancellationToken);
    }

    /// <summary>
    /// Add Funds To Insurance You may need to auto fund your account from time to time. For example, if you don&#39;t normally ship items over $100, and may want to add funds to insurance rather than keeping the account funded. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="addFundsToInsuranceRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AddFundsToInsuranceResponseBody)</returns>
    public async Task<AddFundsToInsuranceResponseBody> AddFundsToInsurance(HttpClient methodClient, AddFundsToInsuranceRequestBody addFundsToInsuranceRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'addFundsToInsuranceRequestBody' is set
        if (addFundsToInsuranceRequestBody == null)
        {
            throw new ArgumentNullException(nameof(addFundsToInsuranceRequestBody));
        }


        RequestOptions requestOptions = new("/v1/insurance/shipsurance/add_funds");

        requestOptions.Data = JsonSerializer.Serialize(addFundsToInsuranceRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "InsuranceApi.AddFundsToInsurance";

        var result = await SendHttpRequestAsync<AddFundsToInsuranceResponseBody>(HttpMethods.Patch, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// Connect a Shipsurance Account Connect a Shipsurance Account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="connectInsurerRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    public Task<Object> ConnectInsurer(ConnectInsurerRequestBody connectInsurerRequestBody, CancellationToken cancellationToken = default)
    {
        return ConnectInsurer(_client, connectInsurerRequestBody, cancellationToken);
    }

    /// <summary>
    /// Connect a Shipsurance Account Connect a Shipsurance Account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="connectInsurerRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    public async Task<Object> ConnectInsurer(HttpClient methodClient, ConnectInsurerRequestBody connectInsurerRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'connectInsurerRequestBody' is set
        if (connectInsurerRequestBody == null)
        {
            throw new ArgumentNullException(nameof(connectInsurerRequestBody));
        }


        RequestOptions requestOptions = new("/v1/connections/insurance/shipsurance");

        requestOptions.Data = JsonSerializer.Serialize(connectInsurerRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "InsuranceApi.ConnectInsurer";

        var result = await SendHttpRequestAsync<Object>(HttpMethods.Post, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// Disconnect a Shipsurance Account Disconnect a Shipsurance Account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    public Task<Object> DisconnectInsurer(CancellationToken cancellationToken = default)
    {
        return DisconnectInsurer(_client, cancellationToken);
    }

    /// <summary>
    /// Disconnect a Shipsurance Account Disconnect a Shipsurance Account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    public async Task<Object> DisconnectInsurer(HttpClient methodClient, CancellationToken cancellationToken = default)
    {

        RequestOptions requestOptions = new("/v1/connections/insurance/shipsurance");


        requestOptions.Operation = "InsuranceApi.DisconnectInsurer";

        var result = await SendHttpRequestAsync<Object>(HttpMethods.Delete, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// Get Insurance Funds Balance Retrieve the balance of your Shipsurance account.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetInsuranceBalanceResponseBody)</returns>
    public Task<GetInsuranceBalanceResponseBody> GetInsuranceBalance(CancellationToken cancellationToken = default)
    {
        return GetInsuranceBalance(_client, cancellationToken);
    }

    /// <summary>
    /// Get Insurance Funds Balance Retrieve the balance of your Shipsurance account.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetInsuranceBalanceResponseBody)</returns>
    public async Task<GetInsuranceBalanceResponseBody> GetInsuranceBalance(HttpClient methodClient, CancellationToken cancellationToken = default)
    {

        RequestOptions requestOptions = new("/v1/insurance/shipsurance/balance");


        requestOptions.Operation = "InsuranceApi.GetInsuranceBalance";

        var result = await SendHttpRequestAsync<GetInsuranceBalanceResponseBody>(HttpMethods.Get, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

}