/*
 * ShipEngine API
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using ShipEngineSDK.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace ShipEngineSDK;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial interface IShipEngine
{
    /// <summary>
    /// Add to a Batch Add a Shipment or Rate to a Batch
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="addToBatchRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> AddToBatch(string batchId, AddToBatchRequestBody addToBatchRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Add to a Batch Add a Shipment or Rate to a Batch
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="addToBatchRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> AddToBatch(Config methodConfig, string batchId, AddToBatchRequestBody addToBatchRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Add to a Batch Add a Shipment or Rate to a Batch
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="addToBatchRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> AddToBatch(HttpClient methodClient, Config methodConfig, string batchId, AddToBatchRequestBody addToBatchRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Create A Batch Create a Batch
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createBatchRequest"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateBatchResponseBody)</returns>
    Task<CreateBatchResponseBody> CreateBatch(CreateBatchRequest createBatchRequest, CancellationToken cancellationToken = default);

    /// <summary>
    /// Create A Batch Create a Batch
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createBatchRequest"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateBatchResponseBody)</returns>
    Task<CreateBatchResponseBody> CreateBatch(Config methodConfig, CreateBatchRequest createBatchRequest, CancellationToken cancellationToken = default);

    /// <summary>
    /// Create A Batch Create a Batch
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createBatchRequest"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateBatchResponseBody)</returns>
    Task<CreateBatchResponseBody> CreateBatch(HttpClient methodClient, Config methodConfig, CreateBatchRequest createBatchRequest, CancellationToken cancellationToken = default);

    /// <summary>
    /// Delete Batch By Id Delete Batch By Id
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> DeleteBatch(string batchId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Delete Batch By Id Delete Batch By Id
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> DeleteBatch(Config methodConfig, string batchId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Delete Batch By Id Delete Batch By Id
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> DeleteBatch(HttpClient methodClient, Config methodConfig, string batchId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Batch By External ID Get Batch By External ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="externalBatchId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetBatchByExternalIdResponseBody)</returns>
    Task<GetBatchByExternalIdResponseBody> GetBatchByExternalId(string externalBatchId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Batch By External ID Get Batch By External ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="externalBatchId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetBatchByExternalIdResponseBody)</returns>
    Task<GetBatchByExternalIdResponseBody> GetBatchByExternalId(Config methodConfig, string externalBatchId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Batch By External ID Get Batch By External ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="externalBatchId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetBatchByExternalIdResponseBody)</returns>
    Task<GetBatchByExternalIdResponseBody> GetBatchByExternalId(HttpClient methodClient, Config methodConfig, string externalBatchId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Batch By ID Get Batch By ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetBatchByIdResponseBody)</returns>
    Task<GetBatchByIdResponseBody> GetBatchById(string batchId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Batch By ID Get Batch By ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetBatchByIdResponseBody)</returns>
    Task<GetBatchByIdResponseBody> GetBatchById(Config methodConfig, string batchId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Batch By ID Get Batch By ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetBatchByIdResponseBody)</returns>
    Task<GetBatchByIdResponseBody> GetBatchById(HttpClient methodClient, Config methodConfig, string batchId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Batch Errors Error handling in batches are handled differently than in a single synchronous request. You must retrieve the status of your batch by [getting a batch](https://www.shipengine.com/docs/reference/get-batch-by-id/) and getting an overview of the statuses or you can list errors directly here below to get detailed information about the errors. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pagesize"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListBatchErrorsResponseBody)</returns>
    Task<ListBatchErrorsResponseBody> ListBatchErrors(string batchId, int? page, int? pagesize, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Batch Errors Error handling in batches are handled differently than in a single synchronous request. You must retrieve the status of your batch by [getting a batch](https://www.shipengine.com/docs/reference/get-batch-by-id/) and getting an overview of the statuses or you can list errors directly here below to get detailed information about the errors. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pagesize"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListBatchErrorsResponseBody)</returns>
    Task<ListBatchErrorsResponseBody> ListBatchErrors(Config methodConfig, string batchId, int? page, int? pagesize, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Batch Errors Error handling in batches are handled differently than in a single synchronous request. You must retrieve the status of your batch by [getting a batch](https://www.shipengine.com/docs/reference/get-batch-by-id/) and getting an overview of the statuses or you can list errors directly here below to get detailed information about the errors. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pagesize"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListBatchErrorsResponseBody)</returns>
    Task<ListBatchErrorsResponseBody> ListBatchErrors(HttpClient methodClient, Config methodConfig, string batchId, int? page, int? pagesize, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Batches List Batches associated with your Shipengine account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="status"> (optional)</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pageSize">The number of results to return per response. (optional, default to 25)</param>
    /// <param name="sortDir">Controls the sort order of the query. (optional)</param>
    /// <param name="batchNumber">Batch Number (optional)</param>
    /// <param name="sortBy"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListBatchesResponseBody)</returns>
    Task<ListBatchesResponseBody> ListBatches(BatchStatus? status, int? page, int? pageSize, SortDir? sortDir, string batchNumber, BatchesSortBy? sortBy, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Batches List Batches associated with your Shipengine account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="status"> (optional)</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pageSize">The number of results to return per response. (optional, default to 25)</param>
    /// <param name="sortDir">Controls the sort order of the query. (optional)</param>
    /// <param name="batchNumber">Batch Number (optional)</param>
    /// <param name="sortBy"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListBatchesResponseBody)</returns>
    Task<ListBatchesResponseBody> ListBatches(Config methodConfig, BatchStatus? status, int? page, int? pageSize, SortDir? sortDir, string batchNumber, BatchesSortBy? sortBy, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Batches List Batches associated with your Shipengine account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="status"> (optional)</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pageSize">The number of results to return per response. (optional, default to 25)</param>
    /// <param name="sortDir">Controls the sort order of the query. (optional)</param>
    /// <param name="batchNumber">Batch Number (optional)</param>
    /// <param name="sortBy"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListBatchesResponseBody)</returns>
    Task<ListBatchesResponseBody> ListBatches(HttpClient methodClient, Config methodConfig, BatchStatus? status, int? page, int? pageSize, SortDir? sortDir, string batchNumber, BatchesSortBy? sortBy, CancellationToken cancellationToken = default);

    /// <summary>
    /// Process Batch ID Labels Process Batch ID Labels
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="processBatchRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> ProcessBatch(string batchId, ProcessBatchRequestBody processBatchRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Process Batch ID Labels Process Batch ID Labels
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="processBatchRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> ProcessBatch(Config methodConfig, string batchId, ProcessBatchRequestBody processBatchRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Process Batch ID Labels Process Batch ID Labels
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="processBatchRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> ProcessBatch(HttpClient methodClient, Config methodConfig, string batchId, ProcessBatchRequestBody processBatchRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Remove From Batch Remove a shipment or rate from a batch
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="removeFromBatchRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> RemoveFromBatch(string batchId, RemoveFromBatchRequestBody removeFromBatchRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Remove From Batch Remove a shipment or rate from a batch
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="removeFromBatchRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> RemoveFromBatch(Config methodConfig, string batchId, RemoveFromBatchRequestBody removeFromBatchRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Remove From Batch Remove a shipment or rate from a batch
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="removeFromBatchRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> RemoveFromBatch(HttpClient methodClient, Config methodConfig, string batchId, RemoveFromBatchRequestBody removeFromBatchRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Batch By Id Update Batch By Id
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> UpdateBatch(string batchId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Batch By Id Update Batch By Id
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> UpdateBatch(Config methodConfig, string batchId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Batch By Id Update Batch By Id
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> UpdateBatch(HttpClient methodClient, Config methodConfig, string batchId, CancellationToken cancellationToken = default);

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class ShipEngine
{
    /// <summary>
    /// Add to a Batch Add a Shipment or Rate to a Batch
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="addToBatchRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public Task<string> AddToBatch(string batchId, AddToBatchRequestBody addToBatchRequestBody, CancellationToken cancellationToken = default)
    {
        return AddToBatch(_client, _config, batchId, addToBatchRequestBody, cancellationToken);
    }

    /// <summary>
    /// Add to a Batch Add a Shipment or Rate to a Batch
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="addToBatchRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> AddToBatch(Config methodConfig, string batchId, AddToBatchRequestBody addToBatchRequestBody, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await AddToBatch(methodClient, methodConfig, batchId, addToBatchRequestBody, cancellationToken);
    }

    /// <summary>
    /// Add to a Batch Add a Shipment or Rate to a Batch
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="addToBatchRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> AddToBatch(HttpClient methodClient, Config methodConfig, string batchId, AddToBatchRequestBody addToBatchRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'batchId' is set
        if (batchId == null)
        {
            throw new ArgumentNullException(nameof(batchId));
        }

        // verify the required parameter 'addToBatchRequestBody' is set
        if (addToBatchRequestBody == null)
        {
            throw new ArgumentNullException(nameof(addToBatchRequestBody));
        }


        RequestOptions requestOptions = new("/v1/batches/{batch_id}/add");

        requestOptions.PathParameters.Add("batch_id", ShipEngineSDK.Client.ClientUtils.ParameterToString(batchId)); // path parameter
        requestOptions.Data = JsonSerializer.Serialize(addToBatchRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "BatchesApi.AddToBatch";

        var result = await SendHttpRequestAsync<string>(HttpMethods.Post, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Create A Batch Create a Batch
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createBatchRequest"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateBatchResponseBody)</returns>
    public Task<CreateBatchResponseBody> CreateBatch(CreateBatchRequest createBatchRequest, CancellationToken cancellationToken = default)
    {
        return CreateBatch(_client, _config, createBatchRequest, cancellationToken);
    }

    /// <summary>
    /// Create A Batch Create a Batch
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createBatchRequest"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateBatchResponseBody)</returns>
    public async Task<CreateBatchResponseBody> CreateBatch(Config methodConfig, CreateBatchRequest createBatchRequest, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await CreateBatch(methodClient, methodConfig, createBatchRequest, cancellationToken);
    }

    /// <summary>
    /// Create A Batch Create a Batch
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createBatchRequest"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreateBatchResponseBody)</returns>
    public async Task<CreateBatchResponseBody> CreateBatch(HttpClient methodClient, Config methodConfig, CreateBatchRequest createBatchRequest, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'createBatchRequest' is set
        if (createBatchRequest == null)
        {
            throw new ArgumentNullException(nameof(createBatchRequest));
        }


        RequestOptions requestOptions = new("/v1/batches");

        requestOptions.Data = JsonSerializer.Serialize(createBatchRequest, JsonSerializerOptions);

        requestOptions.Operation = "BatchesApi.CreateBatch";

        var result = await SendHttpRequestAsync<CreateBatchResponseBody>(HttpMethods.Post, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Delete Batch By Id Delete Batch By Id
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public Task<string> DeleteBatch(string batchId, CancellationToken cancellationToken = default)
    {
        return DeleteBatch(_client, _config, batchId, cancellationToken);
    }

    /// <summary>
    /// Delete Batch By Id Delete Batch By Id
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> DeleteBatch(Config methodConfig, string batchId, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await DeleteBatch(methodClient, methodConfig, batchId, cancellationToken);
    }

    /// <summary>
    /// Delete Batch By Id Delete Batch By Id
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> DeleteBatch(HttpClient methodClient, Config methodConfig, string batchId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'batchId' is set
        if (batchId == null)
        {
            throw new ArgumentNullException(nameof(batchId));
        }


        RequestOptions requestOptions = new("/v1/batches/{batch_id}");

        requestOptions.PathParameters.Add("batch_id", ShipEngineSDK.Client.ClientUtils.ParameterToString(batchId)); // path parameter

        requestOptions.Operation = "BatchesApi.DeleteBatch";

        var result = await SendHttpRequestAsync<string>(HttpMethods.Delete, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Get Batch By External ID Get Batch By External ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="externalBatchId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetBatchByExternalIdResponseBody)</returns>
    public Task<GetBatchByExternalIdResponseBody> GetBatchByExternalId(string externalBatchId, CancellationToken cancellationToken = default)
    {
        return GetBatchByExternalId(_client, _config, externalBatchId, cancellationToken);
    }

    /// <summary>
    /// Get Batch By External ID Get Batch By External ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="externalBatchId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetBatchByExternalIdResponseBody)</returns>
    public async Task<GetBatchByExternalIdResponseBody> GetBatchByExternalId(Config methodConfig, string externalBatchId, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await GetBatchByExternalId(methodClient, methodConfig, externalBatchId, cancellationToken);
    }

    /// <summary>
    /// Get Batch By External ID Get Batch By External ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="externalBatchId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetBatchByExternalIdResponseBody)</returns>
    public async Task<GetBatchByExternalIdResponseBody> GetBatchByExternalId(HttpClient methodClient, Config methodConfig, string externalBatchId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'externalBatchId' is set
        if (externalBatchId == null)
        {
            throw new ArgumentNullException(nameof(externalBatchId));
        }


        RequestOptions requestOptions = new("/v1/batches/external_batch_id/{external_batch_id}");

        requestOptions.PathParameters.Add("external_batch_id", ShipEngineSDK.Client.ClientUtils.ParameterToString(externalBatchId)); // path parameter

        requestOptions.Operation = "BatchesApi.GetBatchByExternalId";

        var result = await SendHttpRequestAsync<GetBatchByExternalIdResponseBody>(HttpMethods.Get, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Get Batch By ID Get Batch By ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetBatchByIdResponseBody)</returns>
    public Task<GetBatchByIdResponseBody> GetBatchById(string batchId, CancellationToken cancellationToken = default)
    {
        return GetBatchById(_client, _config, batchId, cancellationToken);
    }

    /// <summary>
    /// Get Batch By ID Get Batch By ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetBatchByIdResponseBody)</returns>
    public async Task<GetBatchByIdResponseBody> GetBatchById(Config methodConfig, string batchId, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await GetBatchById(methodClient, methodConfig, batchId, cancellationToken);
    }

    /// <summary>
    /// Get Batch By ID Get Batch By ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetBatchByIdResponseBody)</returns>
    public async Task<GetBatchByIdResponseBody> GetBatchById(HttpClient methodClient, Config methodConfig, string batchId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'batchId' is set
        if (batchId == null)
        {
            throw new ArgumentNullException(nameof(batchId));
        }


        RequestOptions requestOptions = new("/v1/batches/{batch_id}");

        requestOptions.PathParameters.Add("batch_id", ShipEngineSDK.Client.ClientUtils.ParameterToString(batchId)); // path parameter

        requestOptions.Operation = "BatchesApi.GetBatchById";

        var result = await SendHttpRequestAsync<GetBatchByIdResponseBody>(HttpMethods.Get, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Get Batch Errors Error handling in batches are handled differently than in a single synchronous request. You must retrieve the status of your batch by [getting a batch](https://www.shipengine.com/docs/reference/get-batch-by-id/) and getting an overview of the statuses or you can list errors directly here below to get detailed information about the errors. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pagesize"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListBatchErrorsResponseBody)</returns>
    public Task<ListBatchErrorsResponseBody> ListBatchErrors(string batchId, int? page = default, int? pagesize = default, CancellationToken cancellationToken = default)
    {
        return ListBatchErrors(_client, _config, batchId, page, pagesize, cancellationToken);
    }

    /// <summary>
    /// Get Batch Errors Error handling in batches are handled differently than in a single synchronous request. You must retrieve the status of your batch by [getting a batch](https://www.shipengine.com/docs/reference/get-batch-by-id/) and getting an overview of the statuses or you can list errors directly here below to get detailed information about the errors. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pagesize"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListBatchErrorsResponseBody)</returns>
    public async Task<ListBatchErrorsResponseBody> ListBatchErrors(Config methodConfig, string batchId, int? page = default, int? pagesize = default, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await ListBatchErrors(methodClient, methodConfig, batchId, page, pagesize, cancellationToken);
    }

    /// <summary>
    /// Get Batch Errors Error handling in batches are handled differently than in a single synchronous request. You must retrieve the status of your batch by [getting a batch](https://www.shipengine.com/docs/reference/get-batch-by-id/) and getting an overview of the statuses or you can list errors directly here below to get detailed information about the errors. 
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pagesize"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListBatchErrorsResponseBody)</returns>
    public async Task<ListBatchErrorsResponseBody> ListBatchErrors(HttpClient methodClient, Config methodConfig, string batchId, int? page = default, int? pagesize = default, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'batchId' is set
        if (batchId == null)
        {
            throw new ArgumentNullException(nameof(batchId));
        }


        RequestOptions requestOptions = new("/v1/batches/{batch_id}/errors");

        requestOptions.PathParameters.Add("batch_id", ShipEngineSDK.Client.ClientUtils.ParameterToString(batchId)); // path parameter
        if (page != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.Client.ClientUtils.ParameterToMultiMap("", "page", page));
        }
        if (pagesize != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.Client.ClientUtils.ParameterToMultiMap("", "pagesize", pagesize));
        }

        requestOptions.Operation = "BatchesApi.ListBatchErrors";

        var result = await SendHttpRequestAsync<ListBatchErrorsResponseBody>(HttpMethods.Get, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// List Batches List Batches associated with your Shipengine account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="status"> (optional)</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pageSize">The number of results to return per response. (optional, default to 25)</param>
    /// <param name="sortDir">Controls the sort order of the query. (optional)</param>
    /// <param name="batchNumber">Batch Number (optional)</param>
    /// <param name="sortBy"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListBatchesResponseBody)</returns>
    public Task<ListBatchesResponseBody> ListBatches(BatchStatus? status = default, int? page = default, int? pageSize = default, SortDir? sortDir = default, string batchNumber = default, BatchesSortBy? sortBy = default, CancellationToken cancellationToken = default)
    {
        return ListBatches(_client, _config, status, page, pageSize, sortDir, batchNumber, sortBy, cancellationToken);
    }

    /// <summary>
    /// List Batches List Batches associated with your Shipengine account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="status"> (optional)</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pageSize">The number of results to return per response. (optional, default to 25)</param>
    /// <param name="sortDir">Controls the sort order of the query. (optional)</param>
    /// <param name="batchNumber">Batch Number (optional)</param>
    /// <param name="sortBy"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListBatchesResponseBody)</returns>
    public async Task<ListBatchesResponseBody> ListBatches(Config methodConfig, BatchStatus? status = default, int? page = default, int? pageSize = default, SortDir? sortDir = default, string batchNumber = default, BatchesSortBy? sortBy = default, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await ListBatches(methodClient, methodConfig, status, page, pageSize, sortDir, batchNumber, sortBy, cancellationToken);
    }

    /// <summary>
    /// List Batches List Batches associated with your Shipengine account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="status"> (optional)</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pageSize">The number of results to return per response. (optional, default to 25)</param>
    /// <param name="sortDir">Controls the sort order of the query. (optional)</param>
    /// <param name="batchNumber">Batch Number (optional)</param>
    /// <param name="sortBy"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListBatchesResponseBody)</returns>
    public async Task<ListBatchesResponseBody> ListBatches(HttpClient methodClient, Config methodConfig, BatchStatus? status = default, int? page = default, int? pageSize = default, SortDir? sortDir = default, string batchNumber = default, BatchesSortBy? sortBy = default, CancellationToken cancellationToken = default)
    {

        RequestOptions requestOptions = new("/v1/batches");

        if (status != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.Client.ClientUtils.ParameterToMultiMap("", "status", status));
        }
        if (page != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.Client.ClientUtils.ParameterToMultiMap("", "page", page));
        }
        if (pageSize != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
        }
        if (sortDir != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.Client.ClientUtils.ParameterToMultiMap("", "sort_dir", sortDir));
        }
        if (batchNumber != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.Client.ClientUtils.ParameterToMultiMap("", "batch_number", batchNumber));
        }
        if (sortBy != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
        }

        requestOptions.Operation = "BatchesApi.ListBatches";

        var result = await SendHttpRequestAsync<ListBatchesResponseBody>(HttpMethods.Get, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Process Batch ID Labels Process Batch ID Labels
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="processBatchRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public Task<string> ProcessBatch(string batchId, ProcessBatchRequestBody processBatchRequestBody, CancellationToken cancellationToken = default)
    {
        return ProcessBatch(_client, _config, batchId, processBatchRequestBody, cancellationToken);
    }

    /// <summary>
    /// Process Batch ID Labels Process Batch ID Labels
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="processBatchRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> ProcessBatch(Config methodConfig, string batchId, ProcessBatchRequestBody processBatchRequestBody, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await ProcessBatch(methodClient, methodConfig, batchId, processBatchRequestBody, cancellationToken);
    }

    /// <summary>
    /// Process Batch ID Labels Process Batch ID Labels
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="processBatchRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> ProcessBatch(HttpClient methodClient, Config methodConfig, string batchId, ProcessBatchRequestBody processBatchRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'batchId' is set
        if (batchId == null)
        {
            throw new ArgumentNullException(nameof(batchId));
        }

        // verify the required parameter 'processBatchRequestBody' is set
        if (processBatchRequestBody == null)
        {
            throw new ArgumentNullException(nameof(processBatchRequestBody));
        }


        RequestOptions requestOptions = new("/v1/batches/{batch_id}/process/labels");

        requestOptions.PathParameters.Add("batch_id", ShipEngineSDK.Client.ClientUtils.ParameterToString(batchId)); // path parameter
        requestOptions.Data = JsonSerializer.Serialize(processBatchRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "BatchesApi.ProcessBatch";

        var result = await SendHttpRequestAsync<string>(HttpMethods.Post, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Remove From Batch Remove a shipment or rate from a batch
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="removeFromBatchRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public Task<string> RemoveFromBatch(string batchId, RemoveFromBatchRequestBody removeFromBatchRequestBody, CancellationToken cancellationToken = default)
    {
        return RemoveFromBatch(_client, _config, batchId, removeFromBatchRequestBody, cancellationToken);
    }

    /// <summary>
    /// Remove From Batch Remove a shipment or rate from a batch
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="removeFromBatchRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> RemoveFromBatch(Config methodConfig, string batchId, RemoveFromBatchRequestBody removeFromBatchRequestBody, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await RemoveFromBatch(methodClient, methodConfig, batchId, removeFromBatchRequestBody, cancellationToken);
    }

    /// <summary>
    /// Remove From Batch Remove a shipment or rate from a batch
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="removeFromBatchRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> RemoveFromBatch(HttpClient methodClient, Config methodConfig, string batchId, RemoveFromBatchRequestBody removeFromBatchRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'batchId' is set
        if (batchId == null)
        {
            throw new ArgumentNullException(nameof(batchId));
        }

        // verify the required parameter 'removeFromBatchRequestBody' is set
        if (removeFromBatchRequestBody == null)
        {
            throw new ArgumentNullException(nameof(removeFromBatchRequestBody));
        }


        RequestOptions requestOptions = new("/v1/batches/{batch_id}/remove");

        requestOptions.PathParameters.Add("batch_id", ShipEngineSDK.Client.ClientUtils.ParameterToString(batchId)); // path parameter
        requestOptions.Data = JsonSerializer.Serialize(removeFromBatchRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "BatchesApi.RemoveFromBatch";

        var result = await SendHttpRequestAsync<string>(HttpMethods.Post, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Update Batch By Id Update Batch By Id
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public Task<string> UpdateBatch(string batchId, CancellationToken cancellationToken = default)
    {
        return UpdateBatch(_client, _config, batchId, cancellationToken);
    }

    /// <summary>
    /// Update Batch By Id Update Batch By Id
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> UpdateBatch(Config methodConfig, string batchId, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await UpdateBatch(methodClient, methodConfig, batchId, cancellationToken);
    }

    /// <summary>
    /// Update Batch By Id Update Batch By Id
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="batchId">Batch ID</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> UpdateBatch(HttpClient methodClient, Config methodConfig, string batchId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'batchId' is set
        if (batchId == null)
        {
            throw new ArgumentNullException(nameof(batchId));
        }


        RequestOptions requestOptions = new("/v1/batches/{batch_id}");

        requestOptions.PathParameters.Add("batch_id", ShipEngineSDK.Client.ClientUtils.ParameterToString(batchId)); // path parameter

        requestOptions.Operation = "BatchesApi.UpdateBatch";

        var result = await SendHttpRequestAsync<string>(HttpMethods.Put, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

}