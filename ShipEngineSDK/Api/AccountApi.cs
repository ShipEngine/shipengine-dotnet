/*
 * ShipEngine API
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using ShipEngineSDK.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace ShipEngineSDK;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial interface IShipEngine
{
    /// <summary>
    /// Create an Account Image Create an Account Image
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createAccountSettingsImageRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetAccountSettingsImagesResponseBody)</returns>
    Task<GetAccountSettingsImagesResponseBody> CreateAccountImage(CreateAccountSettingsImageRequestBody createAccountSettingsImageRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Create an Account Image Create an Account Image
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createAccountSettingsImageRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetAccountSettingsImagesResponseBody)</returns>
    Task<GetAccountSettingsImagesResponseBody> CreateAccountImage(Config methodConfig, CreateAccountSettingsImageRequestBody createAccountSettingsImageRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Create an Account Image Create an Account Image
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createAccountSettingsImageRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetAccountSettingsImagesResponseBody)</returns>
    Task<GetAccountSettingsImagesResponseBody> CreateAccountImage(HttpClient methodClient, Config methodConfig, CreateAccountSettingsImageRequestBody createAccountSettingsImageRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Delete Account Image By Id Delete Account Image By Id
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelImageId">Label Image Id</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> DeleteAccountImageById(string labelImageId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Delete Account Image By Id Delete Account Image By Id
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelImageId">Label Image Id</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> DeleteAccountImageById(Config methodConfig, string labelImageId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Delete Account Image By Id Delete Account Image By Id
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelImageId">Label Image Id</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> DeleteAccountImageById(HttpClient methodClient, Config methodConfig, string labelImageId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Account Image By ID Retrieve information for an account image.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelImageId">Label Image Id</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetAccountSettingsImagesResponseBody)</returns>
    Task<GetAccountSettingsImagesResponseBody> GetAccountSettingsImagesById(string labelImageId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Account Image By ID Retrieve information for an account image.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelImageId">Label Image Id</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetAccountSettingsImagesResponseBody)</returns>
    Task<GetAccountSettingsImagesResponseBody> GetAccountSettingsImagesById(Config methodConfig, string labelImageId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Account Image By ID Retrieve information for an account image.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelImageId">Label Image Id</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetAccountSettingsImagesResponseBody)</returns>
    Task<GetAccountSettingsImagesResponseBody> GetAccountSettingsImagesById(HttpClient methodClient, Config methodConfig, string labelImageId, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Account Images List all account images for the ShipEngine account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListAccountSettingsImagesResponseBody)</returns>
    Task<ListAccountSettingsImagesResponseBody> ListAccountImages(CancellationToken cancellationToken = default);

    /// <summary>
    /// List Account Images List all account images for the ShipEngine account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListAccountSettingsImagesResponseBody)</returns>
    Task<ListAccountSettingsImagesResponseBody> ListAccountImages(Config methodConfig, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Account Images List all account images for the ShipEngine account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListAccountSettingsImagesResponseBody)</returns>
    Task<ListAccountSettingsImagesResponseBody> ListAccountImages(HttpClient methodClient, Config methodConfig, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Account Settings List all account settings for the ShipEngine account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetAccountSettingsResponseBody)</returns>
    Task<GetAccountSettingsResponseBody> ListAccountSettings(CancellationToken cancellationToken = default);

    /// <summary>
    /// List Account Settings List all account settings for the ShipEngine account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetAccountSettingsResponseBody)</returns>
    Task<GetAccountSettingsResponseBody> ListAccountSettings(Config methodConfig, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Account Settings List all account settings for the ShipEngine account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetAccountSettingsResponseBody)</returns>
    Task<GetAccountSettingsResponseBody> ListAccountSettings(HttpClient methodClient, Config methodConfig, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Account Image By ID Update information for an account image.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelImageId">Label Image Id</param>
    /// <param name="updateAccountSettingsImageRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> UpdateAccountSettingsImagesById(string labelImageId, UpdateAccountSettingsImageRequestBody updateAccountSettingsImageRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Account Image By ID Update information for an account image.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelImageId">Label Image Id</param>
    /// <param name="updateAccountSettingsImageRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> UpdateAccountSettingsImagesById(Config methodConfig, string labelImageId, UpdateAccountSettingsImageRequestBody updateAccountSettingsImageRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Update Account Image By ID Update information for an account image.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelImageId">Label Image Id</param>
    /// <param name="updateAccountSettingsImageRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    Task<string> UpdateAccountSettingsImagesById(HttpClient methodClient, Config methodConfig, string labelImageId, UpdateAccountSettingsImageRequestBody updateAccountSettingsImageRequestBody, CancellationToken cancellationToken = default);

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class ShipEngine
{
    /// <summary>
    /// Create an Account Image Create an Account Image
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createAccountSettingsImageRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetAccountSettingsImagesResponseBody)</returns>
    public Task<GetAccountSettingsImagesResponseBody> CreateAccountImage(CreateAccountSettingsImageRequestBody createAccountSettingsImageRequestBody, CancellationToken cancellationToken = default)
    {
        return CreateAccountImage(_client, _config, createAccountSettingsImageRequestBody, cancellationToken);
    }

    /// <summary>
    /// Create an Account Image Create an Account Image
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createAccountSettingsImageRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetAccountSettingsImagesResponseBody)</returns>
    public async Task<GetAccountSettingsImagesResponseBody> CreateAccountImage(Config methodConfig, CreateAccountSettingsImageRequestBody createAccountSettingsImageRequestBody, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await CreateAccountImage(methodClient, methodConfig, createAccountSettingsImageRequestBody, cancellationToken);
    }

    /// <summary>
    /// Create an Account Image Create an Account Image
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="createAccountSettingsImageRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetAccountSettingsImagesResponseBody)</returns>
    public async Task<GetAccountSettingsImagesResponseBody> CreateAccountImage(HttpClient methodClient, Config methodConfig, CreateAccountSettingsImageRequestBody createAccountSettingsImageRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'createAccountSettingsImageRequestBody' is set
        if (createAccountSettingsImageRequestBody == null)
        {
            throw new ArgumentNullException(nameof(createAccountSettingsImageRequestBody));
        }


        RequestOptions requestOptions = new("/v1/account/settings/images");

        requestOptions.Data = JsonSerializer.Serialize(createAccountSettingsImageRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "AccountApi.CreateAccountImage";

        var result = await SendHttpRequestAsync<GetAccountSettingsImagesResponseBody>(HttpMethods.Post, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Delete Account Image By Id Delete Account Image By Id
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelImageId">Label Image Id</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public Task<string> DeleteAccountImageById(string labelImageId, CancellationToken cancellationToken = default)
    {
        return DeleteAccountImageById(_client, _config, labelImageId, cancellationToken);
    }

    /// <summary>
    /// Delete Account Image By Id Delete Account Image By Id
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelImageId">Label Image Id</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> DeleteAccountImageById(Config methodConfig, string labelImageId, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await DeleteAccountImageById(methodClient, methodConfig, labelImageId, cancellationToken);
    }

    /// <summary>
    /// Delete Account Image By Id Delete Account Image By Id
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelImageId">Label Image Id</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> DeleteAccountImageById(HttpClient methodClient, Config methodConfig, string labelImageId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'labelImageId' is set
        if (labelImageId == null)
        {
            throw new ArgumentNullException(nameof(labelImageId));
        }


        RequestOptions requestOptions = new("/v1/account/settings/images/{label_image_id}");

        requestOptions.PathParameters.Add("label_image_id", ShipEngineSDK.Client.ClientUtils.ParameterToString(labelImageId)); // path parameter

        requestOptions.Operation = "AccountApi.DeleteAccountImageById";

        var result = await SendHttpRequestAsync<string>(HttpMethods.Delete, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Get Account Image By ID Retrieve information for an account image.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelImageId">Label Image Id</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetAccountSettingsImagesResponseBody)</returns>
    public Task<GetAccountSettingsImagesResponseBody> GetAccountSettingsImagesById(string labelImageId, CancellationToken cancellationToken = default)
    {
        return GetAccountSettingsImagesById(_client, _config, labelImageId, cancellationToken);
    }

    /// <summary>
    /// Get Account Image By ID Retrieve information for an account image.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelImageId">Label Image Id</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetAccountSettingsImagesResponseBody)</returns>
    public async Task<GetAccountSettingsImagesResponseBody> GetAccountSettingsImagesById(Config methodConfig, string labelImageId, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await GetAccountSettingsImagesById(methodClient, methodConfig, labelImageId, cancellationToken);
    }

    /// <summary>
    /// Get Account Image By ID Retrieve information for an account image.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelImageId">Label Image Id</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetAccountSettingsImagesResponseBody)</returns>
    public async Task<GetAccountSettingsImagesResponseBody> GetAccountSettingsImagesById(HttpClient methodClient, Config methodConfig, string labelImageId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'labelImageId' is set
        if (labelImageId == null)
        {
            throw new ArgumentNullException(nameof(labelImageId));
        }


        RequestOptions requestOptions = new("/v1/account/settings/images/{label_image_id}");

        requestOptions.PathParameters.Add("label_image_id", ShipEngineSDK.Client.ClientUtils.ParameterToString(labelImageId)); // path parameter

        requestOptions.Operation = "AccountApi.GetAccountSettingsImagesById";

        var result = await SendHttpRequestAsync<GetAccountSettingsImagesResponseBody>(HttpMethods.Get, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// List Account Images List all account images for the ShipEngine account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListAccountSettingsImagesResponseBody)</returns>
    public Task<ListAccountSettingsImagesResponseBody> ListAccountImages(CancellationToken cancellationToken = default)
    {
        return ListAccountImages(_client, _config, cancellationToken);
    }

    /// <summary>
    /// List Account Images List all account images for the ShipEngine account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListAccountSettingsImagesResponseBody)</returns>
    public async Task<ListAccountSettingsImagesResponseBody> ListAccountImages(Config methodConfig, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await ListAccountImages(methodClient, methodConfig, cancellationToken);
    }

    /// <summary>
    /// List Account Images List all account images for the ShipEngine account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListAccountSettingsImagesResponseBody)</returns>
    public async Task<ListAccountSettingsImagesResponseBody> ListAccountImages(HttpClient methodClient, Config methodConfig, CancellationToken cancellationToken = default)
    {

        RequestOptions requestOptions = new("/v1/account/settings/images");


        requestOptions.Operation = "AccountApi.ListAccountImages";

        var result = await SendHttpRequestAsync<ListAccountSettingsImagesResponseBody>(HttpMethods.Get, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// List Account Settings List all account settings for the ShipEngine account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetAccountSettingsResponseBody)</returns>
    public Task<GetAccountSettingsResponseBody> ListAccountSettings(CancellationToken cancellationToken = default)
    {
        return ListAccountSettings(_client, _config, cancellationToken);
    }

    /// <summary>
    /// List Account Settings List all account settings for the ShipEngine account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetAccountSettingsResponseBody)</returns>
    public async Task<GetAccountSettingsResponseBody> ListAccountSettings(Config methodConfig, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await ListAccountSettings(methodClient, methodConfig, cancellationToken);
    }

    /// <summary>
    /// List Account Settings List all account settings for the ShipEngine account
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetAccountSettingsResponseBody)</returns>
    public async Task<GetAccountSettingsResponseBody> ListAccountSettings(HttpClient methodClient, Config methodConfig, CancellationToken cancellationToken = default)
    {

        RequestOptions requestOptions = new("/v1/account/settings");


        requestOptions.Operation = "AccountApi.ListAccountSettings";

        var result = await SendHttpRequestAsync<GetAccountSettingsResponseBody>(HttpMethods.Get, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

    /// <summary>
    /// Update Account Image By ID Update information for an account image.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelImageId">Label Image Id</param>
    /// <param name="updateAccountSettingsImageRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public Task<string> UpdateAccountSettingsImagesById(string labelImageId, UpdateAccountSettingsImageRequestBody updateAccountSettingsImageRequestBody, CancellationToken cancellationToken = default)
    {
        return UpdateAccountSettingsImagesById(_client, _config, labelImageId, updateAccountSettingsImageRequestBody, cancellationToken);
    }

    /// <summary>
    /// Update Account Image By ID Update information for an account image.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelImageId">Label Image Id</param>
    /// <param name="updateAccountSettingsImageRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> UpdateAccountSettingsImagesById(Config methodConfig, string labelImageId, UpdateAccountSettingsImageRequestBody updateAccountSettingsImageRequestBody, CancellationToken cancellationToken = default)
    {
        using var methodClient = ConfigureHttpClient(methodConfig, new HttpClient());
        return await UpdateAccountSettingsImagesById(methodClient, methodConfig, labelImageId, updateAccountSettingsImageRequestBody, cancellationToken);
    }

    /// <summary>
    /// Update Account Image By ID Update information for an account image.
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="labelImageId">Label Image Id</param>
    /// <param name="updateAccountSettingsImageRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (string)</returns>
    public async Task<string> UpdateAccountSettingsImagesById(HttpClient methodClient, Config methodConfig, string labelImageId, UpdateAccountSettingsImageRequestBody updateAccountSettingsImageRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'labelImageId' is set
        if (labelImageId == null)
        {
            throw new ArgumentNullException(nameof(labelImageId));
        }

        // verify the required parameter 'updateAccountSettingsImageRequestBody' is set
        if (updateAccountSettingsImageRequestBody == null)
        {
            throw new ArgumentNullException(nameof(updateAccountSettingsImageRequestBody));
        }


        RequestOptions requestOptions = new("/v1/account/settings/images/{label_image_id}");

        requestOptions.PathParameters.Add("label_image_id", ShipEngineSDK.Client.ClientUtils.ParameterToString(labelImageId)); // path parameter
        requestOptions.Data = JsonSerializer.Serialize(updateAccountSettingsImageRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "AccountApi.UpdateAccountSettingsImagesById";

        var result = await SendHttpRequestAsync<string>(HttpMethods.Put, requestOptions, methodClient, methodConfig, cancellationToken);

        return result;
    }

}