/*
 * ShipEngine API
 *
 * The version of the OpenAPI document: 1.1.202406212006
 * Contact: sales@shipengine.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using ShipEngineSDK.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace ShipEngineSDK;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial interface IShipEngine
{
    /// <summary>
    /// Delete a Scheduled Pickup Delete a previously-scheduled pickup by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="pickupId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeletePickupByIdResponseBody)</returns>
    Task<DeletePickupByIdResponseBody> DeleteScheduledPickup(string pickupId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Delete a Scheduled Pickup Delete a previously-scheduled pickup by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="pickupId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeletePickupByIdResponseBody)</returns>
    Task<DeletePickupByIdResponseBody> DeleteScheduledPickup(HttpClient methodClient, string pickupId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Pickup By ID Get Pickup By ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="pickupId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetPickupByIdResponseBody)</returns>
    Task<GetPickupByIdResponseBody> GetPickupById(string pickupId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get Pickup By ID Get Pickup By ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="pickupId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetPickupByIdResponseBody)</returns>
    Task<GetPickupByIdResponseBody> GetPickupById(HttpClient methodClient, string pickupId, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Scheduled Pickups List all pickups that have been scheduled for this carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="carrierId">Carrier ID (optional)</param>
    /// <param name="warehouseId">Warehouse ID (optional)</param>
    /// <param name="createdAtStart">Only return scheduled pickups that were created on or after a specific date/time (optional)</param>
    /// <param name="createdAtEnd">Only return scheduled pickups that were created on or before a specific date/time (optional)</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pageSize">The number of results to return per response. (optional, default to 25)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetPickupsResponseBody)</returns>
    Task<GetPickupsResponseBody> ListScheduledPickups(string carrierId, string warehouseId, DateTime? createdAtStart, DateTime? createdAtEnd, int? page, int? pageSize, CancellationToken cancellationToken = default);

    /// <summary>
    /// List Scheduled Pickups List all pickups that have been scheduled for this carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="carrierId">Carrier ID (optional)</param>
    /// <param name="warehouseId">Warehouse ID (optional)</param>
    /// <param name="createdAtStart">Only return scheduled pickups that were created on or after a specific date/time (optional)</param>
    /// <param name="createdAtEnd">Only return scheduled pickups that were created on or before a specific date/time (optional)</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pageSize">The number of results to return per response. (optional, default to 25)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetPickupsResponseBody)</returns>
    Task<GetPickupsResponseBody> ListScheduledPickups(HttpClient methodClient, string carrierId, string warehouseId, DateTime? createdAtStart, DateTime? createdAtEnd, int? page, int? pageSize, CancellationToken cancellationToken = default);

    /// <summary>
    /// Schedule a Pickup Schedule a package pickup with a carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="schedulePickupRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SchedulePickupResponseBody)</returns>
    Task<SchedulePickupResponseBody> SchedulePickup(SchedulePickupRequestBody schedulePickupRequestBody, CancellationToken cancellationToken = default);

    /// <summary>
    /// Schedule a Pickup Schedule a package pickup with a carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="schedulePickupRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SchedulePickupResponseBody)</returns>
    Task<SchedulePickupResponseBody> SchedulePickup(HttpClient methodClient, SchedulePickupRequestBody schedulePickupRequestBody, CancellationToken cancellationToken = default);

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class ShipEngine
{
    /// <summary>
    /// Delete a Scheduled Pickup Delete a previously-scheduled pickup by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="pickupId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeletePickupByIdResponseBody)</returns>
    public Task<DeletePickupByIdResponseBody> DeleteScheduledPickup(string pickupId, CancellationToken cancellationToken = default)
    {
        return DeleteScheduledPickup(_client, pickupId, cancellationToken);
    }

    /// <summary>
    /// Delete a Scheduled Pickup Delete a previously-scheduled pickup by ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="pickupId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeletePickupByIdResponseBody)</returns>
    public async Task<DeletePickupByIdResponseBody> DeleteScheduledPickup(HttpClient methodClient, string pickupId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'pickupId' is set
        if (pickupId == null)
        {
            throw new ArgumentNullException(nameof(pickupId));
        }


        RequestOptions requestOptions = new("/v1/pickups/{pickup_id}");

        requestOptions.PathParameters.Add("pickup_id", ShipEngineSDK.ClientUtils.ParameterToString(pickupId)); // path parameter

        requestOptions.Operation = "PackagePickupsApi.DeleteScheduledPickup";

        var result = await SendHttpRequestAsync<DeletePickupByIdResponseBody>(HttpMethods.Delete, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// Get Pickup By ID Get Pickup By ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="pickupId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetPickupByIdResponseBody)</returns>
    public Task<GetPickupByIdResponseBody> GetPickupById(string pickupId, CancellationToken cancellationToken = default)
    {
        return GetPickupById(_client, pickupId, cancellationToken);
    }

    /// <summary>
    /// Get Pickup By ID Get Pickup By ID
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="pickupId"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetPickupByIdResponseBody)</returns>
    public async Task<GetPickupByIdResponseBody> GetPickupById(HttpClient methodClient, string pickupId, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'pickupId' is set
        if (pickupId == null)
        {
            throw new ArgumentNullException(nameof(pickupId));
        }


        RequestOptions requestOptions = new("/v1/pickups/{pickup_id}");

        requestOptions.PathParameters.Add("pickup_id", ShipEngineSDK.ClientUtils.ParameterToString(pickupId)); // path parameter

        requestOptions.Operation = "PackagePickupsApi.GetPickupById";

        var result = await SendHttpRequestAsync<GetPickupByIdResponseBody>(HttpMethods.Get, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// List Scheduled Pickups List all pickups that have been scheduled for this carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="carrierId">Carrier ID (optional)</param>
    /// <param name="warehouseId">Warehouse ID (optional)</param>
    /// <param name="createdAtStart">Only return scheduled pickups that were created on or after a specific date/time (optional)</param>
    /// <param name="createdAtEnd">Only return scheduled pickups that were created on or before a specific date/time (optional)</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pageSize">The number of results to return per response. (optional, default to 25)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetPickupsResponseBody)</returns>
    public Task<GetPickupsResponseBody> ListScheduledPickups(string carrierId = default, string warehouseId = default, DateTime? createdAtStart = default, DateTime? createdAtEnd = default, int? page = default, int? pageSize = default, CancellationToken cancellationToken = default)
    {
        return ListScheduledPickups(_client, carrierId, warehouseId, createdAtStart, createdAtEnd, page, pageSize, cancellationToken);
    }

    /// <summary>
    /// List Scheduled Pickups List all pickups that have been scheduled for this carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="carrierId">Carrier ID (optional)</param>
    /// <param name="warehouseId">Warehouse ID (optional)</param>
    /// <param name="createdAtStart">Only return scheduled pickups that were created on or after a specific date/time (optional)</param>
    /// <param name="createdAtEnd">Only return scheduled pickups that were created on or before a specific date/time (optional)</param>
    /// <param name="page">Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)</param>
    /// <param name="pageSize">The number of results to return per response. (optional, default to 25)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetPickupsResponseBody)</returns>
    public async Task<GetPickupsResponseBody> ListScheduledPickups(HttpClient methodClient, string carrierId = default, string warehouseId = default, DateTime? createdAtStart = default, DateTime? createdAtEnd = default, int? page = default, int? pageSize = default, CancellationToken cancellationToken = default)
    {

        RequestOptions requestOptions = new("/v1/pickups");

        if (carrierId != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "carrier_id", carrierId));
        }
        if (warehouseId != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "warehouse_id", warehouseId));
        }
        if (createdAtStart != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "created_at_start", createdAtStart));
        }
        if (createdAtEnd != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "created_at_end", createdAtEnd));
        }
        if (page != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "page", page));
        }
        if (pageSize != null)
        {
            requestOptions.QueryParameters.Add(ShipEngineSDK.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
        }

        requestOptions.Operation = "PackagePickupsApi.ListScheduledPickups";

        var result = await SendHttpRequestAsync<GetPickupsResponseBody>(HttpMethods.Get, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

    /// <summary>
    /// Schedule a Pickup Schedule a package pickup with a carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="schedulePickupRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SchedulePickupResponseBody)</returns>
    public Task<SchedulePickupResponseBody> SchedulePickup(SchedulePickupRequestBody schedulePickupRequestBody, CancellationToken cancellationToken = default)
    {
        return SchedulePickup(_client, schedulePickupRequestBody, cancellationToken);
    }

    /// <summary>
    /// Schedule a Pickup Schedule a package pickup with a carrier
    /// </summary>
    /// <exception cref="System.ArgumentNullException">Thrown when required argument is null</exception>
    /// <exception cref="ShipEngineSDK.ShipEngineException">Thrown when fails to make API call</exception>
    /// <param name="methodClient">HttpClient to use for the request</param>
    /// <param name="schedulePickupRequestBody"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SchedulePickupResponseBody)</returns>
    public async Task<SchedulePickupResponseBody> SchedulePickup(HttpClient methodClient, SchedulePickupRequestBody schedulePickupRequestBody, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'schedulePickupRequestBody' is set
        if (schedulePickupRequestBody == null)
        {
            throw new ArgumentNullException(nameof(schedulePickupRequestBody));
        }


        RequestOptions requestOptions = new("/v1/pickups");

        requestOptions.Data = JsonSerializer.Serialize(schedulePickupRequestBody, JsonSerializerOptions);

        requestOptions.Operation = "PackagePickupsApi.SchedulePickup";

        var result = await SendHttpRequestAsync<SchedulePickupResponseBody>(HttpMethods.Post, requestOptions, methodClient, _config, cancellationToken);

        return result;
    }

}